{
  "name": "mbpp_442_positive_count",
  "language": "swift",
  "prompt": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    return Double(nums.filter { $0 > 0 }.count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpycbyux2s/tmpycbyux2s.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4534d46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4534a3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4534a3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4534a3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpycbyux2s                        0x0000563a9e2a6485 <unavailable> + 5253\n5    libc.so.6                          0x00002b4534f32460 __libc_start_main + 245\n6    tmpycbyux2s                        0x0000563a9e2a6089 <unavailable> + 4233\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    return Double(nums.filter { $0 > 0 }.count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpycbyux2s/tmpycbyux2s.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4534d46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4534a3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4534a3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4534a3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpycbyux2s                        0x0000563a9e2a6485 <unavailable> + 5253\n5    libc.so.6                          0x00002b4534f32460 __libc_start_main + 245\n6    tmpycbyux2s                        0x0000563a9e2a6089 <unavailable> + 4233\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for i in nums {\n        if i > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpvodv2h05/tmpvodv2h05.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbf7d76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbf7a6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abbf7a6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abbf7a6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvodv2h05                        0x0000562432798525 <unavailable> + 5413\n5    libc.so.6                          0x00002abbf7f62460 __libc_start_main + 245\n6    tmpvodv2h05                        0x0000562432798129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var pos_count = 0\n    for num in nums {\n        if num > 0 {\n            pos_count += 1\n        }\n    }\n    return Double(pos_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpi9nzwo8c/tmpi9nzwo8c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba6d79a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba6d769ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba6d769a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba6d76997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi9nzwo8c                        0x000055602140f525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba6d7b8f460 __libc_start_main + 245\n6    tmpi9nzwo8c                        0x000055602140f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    return Double(nums.filter { $0 > 0 }.count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpycbyux2s/tmpycbyux2s.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4534d46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4534a3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4534a3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4534a3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpycbyux2s                        0x0000563a9e2a6485 <unavailable> + 5253\n5    libc.so.6                          0x00002b4534f32460 __libc_start_main + 245\n6    tmpycbyux2s                        0x0000563a9e2a6089 <unavailable> + 4233\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var pos_count = 0\n    for num in nums {\n        if num > 0 {\n            pos_count += 1\n        }\n    }\n    return Double(pos_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpi9nzwo8c/tmpi9nzwo8c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba6d79a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba6d769ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba6d769a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba6d76997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi9nzwo8c                        0x000055602140f525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba6d7b8f460 __libc_start_main + 245\n6    tmpi9nzwo8c                        0x000055602140f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for i in nums {\n        if i > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "tmpvodv2h05/tmpvodv2h05.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbf7d76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbf7a6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abbf7a6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abbf7a6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvodv2h05                        0x0000562432798525 <unavailable> + 5413\n5    libc.so.6                          0x00002abbf7f62460 __libc_start_main + 245\n6    tmpvodv2h05                        0x0000562432798129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}