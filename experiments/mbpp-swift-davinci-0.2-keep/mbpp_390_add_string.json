{
  "name": "mbpp_390_add_string",
  "language": "swift",
  "prompt": "\n/// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_: AnyHashable, string: String) -> [String] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(add_string(list_: [1, 2, 3, 4], string: \"temp{0}\") == [\"temp1\", \"temp2\", \"temp3\", \"temp4\"])\nassert(add_string(list_: [\"a\", \"b\", \"c\", \"d\"], string: \"python{0}\") == [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])\nassert(add_string(list_: [5, 6, 7, 8], string: \"string{0}\") == [\"string5\", \"string6\", \"string7\", \"string8\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var list = list_ as! [Any]\n    var result = [String]()\n    for i in 0..<list.count {\n        result.append(String(format: string, list[i]))\n    }\n    return result",
    "    var list = list_ as! [AnyHashable]\n    var result = [String]()\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    return list_.map { \"\\($0)\\(string)\" }",
    "    var list = list_ as! [String]\n    for i in 0..<list.count {\n        list[i] = String(format: string, list[i])\n    }\n    return list",
    "    let list = list_ as! [Any]\n    return list.map { \"\\(string)\\($0)\" }",
    "    var list = list_ as! [Any]\n    var result: [String] = []\n    for i in 0..<list.count {\n        result.append(String(format: string, list[i]))\n    }\n    return result",
    "    var list = list_ as! [Any]\n    var result = [String]()\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    var list = list_ as! [Any]\n    var result: [String] = []\n    for i in 0..<list.count {\n        result.append(String(format: string, list[i]))\n    }\n    return result",
    "    var list = list_ as! [AnyHashable]\n    var result = [String]()\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    var list = list_ as! [Any]\n    var result = [String]()\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    let list = list_ as! [AnyHashable]\n    return list.map { String(format: string, $0) }",
    "    return list_.map { \"\\($0)\\(string)\" }",
    "    var list = list_ as! [String]\n    for i in 0..<list.count {\n        list[i] = string + list[i]\n    }\n    return list",
    "    return list_.map { \"\\(string)\\($0)\" }",
    "    return list_.map { \"\\(string)\\($0)\" }",
    "    let list = list_ as! [Any]\n    var result = [String]()\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    var list = list_ as! [AnyHashable]\n    var result: [String] = []\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    var list = list_ as! [Any]\n    var result = [String]()\n    for item in list {\n        result.append(String(format: string, item))\n    }\n    return result",
    "    let list = list_ as! [AnyHashable]\n    return list.map { \"\\(string)\\($0)\" }",
    "    return list_.map { \"\\($0)\\(string)\" }"
  ]
}