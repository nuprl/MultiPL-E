{
  "name": "mbpp_422_find_Average_Of_Cube",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += pow(Double(i), 3)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpjoi63wj0.swift:6:16: error: cannot find 'pow' in scope\n        sum += pow(Double(i), 3)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Int = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += pow(Double(i), 3)\n    }\n    return sum/Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp4nu1z8e7.swift:6:16: error: cannot find 'pow' in scope\n        sum += pow(Double(i), 3)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += pow(Double(i), 3)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpa95i35op.swift:6:16: error: cannot find 'pow' in scope\n        sum += pow(Double(i), 3)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += pow(Double(i), 3)\n    }\n    return sum/Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp4nu1z8e7.swift:6:16: error: cannot find 'pow' in scope\n        sum += pow(Double(i), 3)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += pow(Double(i), 3)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmpa95i35op.swift:6:16: error: cannot find 'pow' in scope\n        sum += pow(Double(i), 3)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum / n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpct8wmxlq/tmpct8wmxlq.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b78eb513c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78eb20ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78eb20a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78eb2097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpct8wmxlq                        0x000055e0216e5342 <unavailable> + 4930\n5    libc.so.6                          0x00002b78eb6ff460 __libc_start_main + 245\n6    tmpct8wmxlq                        0x000055e0216e4fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum)/Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0.0\n    for i in 1...n {\n        sum += Double(i * i * i)\n    }\n    return sum / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n: Int) -> Double {\n    var sum: Double = 0\n    for i in 1...n {\n        sum += pow(Double(i), 3)\n    }\n    return sum/Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Average_Of_Cube(n: 2) == 4.5)\nassert(find_Average_Of_Cube(n: 3) == 12)\nassert(find_Average_Of_Cube(n: 1) == 1)",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "/tmp/tmp74v3ikhu.swift:6:16: error: cannot find 'pow' in scope\n        sum += pow(Double(i), 3)\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}