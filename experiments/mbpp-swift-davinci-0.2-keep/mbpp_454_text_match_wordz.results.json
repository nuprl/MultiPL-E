{
  "name": "mbpp_454_text_match_wordz",
  "language": "swift",
  "prompt": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "/tmp/tmpm8n4irfu.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpm8n4irfu.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpl9jsd6se.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl9jsd6se.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"z\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpkrql6xjp.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"z\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkrql6xjp.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpuyvqit87.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuyvqit87.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmp34tsevb9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: .CaseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp34tsevb9.swift:4:75: error: cannot infer contextual base in reference to member 'CaseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: .CaseInsensitive)\n                                                                         ~^~~~~~~~~~~~~~~\n/tmp/tmp34tsevb9.swift:5:67: error: cannot find 'NSMakeRange' in scope\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n                                                                  ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpy8q3dara.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpy8q3dara.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmp7h1rrsmg.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7h1rrsmg.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpl9jsd6se.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl9jsd6se.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpr8hd_d0f.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpr8hd_d0f.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmp7vhp0_gv.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7vhp0_gv.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpuyvqit87.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuyvqit87.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"z\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmp5hirt4z_.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"z\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5hirt4z_.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "/tmp/tmpm8n4irfu.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpm8n4irfu.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpuyvqit87.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuyvqit87.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.range(of: \"\\\\bz\\\\w*\\\\b\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp8k_huaes.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"\\\\bz\\\\w*\\\\b\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp8k_huaes.swift:4:52: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"\\\\bz\\\\w*\\\\b\", options: .regularExpression) != nil\n                                                  ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmp0wigt4lg.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0wigt4lg.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpdz2z4feh.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdz2z4feh.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpuyvqit87.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuyvqit87.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpns7b8w10.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpns7b8w10.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmp26thhb78.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp26thhb78.swift:4:84: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: .caseInsensitive)\n                                                                                  ~^~~~~~~~~~~~~~~\n/tmp/tmp26thhb78.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmpndnqk6f7.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: .CaseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpndnqk6f7.swift:4:84: error: cannot infer contextual base in reference to member 'CaseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: .CaseInsensitive)\n                                                                                  ~^~~~~~~~~~~~~~~\n/tmp/tmpndnqk6f7.swift:5:67: error: cannot find 'NSMakeRange' in scope\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n                                                                  ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmp1ep_ownd.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ep_ownd.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpns7b8w10.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpns7b8w10.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmpn7gau9ze.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7gau9ze.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpns7b8w10.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpns7b8w10.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpyqmrc2k2.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpyqmrc2k2.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "/tmp/tmpm8n4irfu.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpm8n4irfu.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "/tmp/tmpm8n4irfu.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpm8n4irfu.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510607,
      "stdout": "",
      "stderr": "tmppweg5khu/tmppweg5khu.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab349209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab348f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab348f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab348eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppweg5khu                        0x000055f725aaa25b <unavailable> + 4699\n5    libc.so.6                          0x00002ab3493f5460 __libc_start_main + 245\n6    tmppweg5khu                        0x000055f725aa9ee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmpn7gau9ze.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7gau9ze.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpns7b8w10.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpns7b8w10.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpdq5rdmeu.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdq5rdmeu.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpl9jsd6se.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl9jsd6se.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmpvzkgdn9j.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvzkgdn9j.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]*z[a-z]*\\\\b\", options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmprv0kuy3v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]*z[a-z]*\\\\b\", options: .CaseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprv0kuy3v.swift:4:84: error: cannot infer contextual base in reference to member 'CaseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]*z[a-z]*\\\\b\", options: .CaseInsensitive)\n                                                                                  ~^~~~~~~~~~~~~~~\n/tmp/tmprv0kuy3v.swift:5:67: error: cannot find 'NSMakeRange' in scope\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n                                                                  ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]*z[a-z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "/tmp/tmp0eaoj_bo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]*z[a-z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0eaoj_bo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp82h5cp6o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp82h5cp6o.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1666123474,
      "stdout": "",
      "stderr": "/tmp/tmp5y167zic.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5y167zic.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpqb4p2taz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqb4p2taz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpl9jsd6se.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl9jsd6se.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpuyvqit87.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuyvqit87.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpl9jsd6se.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl9jsd6se.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpuyvqit87.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+z[a-zA-Z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuyvqit87.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmp5iettueo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*z\\\\w*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5iettueo.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpoa4adb2r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-z]+z[a-z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa4adb2r.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpwlhbq62h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\w*z\\\\w*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpwlhbq62h.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz(text: \"pythonz.\") == true)\nassert(text_match_wordz(text: \"xyz.\") == true)\nassert(text_match_wordz(text: \"  lang  .\") == false)",
      "timestamp": 1665510606,
      "stdout": "",
      "stderr": "/tmp/tmpktw52kx0.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpktw52kx0.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}