{
  "name": "mbpp_282_sub_list",
  "language": "swift",
  "prompt": "\n/// Write a function to subtract two lists element-wise.\nfunc sub_list(nums1: [Int], nums2: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sub_list(nums1: [1, 2, 3], nums2: [4, 5, 6]) == [-3, -3, -3])\nassert(sub_list(nums1: [1, 2], nums2: [3, 4]) == [-2, -2])\nassert(sub_list(nums1: [90, 120], nums2: [50, 70]) == [40, 50])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    return zip(nums1, nums2).map { $0 - $1 }",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result: [Int] = []\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    return zip(nums1, nums2).map { $0 - $1 }",
    "    var result = [Int]()\n    for (i, n) in nums1.enumerated() {\n        result.append(n - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    return zip(nums1, nums2).map(-)",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<nums1.count {\n        result.append(nums1[i] - nums2[i])\n    }\n    return result",
    "    var result = [Int]()\n    for (index, num) in nums1.enumerated() {\n        result.append(num - nums2[index])\n    }\n    return result"
  ]
}