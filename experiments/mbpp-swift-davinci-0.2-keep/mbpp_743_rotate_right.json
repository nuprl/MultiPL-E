{
  "name": "mbpp_743_rotate_right",
  "language": "swift",
  "prompt": "\n/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = list[list.count - m..<list.count]\n    let b = list[0..<list.count - m]\n    return Array(a + b)",
    "    let n = list.count\n    let m = m % n\n    let list = list.reversed()\n    let left = list[0..<m].reversed()\n    let right = list[m..<n].reversed()\n    return Array(left + right)",
    "    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list = list.reversed()\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n    return list",
    "    return Array(list[list.count - m..<list.count] + list[0..<list.count - m])",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let r = m % n\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(list[(n - r + i) % n])\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    let k = m % n\n    let l = list[n-k..<n] + list[0..<n-k]\n    return Array(l)",
    "    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    let list_1 = Array(list[n - m ..< n])\n    let list_2 = Array(list[0 ..< n - m])\n    list = list_1 + list_2\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m ..< n]\n    list.removeSubrange(n - m ..< n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = list[list.count - m ..< list.count]\n    let b = list[0 ..< list.count - m]\n    return Array(a + b)",
    "    let n = list.count\n    let new_list = list.suffix(m) + list.prefix(n - m)\n    return Array(new_list)",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result"
  ]
}