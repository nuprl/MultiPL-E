{
  "name": "mbpp_743_rotate_right",
  "language": "swift",
  "prompt": "\n/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = list[list.count - m..<list.count]\n    let b = list[0..<list.count - m]\n    return Array(a + b)",
    "    let n = list.count\n    let m = m % n\n    let list = list.reversed()\n    let left = list[0..<m].reversed()\n    let right = list[m..<n].reversed()\n    return Array(left + right)",
    "    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list = list.reversed()\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n    return list",
    "    return Array(list[list.count - m..<list.count] + list[0..<list.count - m])",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let r = m % n\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(list[(n - r + i) % n])\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    let k = m % n\n    let l = list[n-k..<n] + list[0..<n-k]\n    return Array(l)",
    "    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    let list_1 = Array(list[n - m ..< n])\n    let list_2 = Array(list[0 ..< n - m])\n    list = list_1 + list_2\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m ..< n]\n    list.removeSubrange(n - m ..< n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = list[list.count - m ..< list.count]\n    let b = list[0 ..< list.count - m]\n    return Array(a + b)",
    "    let n = list.count\n    let new_list = list.suffix(m) + list.prefix(n - m)\n    return Array(new_list)",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        list.insert(list.removeLast(), at: 0)\n    }\n    return list",
    "    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n-m..<n]\n    list.removeSubrange(n-m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n - mod..<n] + list[0..<n - mod])",
    "    let n = list.count\n    let r = m % n\n    let left = Array(list[n - r ..< n])\n    let right = Array(list[0 ..< n - r])\n    return left + right",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    let n = list.count\n    let m = m % n\n    let result = Array(list[n-m..<n] + list[0..<n-m])\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.popLast()\n        list.insert(last!, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n - mod ..< n] + list[0 ..< n - mod])",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    let right = Array(list[n-m..<n])\n    let left = Array(list[0..<n-m])\n    return right + left",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m ..< n]\n    list.removeSubrange(n - m ..< n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m ..< n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    let result = Array(list[n - m ..< n] + list[0 ..< n - m])\n    return result",
    "    let n = list.count\n    let m = m % n\n    let left = list[0..<(n - m)]\n    let right = list[(n - m)..<n]\n    return Array(right) + Array(left)",
    "    var list = list\n    let n = list.count\n    if m == 0 || m == n {\n        return list\n    }\n    m %= n\n    list = list.reversed()\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n    return list",
    "    let n = list.count\n    let m = m % n\n    let left = list[0..<n-m]\n    let right = list[n-m..<n]\n    return Array(right) + Array(left)",
    "    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    let n = list.count\n    let mod = m % n\n    let left = Array(list[n - mod..<n])\n    let right = Array(list[0..<n - mod])\n    return left + right",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n - m ..< n] + list[0 ..< n - m])",
    "    let n = list.count\n    let m = m % n\n    let left = Array(list[n-m..<n])\n    let right = Array(list[0..<n-m])\n    return left + right",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    let a = Array(list[n - m..<n])\n    let b = Array(list[0..<n - m])\n    return a + b",
    "    let n = list.count\n    let m = m % n\n    let r = Array(list[n-m..<n]) + Array(list[0..<n-m])\n    return r",
    "    let n = list.count\n    let m = m % n\n    let left = list[0..<n - m]\n    let right = list[n - m..<n]\n    return Array(right) + Array(left)",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    var result = [Int]()\n    for i in 0..<n {\n        result.append(list[(n - m + i) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        list.insert(list.removeLast(), at: 0)\n    }\n    return list",
    "    var result = [Int]()\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        result.append(last)\n    }\n    result.append(contentsOf: list)\n    return result",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n-mod..<n] + list[0..<n-mod])",
    "    var new_list = list\n    for _ in 0..<m {\n        new_list.insert(new_list.removeLast(), at: 0)\n    }\n    return new_list",
    "    var new_list = list\n    for _ in 0..<m {\n        new_list.insert(new_list.removeLast(), at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    let left = list[0..<(n - m)]\n    let right = list[(n - m)..<n]\n    return Array(right) + Array(left)",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n - m ..< n] + list[0 ..< n - m])",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list.reverse()\n    list[0..<m].reverse()\n    list[m..<n].reverse()\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let r = m % n\n    let l1 = Array(list[n - r ..< n])\n    let l2 = Array(list[0 ..< n - r])\n    return l1 + l2",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let a = list[n-m..<n]\n    let b = list[0..<n-m]\n    list = Array(a) + Array(b)\n    return list",
    "    let n = list.count\n    let m = m % n\n    let a = list[n-m..<n]\n    let b = list[0..<n-m]\n    return Array(a) + Array(b)",
    "    let n = list.count\n    let m = m % n\n    let list_left = Array(list[n - m..<n])\n    let list_right = Array(list[0..<n - m])\n    return list_left + list_right",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m ..< n]\n    list.removeSubrange(n - m ..< n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.popLast()\n        result.insert(last!, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let temp = list[n-m..<n]\n    list.removeSubrange(n-m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let m = m % n\n    let left = list[0..<n - m]\n    let right = list[n - m..<n]\n    return Array(right) + Array(left)",
    "    let n = list.count\n    let new_list = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        new_list[(i + m) % n] = list[i]\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let temp = list[n - m..<n]\n    list.removeSubrange(n - m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeSubrange(n - m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let m = m % n\n    let a = Array(list[n-m..<n])\n    let b = Array(list[0..<n-m])\n    return a + b",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let temp = list[n - m..<n]\n    list.removeSubrange(n - m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n-m..<n]\n    list.removeSubrange(n-m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result: [Int] = []\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    for i in 0..<m {\n        let x = result[n - 1]\n        for j in (1...n - 1).reversed() {\n            result[j] = result[j - 1]\n        }\n        result[0] = x\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n-m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let m = n - m\n    let left = Array(list[0..<m])\n    let right = Array(list[m..<n])\n    list = right + left\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list = list[n-m..<n] + list[0..<n-m]\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n-m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let mod = m % n\n    let result = Array(list[n-mod..<n] + list[0..<n-mod])\n    return result",
    "    var list = list\n    let n = list.count\n    m %= n\n    list = list.reversed()\n    list[0..<m] = list[0..<m].reversed()\n    list[m..<n] = list[m..<n].reversed()\n    return list",
    "    var result = list\n    let n = list.count\n    for i in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n - m ..< n] + list[0 ..< n - m])",
    "    let n = list.count\n    let m = m % n\n    let left = Array(list[n - m..<n])\n    let right = Array(list[0..<n - m])\n    return left + right",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let temp = list[n-m..<n]\n    list.removeSubrange(n-m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    let list = list + list\n    return Array(list[n-m..<n-m+n])",
    "    var list = list\n    let n = list.count\n    if m == 0 || m == n {\n        return list\n    }\n    m %= n\n    list = list.reversed()\n    list = list[m..<n] + list[0..<m]\n    return list.reversed()",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeLast(m)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var new_list = list\n    for _ in 0..<m {\n        new_list.insert(new_list.popLast()!, at: 0)\n    }\n    return new_list",
    "    var new_list = list\n    for _ in 0..<m {\n        let last_item = new_list.removeLast()\n        new_list.insert(last_item, at: 0)\n    }\n    return new_list",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = Array(list[list.count - m..<list.count])\n    let b = Array(list[0..<list.count - m])\n    list = a + b\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n-m..<n]\n    list.removeSubrange(n-m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n-mod..<n] + list[0..<n-mod])",
    "    var new_list = list\n    let n = list.count\n    for i in 0..<m {\n        let temp = new_list[n-1]\n        for j in (1...n-1).reversed() {\n            new_list[j] = new_list[j-1]\n        }\n        new_list[0] = temp\n    }\n    return new_list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    let n = list.count\n    let r = m % n\n    return Array(list[n-r..<n] + list[0..<n-r])",
    "    var list = list\n    var m = m\n    while m > 0 {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n        m -= 1\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    let list = list + list\n    return Array(list[n-m..<n+m])",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let count = list.count\n    let m = m % count\n    let right = list[count - m ..< count]\n    let left = list[0 ..< count - m]\n    return Array(right + left)",
    "    var list = list\n    let size = list.count\n    let m = m % size\n    let a = Array(list[size - m ..< size])\n    let b = Array(list[0 ..< size - m])\n    list = a + b\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        list.insert(list.removeLast(), at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list.reverse()\n    let left = list[0..<m]\n    let right = list[m..<n]\n    let left_reversed = left.reversed()\n    let right_reversed = right.reversed()\n    let result = left_reversed + right_reversed\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (0..<n-1).reversed() {\n            list[i+1] = list[i]\n        }\n        list[0] = temp\n    }\n    return list",
    "    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 1...m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list = list.reversed()\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let r = m % n\n    return Array(list[n - r ..< n] + list[0 ..< n - r])",
    "    var result = [Int]()\n    for i in m..<list.count {\n        result.append(list[i])\n    }\n    for i in 0..<m {\n        result.append(list[i])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    let a = Array(list[n - m ..< n])\n    let b = Array(list[0 ..< n - m])\n    return a + b",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let last = list[n-1]\n        for i in (0...n-2).reversed() {\n            list[i+1] = list[i]\n        }\n        list[0] = last\n    }\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n-mod..<n] + list[0..<n-mod])",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let last = list.removeLast(m)\n    list.insert(contentsOf: last, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.popLast()!\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let mod = m % n\n    let result = Array(list[n - mod..<n] + list[0..<n - mod])\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let last_m_elements = list[list.count - m ..< list.count]\n    let first_elements = list[0 ..< list.count - m]\n    list.removeSubrange(0 ..< list.count - m)\n    list.insert(contentsOf: first_elements, at: 0)\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n-m..<n]\n    list.removeSubrange(n-m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j - m >= 0 {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[j] = temp\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n - m..<n] + list[0..<n - m])",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    let right = list[n - m ..< n]\n    let left = list[0 ..< n - m]\n    return Array(right) + Array(left)",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n-mod..<n] + list[0..<n-mod])",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    let n = list.count\n    let r = m % n\n    let l1 = Array(list[n - r..<n])\n    let l2 = Array(list[0..<n - r])\n    return l1 + l2",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    let n = list.count\n    let mod = m % n\n    return Array(list[n-mod..<n] + list[0..<n-mod])",
    "    let n = list.count\n    let m = m % n\n    let new_list = Array(list[n - m..<n]) + Array(list[0..<n - m])\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    let result = Array(list[n - m ..< n] + list[0 ..< n - m])\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list"
  ]
}