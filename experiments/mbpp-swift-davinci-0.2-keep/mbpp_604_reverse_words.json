{
  "name": "mbpp_604_reverse_words",
  "language": "swift",
  "prompt": "\n/// Write a function to reverse words seperated by spaces in a given string.\nfunc reverse_words(s: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_words(s: \"python program\") == \"program python\")\nassert(reverse_words(s: \"java language\") == \"language java\")\nassert(reverse_words(s: \"indian man\") == \"man indian\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for i in 0..<words.count {\n        reversed += words[words.count - 1 - i]\n        if i != words.count - 1 {\n            reversed += \" \"\n        }\n    }\n    return reversed",
    "    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word = word + String(c)\n        }\n    }\n    result = word + \" \" + result\n    return result",
    "    var words = s.split(separator: \" \")\n    var reversed = \"\"\n    for i in 0..<words.count {\n        reversed += words[words.count - 1 - i]\n        if i != words.count - 1 {\n            reversed += \" \"\n        }\n    }\n    return reversed",
    "    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += String(c)\n        }\n    }\n    result = word + \" \" + result\n    return result",
    "    var words = s.componentsSeparatedByString(\" \")\n    var reversed = \"\"\n    for i in 0..<words.count {\n        reversed += words[words.count - 1 - i]\n        if i != words.count - 1 {\n            reversed += \" \"\n        }\n    }\n    return reversed",
    "    var result = \"\"\n    var word = \"\"\n    for c in s {\n        if c == \" \" {\n            if word.count > 0 {\n                result = word + \" \" + result\n                word = \"\"\n            }\n        } else {\n            word += String(c)\n        }\n    }\n    if word.count > 0 {\n        result = word + \" \" + result\n    }\n    return result",
    "    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += String(c)\n        }\n    }\n    result = word + \" \" + result\n    return result",
    "    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word.append(c)\n        }\n    }\n    result = word + \" \" + result\n    return result",
    "    let words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for word in words {\n        reversed = word + \" \" + reversed\n    }\n    return reversed",
    "    var result = \"\"\n    var words = s.split(separator: \" \")\n    for i in stride(from: words.count - 1, through: 0, by: -1) {\n        result += words[i] + \" \"\n    }\n    return result",
    "    var words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for word in words {\n        reversed = word + \" \" + reversed\n    }\n    return reversed",
    "    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += String(c)\n        }\n    }\n    result = word + \" \" + result\n    return result",
    "    return s.split(separator: \" \").map { String($0.reversed()) }.joined(separator: \" \")",
    "    var words = s.components(separatedBy: \" \")\n    var result = \"\"\n    for i in stride(from: words.count - 1, through: 0, by: -1) {\n        result += words[i] + \" \"\n    }\n    return result",
    "    var words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for i in 0..<words.count {\n        reversed += words[words.count - 1 - i]\n        if i < words.count - 1 {\n            reversed += \" \"\n        }\n    }\n    return reversed",
    "    var words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for i in stride(from: words.count - 1, through: 0, by: -1) {\n        reversed += words[i] + \" \"\n    }\n    return reversed",
    "    var rev = \"\"\n    var word = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            rev = word + \" \" + rev\n            word = \"\"\n        } else {\n            word += String(c)\n        }\n    }\n    rev = word + \" \" + rev\n    return rev",
    "    var words = s.split(separator: \" \")\n    var result = \"\"\n    for word in words.reversed() {\n        result += word + \" \"\n    }\n    return result",
    "    var words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for i in (0..<words.count).reversed() {\n        reversed += words[i] + \" \"\n    }\n    return reversed",
    "    var words = s.components(separatedBy: \" \")\n    var reversed = \"\"\n    for word in words {\n        reversed = word + \" \" + reversed\n    }\n    return reversed"
  ]
}