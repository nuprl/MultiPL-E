{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "swift",
  "prompt": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    var prod = 1\n    for i in 0..<arr.count {\n        prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var prod = 1\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n            prod = 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            result += prod\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    var prod = 1\n    for i in 0..<arr.count {\n        prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var prod = 1\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += prod * arr[i]\n        prod *= arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9dbrqga4/tmp9dbrqga4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e8c771c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e8c468b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e8c468988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e8c4677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9dbrqga4                        0x0000564dd442b542 <unavailable> + 5442\n5    libc.so.6                          0x00002b4e8c95d460 __libc_start_main + 245\n6    tmp9dbrqga4                        0x0000564dd442b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    var prod = 1\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n            prod = 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod = prod * arr[j]\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    var prod = 1\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            var prod = 1\n            for k in i...j {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var prod = 1\n        for j in i..<arr.count {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)\nassert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)\nassert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)",
      "timestamp": 1665509955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}