{
  "name": "mbpp_639_sample_nam",
  "language": "swift",
  "prompt": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.characters.first?.isUpper == true {\n            sum += name.characters.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "/tmp/tmpuum9ap9k.swift:6:35: error: value of type 'String.Element' (aka 'Character') has no member 'isUpper'\n        if name.characters.first?.isUpper == true {\n           ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpuum9ap9k.swift:7:25: error: 'characters' is unavailable: Please use String directly\n            sum += name.characters.count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter({$0.first! >= \"A\" && $0.first! <= \"Z\"}).reduce(0, {$0 + $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter({$0.first! >= \"A\" && $0.first! <= \"Z\"}).map({$0.count}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.characters.first?.isUppercase == true {\n            sum += name.characters.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "/tmp/tmpjiswlgt6.swift:6:17: error: 'characters' is unavailable: Please use String directly\n        if name.characters.first?.isUppercase == true {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjiswlgt6.swift:7:25: error: 'characters' is unavailable: Please use String directly\n            sum += name.characters.count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase ?? false {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.uppercased() == name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "tmp2ak4ikzc/tmp2ak4ikzc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad83a883c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad83a57ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad83a57a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad83a5797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2ak4ikzc                        0x000055a146e95713 <unavailable> + 5907\n5    libc.so.6                          0x00002ad83aa6f460 __libc_start_main + 245\n6    tmp2ak4ikzc                        0x000055a146e95299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase ?? false {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var total_length = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            total_length += name.count\n        }\n    }\n    return total_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first! >= \"A\" && $0.first! <= \"Z\" }.map { $0.count }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.hasPrefix(\"A\") }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "tmpvtt1rgqx/tmpvtt1rgqx.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f7933c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f762ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f762a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f76297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvtt1rgqx                        0x000055dac143e693 <unavailable> + 5779\n5    libc.so.6                          0x00002b00f7b1f460 __libc_start_main + 245\n6    tmpvtt1rgqx                        0x000055dac143e219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name[name.startIndex].isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter({$0.first! >= \"A\" && $0.first! <= \"Z\"}).reduce(0, {$0 + $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.characters.first?.isUppercase == true {\n            sum += name.characters.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "/tmp/tmpjiswlgt6.swift:6:17: error: 'characters' is unavailable: Please use String directly\n        if name.characters.first?.isUppercase == true {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjiswlgt6.swift:7:25: error: 'characters' is unavailable: Please use String directly\n            sum += name.characters.count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first! >= \"A\" && $0.first! <= \"Z\" }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase ?? false {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.uppercased() == name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "tmp2ak4ikzc/tmp2ak4ikzc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad83a883c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad83a57ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad83a57a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad83a5797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2ak4ikzc                        0x000055a146e95713 <unavailable> + 5907\n5    libc.so.6                          0x00002ad83aa6f460 __libc_start_main + 245\n6    tmp2ak4ikzc                        0x000055a146e95299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum: Int = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter { $0.first!.isUppercase }.reduce(0) { $0 + $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var total_length = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            total_length += name.count\n        }\n    }\n    return total_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.uppercased() == name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "tmp2ak4ikzc/tmp2ak4ikzc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad83a883c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad83a57ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad83a57a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad83a5797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2ak4ikzc                        0x000055a146e95713 <unavailable> + 5907\n5    libc.so.6                          0x00002ad83aa6f460 __libc_start_main + 245\n6    tmp2ak4ikzc                        0x000055a146e95299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}