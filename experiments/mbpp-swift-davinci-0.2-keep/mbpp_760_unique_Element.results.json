{
  "name": "mbpp_760_unique_Element",
  "language": "swift",
  "prompt": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, val) in dict {\n        if val > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp_18qcpgu/tmp_18qcpgu.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada31284c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada30f7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada30f7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada30f7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_18qcpgu                        0x00005611965c770a <unavailable> + 5898\n5    libc.so.6                          0x00002ada31470460 __libc_start_main + 245\n6    tmp_18qcpgu                        0x00005611965c7379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    var count = 0\n    for i in dict.values {\n        if i == 1 {\n            count += 1\n        }\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpsl6ryze6/tmpsl6ryze6.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0b5e67dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0b5e374b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0b5e374988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0b5e3737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsl6ryze6                        0x000055e80a6b685a <unavailable> + 6234\n5    libc.so.6                          0x00002b0b5e869460 __libc_start_main + 245\n6    tmpsl6ryze6                        0x000055e80a6b64c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    var i = 0\n    while i < arr.count - 1 {\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpnc55va1v/tmpnc55va1v.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5bf6c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5bf3b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5bf3b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5bf3b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnc55va1v                        0x000055f0650733aa <unavailable> + 5034\n5    libc.so.6                          0x00002ad5bf8ad460 __libc_start_main + 245\n6    tmpnc55va1v                        0x000055f065073019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, v) in dict {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp0y622j_v/tmp0y622j_v.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3aed7bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3aed4b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3aed4b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3aed4b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0y622j_v                        0x000055e0f679e7ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3aed9a6460 __libc_start_main + 245\n6    tmp0y622j_v                        0x000055e0f679e459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for num in arr {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpn131tsit/tmpn131tsit.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac45b052c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac45ad49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac45ad49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac45ad487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn131tsit                        0x0000562f5dbe565a <unavailable> + 5722\n5    libc.so.6                          0x00002ac45b23e460 __libc_start_main + 245\n6    tmpn131tsit                        0x0000562f5dbe52c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for i in dict {\n        if i.value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpohafw1gn/tmpohafw1gn.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e649bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e646b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e646b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e646b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpohafw1gn                        0x0000556c3764c7ea <unavailable> + 6122\n5    libc.so.6                          0x00002b4e64ba7460 __libc_start_main + 245\n6    tmpohafw1gn                        0x0000556c3764c459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    print(dict)\n    for i in dict {\n        if i.value == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp47678w6p/tmp47678w6p.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b737b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b734a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b734a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b734a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47678w6p                        0x000055e4702af98a <unavailable> + 6538\n5    libc.so.6                          0x00002b5b7399e460 __libc_start_main + 245\n6    tmp47678w6p                        0x000055e4702af5f9 <unavailable> + 5625\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    print(dict)\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "[1: 3]\n[1: 2, 2: 2]\n[2: 1, 3: 1, 1: 1, 4: 1, 5: 1]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, val) in dict {\n        if val > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmprdokfvta/tmprdokfvta.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abba1ad8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abba17cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abba17cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abba17ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprdokfvta                        0x00005590f1ab072a <unavailable> + 5930\n5    libc.so.6                          0x00002abba1cc4460 __libc_start_main + 245\n6    tmprdokfvta                        0x00005590f1ab0399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp1j75w3zv/tmp1j75w3zv.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5bb3a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5bb09db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5bb09d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5bb09c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1j75w3zv                        0x0000557c9fb4a53a <unavailable> + 5434\n5    libc.so.6                          0x00002ae5bb592460 __libc_start_main + 245\n6    tmp1j75w3zv                        0x0000557c9fb4a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpw9ihogkk/tmpw9ihogkk.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8408005c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8407cfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8407cfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8407cfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw9ihogkk                        0x0000560feb88179a <unavailable> + 6042\n5    libc.so.6                          0x00002b84081f1460 __libc_start_main + 245\n6    tmpw9ihogkk                        0x0000560feb881409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count-1 {\n        if arr[i] == arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpowrtcul3/tmpowrtcul3.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04208bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04205b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04205b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04205b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpowrtcul3                        0x00005577f37ed65a <unavailable> + 5722\n5    libc.so.6                          0x00002b0420aaa460 __libc_start_main + 245\n6    tmpowrtcul3                        0x00005577f37ed2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpn131tsit/tmpn131tsit.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac45b052c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac45ad49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac45ad49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac45ad487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn131tsit                        0x0000562f5dbe565a <unavailable> + 5722\n5    libc.so.6                          0x00002ac45b23e460 __libc_start_main + 245\n6    tmpn131tsit                        0x0000562f5dbe52c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpy3dmx9gk/tmpy3dmx9gk.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d15b26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d1581db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d1581d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d1581c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3dmx9gk                        0x0000559f65c6053a <unavailable> + 5434\n5    libc.so.6                          0x00002b9d15d12460 __libc_start_main + 245\n6    tmpy3dmx9gk                        0x0000559f65c601a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j {\n                if arr[i] == arr[j] {\n                    unique = false\n                }\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpzrrbsbxm/tmpzrrbsbxm.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac61f686c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac61f37db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac61f37d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac61f37c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzrrbsbxm                        0x0000556c5086053a <unavailable> + 5434\n5    libc.so.6                          0x00002ac61f872460 __libc_start_main + 245\n6    tmpzrrbsbxm                        0x0000556c508601a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for item in arr {\n        if let value = dict[item] {\n            dict[item] = value + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpau5p7rs1/tmpau5p7rs1.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91f73fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91f70f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b91f70f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91f70f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpau5p7rs1                        0x0000556eda78170a <unavailable> + 5898\n5    libc.so.6                          0x00002b91f75e9460 __libc_start_main + 245\n6    tmpau5p7rs1                        0x0000556eda781379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    var count = 0\n    for i in dict {\n        if i.value == 1 {\n            count += 1\n        }\n    }\n    return count == 1 ? true : false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpg0z6uan8/tmpg0z6uan8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5574dfec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5574af5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5574af5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5574af47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg0z6uan8                        0x00005611d1a757ea <unavailable> + 6122\n5    libc.so.6                          0x00002b5574fea460 __libc_start_main + 245\n6    tmpg0z6uan8                        0x00005611d1a75459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for i in dict {\n        if i.value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpwwopb881/tmpwwopb881.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab50050ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab500205b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab500205988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5002047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwwopb881                        0x000055915994a7ea <unavailable> + 6122\n5    libc.so.6                          0x00002ab5006fa460 __libc_start_main + 245\n6    tmpwwopb881                        0x000055915994a459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp_dwnseji/tmp_dwnseji.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab92f451c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab92f148b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab92f148988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab92f1477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dwnseji                        0x000055e19f47b7ea <unavailable> + 6122\n5    libc.so.6                          0x00002ab92f63d460 __libc_start_main + 245\n6    tmp_dwnseji                        0x000055e19f47b459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpbvgur6r5/tmpbvgur6r5.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b961a9bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b961a6b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b961a6b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b961a6b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbvgur6r5                        0x000055d9b6ead80a <unavailable> + 6154\n5    libc.so.6                          0x00002b961aba9460 __libc_start_main + 245\n6    tmpbvgur6r5                        0x000055d9b6ead479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, val) in dict {\n        if val > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmprdokfvta/tmprdokfvta.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abba1ad8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abba17cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abba17cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abba17ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprdokfvta                        0x00005590f1ab072a <unavailable> + 5930\n5    libc.so.6                          0x00002abba1cc4460 __libc_start_main + 245\n6    tmprdokfvta                        0x00005590f1ab0399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j {\n                if arr[i] == arr[j] {\n                    unique = false\n                }\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpzrrbsbxm/tmpzrrbsbxm.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac61f686c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac61f37db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac61f37d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac61f37c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzrrbsbxm                        0x0000556c5086053a <unavailable> + 5434\n5    libc.so.6                          0x00002ac61f872460 __libc_start_main + 245\n6    tmpzrrbsbxm                        0x0000556c508601a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in arr {\n        set.insert(num)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    if dict.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpe8mx8xlj/tmpe8mx8xlj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b725e77ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b725e471b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b725e471988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b725e4707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8mx8xlj                        0x0000564c2b4e653a <unavailable> + 5434\n5    libc.so.6                          0x00002b725e966460 __libc_start_main + 245\n6    tmpe8mx8xlj                        0x0000564c2b4e61a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count == arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpbkmi2vkn/tmpbkmi2vkn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2fea70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2fe767b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2fe767988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2fe7667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbkmi2vkn                        0x000055dbb0a7753a <unavailable> + 5434\n5    libc.so.6                          0x00002ae2fec5c460 __libc_start_main + 245\n6    tmpbkmi2vkn                        0x000055dbb0a771a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    let set = Set(arr)\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count-1 {\n        if arr[i] == arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpowrtcul3/tmpowrtcul3.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04208bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04205b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04205b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04205b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpowrtcul3                        0x00005577f37ed65a <unavailable> + 5722\n5    libc.so.6                          0x00002b0420aaa460 __libc_start_main + 245\n6    tmpowrtcul3                        0x00005577f37ed2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpw9ihogkk/tmpw9ihogkk.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8408005c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8407cfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8407cfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8407cfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw9ihogkk                        0x0000560feb88179a <unavailable> + 6042\n5    libc.so.6                          0x00002b84081f1460 __libc_start_main + 245\n6    tmpw9ihogkk                        0x0000560feb881409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpbvgur6r5/tmpbvgur6r5.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b961a9bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b961a6b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b961a6b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b961a6b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbvgur6r5                        0x000055d9b6ead80a <unavailable> + 6154\n5    libc.so.6                          0x00002b961aba9460 __libc_start_main + 245\n6    tmpbvgur6r5                        0x000055d9b6ead479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpgeig9wqo/tmpgeig9wqo.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b277acacc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b277a9a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b277a9a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b277a9a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgeig9wqo                        0x0000564d59e117ea <unavailable> + 6122\n5    libc.so.6                          0x00002b277ae98460 __libc_start_main + 245\n6    tmpgeig9wqo                        0x0000564d59e11459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpw9ihogkk/tmpw9ihogkk.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8408005c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8407cfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8407cfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8407cfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw9ihogkk                        0x0000560feb88179a <unavailable> + 6042\n5    libc.so.6                          0x00002b84081f1460 __libc_start_main + 245\n6    tmpw9ihogkk                        0x0000560feb881409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (_, value) in dict {\n        if value == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpa6kmx5qd/tmpa6kmx5qd.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af310531c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af310228b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af310228988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3102277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa6kmx5qd                        0x00005628d162e79a <unavailable> + 6042\n5    libc.so.6                          0x00002af31071d460 __libc_start_main + 245\n6    tmpa6kmx5qd                        0x00005628d162e409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    if set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for i in dict {\n        if i.value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpohafw1gn/tmpohafw1gn.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e649bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e646b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e646b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e646b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpohafw1gn                        0x0000556c3764c7ea <unavailable> + 6122\n5    libc.so.6                          0x00002b4e64ba7460 __libc_start_main + 245\n6    tmpohafw1gn                        0x0000556c3764c459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    if set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpfn7b671e/tmpfn7b671e.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abdb7199c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abdb6e90b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abdb6e90988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abdb6e8f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfn7b671e                        0x000055b97424370a <unavailable> + 5898\n5    libc.so.6                          0x00002abdb7385460 __libc_start_main + 245\n6    tmpfn7b671e                        0x000055b974243379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    var i = 0\n    while i < arr.count {\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmppn90dkwc/tmppn90dkwc.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b618c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b615bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b615bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b615bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppn90dkwc                        0x0000557f9c5013aa <unavailable> + 5034\n5    libc.so.6                          0x00002b5b61ab2460 __libc_start_main + 245\n6    tmppn90dkwc                        0x0000557f9c501019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, v) in dict {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpuw3abuk6/tmpuw3abuk6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1571edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad156ee4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad156ee4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad156ee37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuw3abuk6                        0x000055fba573c7ea <unavailable> + 6122\n5    libc.so.6                          0x00002ad1573d9460 __libc_start_main + 245\n6    tmpuw3abuk6                        0x000055fba573c459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n        if count > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpunt1odk3/tmpunt1odk3.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d66042c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d65d39b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d65d39988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d65d387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpunt1odk3                        0x000055fe000d053a <unavailable> + 5434\n5    libc.so.6                          0x00002b4d6622e460 __libc_start_main + 245\n6    tmpunt1odk3                        0x000055fe000d01a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return arr.count == Set(arr).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp0w_rmr1h/tmp0w_rmr1h.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57a5564c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57a525bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b57a525b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b57a525a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0w_rmr1h                        0x0000560ae7eaf45a <unavailable> + 5210\n5    libc.so.6                          0x00002b57a5750460 __libc_start_main + 245\n6    tmp0w_rmr1h                        0x0000560ae7eaf0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j {\n                if arr[i] == arr[j] {\n                    unique = false\n                    break\n                }\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpnd2bbuxk/tmpnd2bbuxk.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc72d29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc72a20b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc72a20988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc72a1f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnd2bbuxk                        0x0000559fd3c8553a <unavailable> + 5434\n5    libc.so.6                          0x00002abc72f15460 __libc_start_main + 245\n6    tmpnd2bbuxk                        0x0000559fd3c851a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count-1 {\n        if arr[i] == arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpowrtcul3/tmpowrtcul3.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04208bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04205b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04205b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04205b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpowrtcul3                        0x00005577f37ed65a <unavailable> + 5722\n5    libc.so.6                          0x00002b0420aaa460 __libc_start_main + 245\n6    tmpowrtcul3                        0x00005577f37ed2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(i) {\n            return false\n        }\n        set.insert(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp05hfkc9x/tmp05hfkc9x.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7eba7b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7eba4b0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7eba4b0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7eba4af7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp05hfkc9x                        0x000056201d9245ba <unavailable> + 5562\n5    libc.so.6                          0x00002b7eba9a5460 __libc_start_main + 245\n6    tmp05hfkc9x                        0x000056201d924229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpgeig9wqo/tmpgeig9wqo.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b277acacc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b277a9a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b277a9a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b277a9a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgeig9wqo                        0x0000564d59e117ea <unavailable> + 6122\n5    libc.so.6                          0x00002b277ae98460 __libc_start_main + 245\n6    tmpgeig9wqo                        0x0000564d59e11459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    let set = Set(arr)\n    if set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpn131tsit/tmpn131tsit.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac45b052c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac45ad49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac45ad49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac45ad487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn131tsit                        0x0000562f5dbe565a <unavailable> + 5722\n5    libc.so.6                          0x00002ac45b23e460 __libc_start_main + 245\n6    tmpn131tsit                        0x0000562f5dbe52c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in arr {\n        for j in arr {\n            if i == j {\n                count += 1\n            }\n        }\n        if count == 1 {\n            return true\n        }\n        count = 0\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp7budvosf/tmp7budvosf.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b35228c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b34f1fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b34f1f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b34f1e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7budvosf                        0x000056102ef0f46a <unavailable> + 5226\n5    libc.so.6                          0x00002b6b35414460 __libc_start_main + 245\n6    tmp7budvosf                        0x000056102ef0f0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpbvgur6r5/tmpbvgur6r5.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b961a9bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b961a6b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b961a6b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b961a6b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbvgur6r5                        0x000055d9b6ead80a <unavailable> + 6154\n5    libc.so.6                          0x00002b961aba9460 __libc_start_main + 245\n6    tmpbvgur6r5                        0x000055d9b6ead479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let value = dict[i] {\n            dict[i] = value + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp82ngqmud/tmp82ngqmud.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b479845cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4798153b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4798153988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b47981527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp82ngqmud                        0x00005634d248070a <unavailable> + 5898\n5    libc.so.6                          0x00002b4798648460 __libc_start_main + 245\n6    tmp82ngqmud                        0x00005634d2480379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in arr {\n        set.insert(num)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpe8mx8xlj/tmpe8mx8xlj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b725e77ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b725e471b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b725e471988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b725e4707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8mx8xlj                        0x0000564c2b4e653a <unavailable> + 5434\n5    libc.so.6                          0x00002b725e966460 __libc_start_main + 245\n6    tmpe8mx8xlj                        0x0000564c2b4e61a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpfn7b671e/tmpfn7b671e.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abdb7199c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abdb6e90b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abdb6e90988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abdb6e8f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfn7b671e                        0x000055b97424370a <unavailable> + 5898\n5    libc.so.6                          0x00002abdb7385460 __libc_start_main + 245\n6    tmpfn7b671e                        0x000055b974243379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp0u1vm35p/tmp0u1vm35p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6637003c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6636cfab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6636cfa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6636cf97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0u1vm35p                        0x000055ecc84c153a <unavailable> + 5434\n5    libc.so.6                          0x00002b66371ef460 __libc_start_main + 245\n6    tmp0u1vm35p                        0x000055ecc84c11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp2_brhfx9/tmp2_brhfx9.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2c508fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2c4d86b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2c4d86988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2c4d857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2_brhfx9                        0x0000564dfa7e253a <unavailable> + 5434\n5    libc.so.6                          0x00002ad2c527b460 __libc_start_main + 245\n6    tmp2_brhfx9                        0x0000564dfa7e21a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpbo1p4svg/tmpbo1p4svg.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaac7b67c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaac785eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaac785e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaac785d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbo1p4svg                        0x0000559bcb83179a <unavailable> + 6042\n5    libc.so.6                          0x00002aaac7d53460 __libc_start_main + 245\n6    tmpbo1p4svg                        0x0000559bcb831409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    if set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    let set = Set(arr)\n    if set.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp2vry3k0p/tmp2vry3k0p.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e2f5dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e2f2d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e2f2d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e2f2d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2vry3k0p                        0x00005572099d370a <unavailable> + 5898\n5    libc.so.6                          0x00002b4e2f7c6460 __libc_start_main + 245\n6    tmp2vry3k0p                        0x00005572099d3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            return true\n        }\n        count = 0\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpuz3rc7hm/tmpuz3rc7hm.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6e5ff21c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6e5fc18b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6e5fc18988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6e5fc177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuz3rc7hm                        0x000055d691d0653a <unavailable> + 5434\n5    libc.so.6                          0x00002b6e6010d460 __libc_start_main + 245\n6    tmpuz3rc7hm                        0x000055d691d061a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in arr {\n        set.insert(num)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp36ix6s5f/tmp36ix6s5f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f0992fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f09626b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f09626988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f096257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp36ix6s5f                        0x000055ed93d7f53a <unavailable> + 5434\n5    libc.so.6                          0x00002b6f09b1b460 __libc_start_main + 245\n6    tmp36ix6s5f                        0x000055ed93d7f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in arr {\n        for j in arr {\n            if i == j {\n                count += 1\n            }\n        }\n        if count == 1 {\n            return true\n        }\n        count = 0\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp7budvosf/tmp7budvosf.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b35228c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b34f1fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b34f1f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b34f1e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7budvosf                        0x000056102ef0f46a <unavailable> + 5226\n5    libc.so.6                          0x00002b6b35414460 __libc_start_main + 245\n6    tmp7budvosf                        0x000056102ef0f0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp1j75w3zv/tmp1j75w3zv.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5bb3a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5bb09db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5bb09d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5bb09c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1j75w3zv                        0x0000557c9fb4a53a <unavailable> + 5434\n5    libc.so.6                          0x00002ae5bb592460 __libc_start_main + 245\n6    tmp1j75w3zv                        0x0000557c9fb4a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for i in dict {\n        if i.value == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpkcs45cwk/tmpkcs45cwk.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59d6ee0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59d6bd7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59d6bd7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59d6bd67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkcs45cwk                        0x0000559bf5ba57ea <unavailable> + 6122\n5    libc.so.6                          0x00002b59d70cc460 __libc_start_main + 245\n6    tmpkcs45cwk                        0x0000559bf5ba5459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (_, v) in dict {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp71y91bou/tmp71y91bou.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b5981ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b59511b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b59511988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b595107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp71y91bou                        0x000055c21600f79a <unavailable> + 6042\n5    libc.so.6                          0x00002b9b59a06460 __libc_start_main + 245\n6    tmp71y91bou                        0x000055c21600f409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count {\n        if arr[i] == arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmptsmcffu8/tmptsmcffu8.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2929b1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2929814b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2929814988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29298137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptsmcffu8                        0x000055911310665a <unavailable> + 5722\n5    libc.so.6                          0x00002b2929d09460 __libc_start_main + 245\n6    tmptsmcffu8                        0x00005591131062c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp36ix6s5f/tmp36ix6s5f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f0992fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f09626b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f09626988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f096257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp36ix6s5f                        0x000055ed93d7f53a <unavailable> + 5434\n5    libc.so.6                          0x00002b6f09b1b460 __libc_start_main + 245\n6    tmp36ix6s5f                        0x000055ed93d7f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var result = true\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(i) {\n            result = false\n            break\n        } else {\n            set.insert(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpi1vqx72h/tmpi1vqx72h.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b147b7cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b147b4c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b147b4c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b147b4c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi1vqx72h                        0x00005576166275ba <unavailable> + 5562\n5    libc.so.6                          0x00002b147b9bb460 __libc_start_main + 245\n6    tmpi1vqx72h                        0x0000557616627229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp0u1vm35p/tmp0u1vm35p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6637003c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6636cfab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6636cfa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6636cf97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0u1vm35p                        0x000055ecc84c153a <unavailable> + 5434\n5    libc.so.6                          0x00002b66371ef460 __libc_start_main + 245\n6    tmp0u1vm35p                        0x000055ecc84c11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpe8mx8xlj/tmpe8mx8xlj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b725e77ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b725e471b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b725e471988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b725e4707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8mx8xlj                        0x0000564c2b4e653a <unavailable> + 5434\n5    libc.so.6                          0x00002b725e966460 __libc_start_main + 245\n6    tmpe8mx8xlj                        0x0000564c2b4e61a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in arr {\n        set.insert(item)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, val) in dict {\n        if val > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp_18qcpgu/tmp_18qcpgu.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada31284c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada30f7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada30f7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada30f7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_18qcpgu                        0x00005611965c770a <unavailable> + 5898\n5    libc.so.6                          0x00002ada31470460 __libc_start_main + 245\n6    tmp_18qcpgu                        0x00005611965c7379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    var i = 0\n    while i < arr.count {\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmppn90dkwc/tmppn90dkwc.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b618c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b615bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b615bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b615bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppn90dkwc                        0x0000557f9c5013aa <unavailable> + 5034\n5    libc.so.6                          0x00002b5b61ab2460 __libc_start_main + 245\n6    tmppn90dkwc                        0x0000557f9c501019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp61hd6vp_/tmp61hd6vp_.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0597272c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0596f69b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0596f69988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0596f687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp61hd6vp_                        0x0000562fd269080a <unavailable> + 6154\n5    libc.so.6                          0x00002b059745e460 __libc_start_main + 245\n6    tmp61hd6vp_                        0x0000562fd2690479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in arr {\n        set.insert(num)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    if count == arr.count - 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp4qbg9_u9/tmp4qbg9_u9.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d79e03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d79afab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d79afa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d79af97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4qbg9_u9                        0x000055951c76f53a <unavailable> + 5434\n5    libc.so.6                          0x00002b1d79fef460 __libc_start_main + 245\n6    tmp4qbg9_u9                        0x000055951c76f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpgeig9wqo/tmpgeig9wqo.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b277acacc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b277a9a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b277a9a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b277a9a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgeig9wqo                        0x0000564d59e117ea <unavailable> + 6122\n5    libc.so.6                          0x00002b277ae98460 __libc_start_main + 245\n6    tmpgeig9wqo                        0x0000564d59e11459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j {\n                if arr[i] == arr[j] {\n                    unique = false\n                }\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpzrrbsbxm/tmpzrrbsbxm.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac61f686c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac61f37db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac61f37d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac61f37c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzrrbsbxm                        0x0000556c5086053a <unavailable> + 5434\n5    libc.so.6                          0x00002ac61f872460 __libc_start_main + 245\n6    tmpzrrbsbxm                        0x0000556c508601a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    var i = 0\n    while i < arr.count {\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmppn90dkwc/tmppn90dkwc.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b618c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b615bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b615bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b615bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppn90dkwc                        0x0000557f9c5013aa <unavailable> + 5034\n5    libc.so.6                          0x00002b5b61ab2460 __libc_start_main + 245\n6    tmppn90dkwc                        0x0000557f9c501019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count-1 {\n        if arr[i] == arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpowrtcul3/tmpowrtcul3.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04208bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04205b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04205b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04205b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpowrtcul3                        0x00005577f37ed65a <unavailable> + 5722\n5    libc.so.6                          0x00002b0420aaa460 __libc_start_main + 245\n6    tmpowrtcul3                        0x00005577f37ed2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp36ix6s5f/tmp36ix6s5f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f0992fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f09626b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f09626988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f096257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp36ix6s5f                        0x000055ed93d7f53a <unavailable> + 5434\n5    libc.so.6                          0x00002b6f09b1b460 __libc_start_main + 245\n6    tmp36ix6s5f                        0x000055ed93d7f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let value = dict[i] {\n            dict[i] = value + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp82ngqmud/tmp82ngqmud.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b479845cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4798153b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4798153988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b47981527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp82ngqmud                        0x00005634d248070a <unavailable> + 5898\n5    libc.so.6                          0x00002b4798648460 __libc_start_main + 245\n6    tmp82ngqmud                        0x00005634d2480379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpbqn61f3i/tmpbqn61f3i.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10cab1bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10ca812b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10ca812988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10ca8117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbqn61f3i                        0x000055f321af153a <unavailable> + 5434\n5    libc.so.6                          0x00002b10cad07460 __libc_start_main + 245\n6    tmpbqn61f3i                        0x000055f321af11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (_, v) in dict {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp71y91bou/tmp71y91bou.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b5981ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b59511b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b59511988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b595107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp71y91bou                        0x000055c21600f79a <unavailable> + 6042\n5    libc.so.6                          0x00002b9b59a06460 __libc_start_main + 245\n6    tmp71y91bou                        0x000055c21600f409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in arr {\n        set.insert(item)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in arr {\n        set.insert(item)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    if count == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp1j75w3zv/tmp1j75w3zv.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5bb3a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5bb09db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5bb09d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5bb09c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1j75w3zv                        0x0000557c9fb4a53a <unavailable> + 5434\n5    libc.so.6                          0x00002ae5bb592460 __libc_start_main + 245\n6    tmp1j75w3zv                        0x0000557c9fb4a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    return Set(arr).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count-1 {\n        if arr[i] == arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpowrtcul3/tmpowrtcul3.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04208bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04205b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04205b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04205b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpowrtcul3                        0x00005577f37ed65a <unavailable> + 5722\n5    libc.so.6                          0x00002b0420aaa460 __libc_start_main + 245\n6    tmpowrtcul3                        0x00005577f37ed2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    var count = 0\n    for i in dict.values {\n        if i == 1 {\n            count += 1\n        }\n    }\n    if count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123127,
      "stdout": "",
      "stderr": "tmp4hwle5gn/tmp4hwle5gn.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae108346c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae10803db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae10803d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae10803c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4hwle5gn                        0x000055e26786085a <unavailable> + 6234\n5    libc.so.6                          0x00002ae108532460 __libc_start_main + 245\n6    tmp4hwle5gn                        0x000055e2678604c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                unique = false\n                break\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp0u1vm35p/tmp0u1vm35p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6637003c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6636cfab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6636cfa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6636cf97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0u1vm35p                        0x000055ecc84c153a <unavailable> + 5434\n5    libc.so.6                          0x00002b66371ef460 __libc_start_main + 245\n6    tmp0u1vm35p                        0x000055ecc84c11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, v) in dict {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmpuw3abuk6/tmpuw3abuk6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1571edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad156ee4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad156ee4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad156ee37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuw3abuk6                        0x000055fba573c7ea <unavailable> + 6122\n5    libc.so.6                          0x00002ad1573d9460 __libc_start_main + 245\n6    tmpuw3abuk6                        0x000055fba573c459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var unique = true\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for i in dict {\n        if i.value > 1 {\n            unique = false\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123127,
      "stdout": "",
      "stderr": "tmpyw55k0yj/tmpyw55k0yj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0623478c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b062316fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b062316f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b062316e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyw55k0yj                        0x000055935dca47ea <unavailable> + 6122\n5    libc.so.6                          0x00002b0623664460 __libc_start_main + 245\n6    tmpyw55k0yj                        0x000055935dca4459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123126,
      "stdout": "",
      "stderr": "tmp61hd6vp_/tmp61hd6vp_.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0597272c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0596f69b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0596f69988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0596f687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp61hd6vp_                        0x0000562fd269080a <unavailable> + 6154\n5    libc.so.6                          0x00002b059745e460 __libc_start_main + 245\n6    tmp61hd6vp_                        0x0000562fd2690479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (_, value) in dict {\n        if value > 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmp5o4jkibt/tmp5o4jkibt.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3629829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3629520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3629520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b362951f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5o4jkibt                        0x000055619fb167ea <unavailable> + 6122\n5    libc.so.6                          0x00002b3629a15460 __libc_start_main + 245\n6    tmp5o4jkibt                        0x000055619fb16459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123127,
      "stdout": "",
      "stderr": "tmpy1_jeppc/tmpy1_jeppc.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbe7b08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbe77ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbe77ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbe77fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy1_jeppc                        0x000055cf7700b79a <unavailable> + 6042\n5    libc.so.6                          0x00002acbe7cf4460 __libc_start_main + 245\n6    tmpy1_jeppc                        0x000055cf7700b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in arr {\n        set.insert(i)\n    }\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr: [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in arr {\n        if let value = dict[i] {\n            dict[i] = value + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_Element(arr: [1, 1, 1]) == true)\nassert(unique_Element(arr: [1, 2, 1, 2]) == false)\nassert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)",
      "timestamp": 1666123127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}