{
  "name": "mbpp_167_next_power_of_2",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmpab_9i5t6.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmpab_9i5t6.swift:4:25: error: cannot find 'ceil' in scope\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n                        ^~~~\n/tmp/tmpab_9i5t6.swift:4:30: error: cannot find 'log2' in scope\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n                             ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var x = 1\n    while x < n {\n        x *= 2\n    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var p = 1\n    while p < n {\n        p = p << 1\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var p = 1\n    while p < n {\n        p *= 2\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var p = 1\n    while p < n {\n        p *= 2\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var x = n\n    x -= 1\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "tmpsgtf4dm4/tmpsgtf4dm4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba1bb3d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba1bb0c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba1bb0c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba1bb0c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsgtf4dm4                        0x000055985a8211b4 <unavailable> + 4532\n5    libc.so.6                          0x00002ba1bb5bc460 __libc_start_main + 245\n6    tmpsgtf4dm4                        0x000055985a820e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i << 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result <<= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var num = n\n    num -= 1\n    num |= num >> 1\n    num |= num >> 2\n    num |= num >> 4\n    num |= num >> 8\n    num |= num >> 16\n    num += 1\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "tmpab03pedx/tmpab03pedx.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae706aeec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae7067e5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae7067e5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7067e47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpab03pedx                        0x00005625c86b31b4 <unavailable> + 4532\n5    libc.so.6                          0x00002ae706cda460 __libc_start_main + 245\n6    tmpab03pedx                        0x00005625c86b2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i << 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var p = 1\n    while p < n {\n        p *= 2\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m = m << 1\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmpab_9i5t6.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmpab_9i5t6.swift:4:25: error: cannot find 'ceil' in scope\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n                        ^~~~\n/tmp/tmpab_9i5t6.swift:4:30: error: cannot find 'log2' in scope\n    return Int(pow(2.0, ceil(log2(Double(n)))))\n                             ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i << 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var p = 1\n    while p < n {\n        p *= 2\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var next_power_of_2 = 1\n    while next_power_of_2 < n {\n        next_power_of_2 *= 2\n    }\n    return next_power_of_2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var m = 1\n    while m < n {\n        m *= 2\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i << 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var count = 0\n    var num = n\n    while num != 0 {\n        num = num >> 1\n        count += 1\n    }\n    return 1 << count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var power = 1\n    while power < n {\n        power *= 2\n    }\n    return power\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i << 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    return Int(pow(2, ceil(log2(Double(n)))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "/tmp/tmp6cr883sh.swift:4:16: error: cannot find 'pow' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n               ^~~\n/tmp/tmp6cr883sh.swift:4:23: error: cannot find 'ceil' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                      ^~~~\n/tmp/tmp6cr883sh.swift:4:28: error: cannot find 'log2' in scope\n    return Int(pow(2, ceil(log2(Double(n)))))\n                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var n = n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517494,
      "stdout": "",
      "stderr": "tmpee_d3_lp/tmpee_d3_lp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3433dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d34034b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d34034988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d340337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpee_d3_lp                        0x000055ff2ea491b4 <unavailable> + 4532\n5    libc.so.6                          0x00002b5d34529460 __libc_start_main + 245\n6    tmpee_d3_lp                        0x000055ff2ea48e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_power_of_2(n: 0) == 1)\nassert(next_power_of_2(n: 5) == 8)\nassert(next_power_of_2(n: 17) == 32)",
      "timestamp": 1665517493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}