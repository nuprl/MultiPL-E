{
  "name": "mbpp_563_extract_values",
  "language": "swift",
  "prompt": "\n/// Write a function to extract values between quotation marks from a string.\nfunc extract_values(text: String) -> [String] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_values(text: \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])\nassert(extract_values(text: \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])\nassert(extract_values(text: \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            in_quotes = !in_quotes\n        }\n        if in_quotes {\n            end = text.index(after: end)\n        } else {\n            if c == \",\" {\n                result.append(text[start..<end])\n                start = text.index(after: end)\n            }\n            end = text.index(after: end)\n        }\n    }\n    result.append(text[start..<end])\n    return result",
    "    var values: [String] = []\n    var i = 0\n    while i < text.count {\n        if text[i] == \"\\\"\" {\n            var value = \"\"\n            i += 1\n            while i < text.count {\n                if text[i] == \"\\\"\" {\n                    break\n                }\n                value.append(text[i])\n                i += 1\n            }\n            values.append(value)\n        }\n        i += 1\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return [] }\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(before: text.characters.index(after: end))\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        } else if in_quotes {\n            end = text.characters.index(after: end)\n        } else {\n            start = text.characters.index(after: start)\n            end = text.characters.index(after: end)\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result: [String] = []\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                result.append(text[start..<end])\n                start = 0\n            }\n        }\n    }\n    return result",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var is_inside = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if is_inside {\n                end = i\n                result.append(text[start..<end])\n                is_inside = false\n            } else {\n                start = i + 1\n                is_inside = true\n            }\n        }\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    \n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return [] }\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result: [String] = []\n    var start = 0\n    var end = 0\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                result.append(text[start..<end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return result",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var index = text.startIndex\n    var inQuotes = false\n    while index != text.endIndex {\n        if text[index] == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = index.advancedBy(1)\n        }\n        end = index.advancedBy(1)\n        index = index.advancedBy(1)\n    }\n    return values",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                result.append(String(text[start..<end]))\n                start = 0\n            }\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values: [String] = []\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            if let swiftRange = Range(range, in: text) {\n                values.append(String(text[swiftRange]))\n            }\n        }\n    } catch {\n        print(\"invalid regex: \\(error.localizedDescription)\")\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                values.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (i, c) in text.characters.enumerate() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = i\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    } catch {\n        print(\"error\")\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.index(text.startIndex, offsetBy: i)\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.index(text.startIndex, offsetBy: i + 1)\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var index = text.startIndex\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if start == end {\n                start = index.successor()\n            } else {\n                end = index\n                values.append(text[start..<end])\n                start = text.endIndex\n                end = text.endIndex\n            }\n        }\n        index = index.successor()\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = end.successor()\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    \n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = index\n                values.append(text[start...end])\n                inQuotes = false\n            } else {\n                start = index\n                inQuotes = true\n            }\n        }\n    }\n    \n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            inQuotes = !inQuotes\n        }\n        if inQuotes {\n            end = text.index(after: end)\n        } else {\n            if c == \",\" {\n                result.append(String(text[start..<end]))\n                start = text.index(after: end)\n            }\n            end = text.index(after: end)\n        }\n    }\n    result.append(String(text[start..<end]))\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return results.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.endIndex\n    var inQuote = false\n    for i in text.indices {\n        if text[i] == \"\\\"\" {\n            if inQuote {\n                end = i\n                result.append(String(text[start..<end]))\n                inQuote = false\n            } else {\n                start = text.index(after: i)\n                inQuote = true\n            }\n        }\n    }\n    return result",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                values.append(String(text[text.index(text.startIndex, offsetBy: start)..<text.index(text.startIndex, offsetBy: end)]))\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                inQuote = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                values.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    \n    while start != text.endIndex {\n        start = text.index(after: start)\n        if text[start] == \"\\\"\" {\n            start = text.index(after: start)\n            end = text.index(after: start)\n            while end != text.endIndex && text[end] != \"\\\"\" {\n                end = text.index(after: end)\n            }\n            result.append(String(text[start..<end]))\n            start = end\n        }\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(before: text.characters.index(after: end))\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        } else if in_quotes {\n            end = text.characters.index(after: end)\n        } else {\n            start = text.characters.index(after: start)\n            end = text.characters.index(after: end)\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = end.advancedBy(1)\n        }\n        end = end.advancedBy(1)\n    }\n    \n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.endIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var values: [String] = []\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        values.append(String(text[range]))\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var found = false\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if found {\n                end = index\n                values.append(text[start..<end])\n                found = false\n            } else {\n                start = index + 1\n                found = true\n            }\n        }\n    }\n    return values",
    "    let pattern = #\"\"(.*?)\"\"#\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result: [String] = []\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let extracted = (text as NSString).substring(with: range)\n        result.append(extracted)\n    }\n    return result",
    "    var result: [String] = []\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var inQuotes = false\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                endIndex = text.index(text.startIndex, offsetBy: index)\n                result.append(text[startIndex..<endIndex])\n                inQuotes = false\n            } else {\n                startIndex = text.index(text.startIndex, offsetBy: index + 1)\n                inQuotes = true\n            }\n        }\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    \n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        result.append(String(text[range]))\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return results.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if inQuotes {\n                end = i\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = i + 1\n                inQuotes = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var in_quotes = false\n    for (i, c) in text.characters.enumerate() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.startIndex.advancedBy(i)\n                values.append(text.substringWithRange(start..<end))\n                in_quotes = false\n            } else {\n                start = text.startIndex.advancedBy(i + 1)\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        values.append(String(text[range]))\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = end.successor()\n        }\n        end = end.successor()\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = end.successor()\n        }\n        end = end.successor()\n    }\n    return result",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                values.append(String(text[start..<end]))\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                values.append(text[start...end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    let pattern = \"\\\"([^\\\"]*)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(before: text.characters.index(after: end))\n                result.append(text[start...end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        } else if in_quotes {\n            end = text.characters.index(after: end)\n        } else {\n            start = text.characters.index(after: start)\n            end = text.characters.index(after: end)\n        }\n    }\n    return result",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (index, character) in text.characters.enumerated() {\n        if character == \"\\\"\" {\n            if is_quoted {\n                end = index\n                result.append(text[start..<end])\n                is_quoted = false\n            } else {\n                start = index + 1\n                is_quoted = true\n            }\n        }\n    }\n    return result",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values = [String]()\n    var i = 0\n    var start = 0\n    var end = 0\n    while i < text.count {\n        if text[i] == \"\\\"\" {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                values.append(String(text[start..<end]))\n                start = 0\n            }\n        }\n        i += 1\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.characters.count))\n    return results.map {\n        (text as NSString).substring(with: $0.rangeAt(1))\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for i in text.indices {\n        if text[i] == \"\\\"\" {\n            if inQuotes {\n                result.append(String(text[start..<i]))\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: i)\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = $0.range(at: 1)\n        return (text as NSString).substring(with: range)\n    }",
    "    var values: [String] = []\n    var startIndex: String.Index?\n    var endIndex: String.Index?\n    var inQuotes = false\n    \n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                endIndex = text.index(text.startIndex, offsetBy: index)\n                if let startIndex = startIndex, let endIndex = endIndex {\n                    values.append(text[startIndex..<endIndex])\n                }\n            } else {\n                startIndex = text.index(text.startIndex, offsetBy: index + 1)\n            }\n            inQuotes = !inQuotes\n        }\n    }\n    \n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for char in text {\n        if char == \"\\\"\" {\n            inQuotes = !inQuotes\n            if inQuotes {\n                start = text.index(after: end)\n            } else {\n                values.append(String(text[start..<end]))\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n            }\n        } else if in_quotes {\n            end = text.index(after: end)\n        } else {\n            start = text.index(after: start)\n            end = text.index(after: end)\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text.substringWithRange(start..<end))\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var i = 0\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                result.append(text[start...end])\n                start = 0\n            }\n        }\n        i += 1\n    }\n    return result",
    "    let pattern = \"\\\"([^\\\"]*)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var i = text.startIndex\n    while i < text.endIndex {\n        if text[i] == \"\\\"\" {\n            if start == text.startIndex {\n                start = text.index(after: i)\n            } else {\n                end = text.index(before: i)\n                values.append(String(text[start..<end]))\n                start = text.endIndex\n                end = text.endIndex\n            }\n        }\n        i = text.index(after: i)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var is_in_quotes = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if is_in_quotes {\n                end = index\n                values.append(text[start..<end])\n                is_in_quotes = false\n            } else {\n                start = index + 1\n                is_in_quotes = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return [] }\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inside = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inside {\n                result.append(text[start..<end])\n            }\n            inside = !inside\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                values.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                values.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (index, char) in text.characters.enumerate() {\n        if char == \"\\\"\" {\n            if in_quotes {\n                end = index\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = index + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values: [String] = []\n    var value: String = \"\"\n    var in_quotes = false\n    for char in text {\n        if char == \"\\\"\" {\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value.append(char)\n        } else if !in_quotes && value != \"\" {\n            values.append(value)\n            value = \"\"\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(after: start)\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        }\n        start = text.characters.index(after: start)\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values: [String] = []\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values: [String] = []\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    } catch {\n        print(error)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var index = text.startIndex\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if startIndex == text.startIndex {\n                startIndex = text.index(after: index)\n            } else {\n                endIndex = text.index(before: index)\n                values.append(String(text[startIndex...endIndex]))\n                startIndex = text.index(after: index)\n            }\n        }\n        index = text.index(after: index)\n    }\n    return values",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if is_quoted {\n                end = index\n                result.append(text[start..<end])\n                is_quoted = false\n            } else {\n                start = index + 1\n                is_quoted = true\n            }\n        }\n    }\n    return result",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            inQuotes = !inQuotes\n        } else if c == \",\" && !inQuotes {\n            values.append(text[start..<end])\n            start = end.advancedBy(1)\n        }\n        end = end.advancedBy(1)\n    }\n    values.append(text[start..<end])\n    return values",
    "    var values: [String] = []\n    var currentValue = \"\"\n    var inQuotes = false\n    for char in text {\n        if char == \"\\\"\" {\n            inQuotes = !inQuotes\n            if !inQuotes {\n                values.append(currentValue)\n                currentValue = \"\"\n            }\n        } else if inQuotes {\n            currentValue.append(char)\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(after: end)\n                values.append(text.substring(with: start..<end))\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        } else {\n            end = text.characters.index(after: end)\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.index(after: end)\n                in_quotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    let regex = try! NSRegularExpression(pattern: \"(?<=\\\").*?(?=\\\")\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result.append(String(text[range]))\n    }\n    return result",
    "    var values: [String] = []\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(String(text[startIndex..<endIndex]))\n                inQuotes = false\n            } else {\n                startIndex = endIndex\n                inQuotes = true\n            }\n        }\n        endIndex = text.index(after: endIndex)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var result = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            result.append(value)\n        }\n    } catch {\n        print(error)\n    }\n    return result",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n            }\n        } else if c == \",\" && !in_quotes {\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for i in 0..<text.count {\n        let index = text.index(text.startIndex, offsetBy: i)\n        if text[index] == \"\\\"\" {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                values.append(String(text[text.index(text.startIndex, offsetBy: start + 1)..<text.index(text.startIndex, offsetBy: end)]))\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.advancedBy(1)\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if is_quoted {\n                end = i\n                values.append(text[start..<end])\n                is_quoted = false\n            } else {\n                start = i + 1\n                is_quoted = true\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        values.append(String(text[range]))\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start: Int? = nil\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if start == nil {\n                start = i\n            } else {\n                values.append(text.substring(with: text.index(text.startIndex, offsetBy: start! + 1) ..< text.index(text.startIndex, offsetBy: i)))\n                start = nil\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            if let swiftRange = Range(range, in: text) {\n                result.append(String(text[swiftRange]))\n            }\n        }\n    } catch {\n        print(\"invalid regex: \\(error.localizedDescription)\")\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                values.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(before: text.characters.index(after: end))\n                values.append(text[start...end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        } else if in_quotes {\n            end = text.characters.index(after: end)\n        } else {\n            start = text.characters.index(after: start)\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = #\"\\\"(.+?)\\\"\"#\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    \n    for (index, char) in text.characters.enumerate() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = text.startIndex.advancedBy(index)\n                values.append(text[start...end])\n                inQuotes = false\n            } else {\n                start = text.startIndex.advancedBy(index + 1)\n                inQuotes = true\n            }\n        }\n    }\n    \n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.endIndex\n    var index = text.startIndex\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if start == text.startIndex {\n                start = text.index(after: index)\n            } else {\n                end = text.index(before: index)\n                result.append(String(text[start..<end]))\n                start = text.endIndex\n            }\n        }\n        index = text.index(after: index)\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values: [String] = []\n    var value: String = \"\"\n    var in_quotes: Bool = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            in_quotes = !in_quotes\n            if !in_quotes {\n                values.append(value)\n                value = \"\"\n            }\n        } else if in_quotes {\n            value.append(c)\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    \n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.characters.count))\n    return results.map {\n        (text as NSString).substring(with: $0.rangeAt(1))\n    }",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = i\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n    return result",
    "    var values: [String] = []\n    var inQuotes = false\n    var value = \"\"\n    for char in text {\n        if char == \"\\\"\" {\n            inQuotes = !inQuotes\n        } else if inQuotes {\n            value.append(char)\n        } else if char == \",\" && value != \"\" {\n            values.append(value)\n            value = \"\"\n        }\n    }\n    if value != \"\" {\n        values.append(value)\n    }\n    return values",
    "    var values: [String] = []\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        if let swiftRange = Range(range, in: text) {\n            values.append(String(text[swiftRange]))\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for char in text {\n        if char == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                values.append(text[text.index(text.startIndex, offsetBy: start + 1)..<text.index(text.startIndex, offsetBy: end)])\n                start = 0\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return [] }\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result: [String] = []\n    var start: String.Index?\n    var end: String.Index?\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if start == nil {\n                start = text.index(text.startIndex, offsetBy: index)\n            } else {\n                end = text.index(text.startIndex, offsetBy: index)\n                result.append(text[start!...end!])\n                start = nil\n                end = nil\n            }\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            inQuotes = !inQuotes\n            if inQuotes {\n                start = text.characters.index(after: end)\n            } else {\n                result.append(text[start..<end])\n            }\n        }\n        end = text.characters.index(after: end)\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(after: start)\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        }\n        start = text.characters.index(after: start)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(text.startIndex..., in: text))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = index\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = index + 1\n                inQuotes = true\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = false\n    var value = \"\"\n    for char in text {\n        if char == \"\\\"\" {\n            start = !start\n            if !start {\n                values.append(value)\n                value = \"\"\n            }\n        } else if start {\n            value.append(char)\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                result.append(String(text[text.index(text.startIndex, offsetBy: start + 1)..<text.index(text.startIndex, offsetBy: end)]))\n                start = 0\n            }\n        }\n    }\n    return result",
    "    var result: [String] = []\n    var current: String = \"\"\n    var inQuotes = false\n    for char in text {\n        if char == \"\\\"\" {\n            if inQuotes {\n                result.append(current)\n                current = \"\"\n            }\n            inQuotes = !inQuotes\n        } else if inQuotes {\n            current.append(char)\n        }\n    }\n    return result",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                result.append(text[start..<end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    \n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range, in: text)!\n        return String(text[range])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var inQuote = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if inQuote {\n                end = text.index(text.startIndex, offsetBy: i)\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = text.index(text.startIndex, offsetBy: i + 1)\n                inQuote = true\n            }\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range(at: 1), in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let nsString = text as NSString\n    let results = regex.matches(in: text, options: [], range: NSMakeRange(0, nsString.length))\n    return results.map { nsString.substring(with: $0.rangeAt(1)) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = index\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = index + 1\n                inQuotes = true\n            }\n        }\n    }\n    return result"
  ]
}