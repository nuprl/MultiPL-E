{
  "name": "mbpp_606_radian_degree",
  "language": "swift",
  "prompt": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return (Double(degree) * Double.pi) / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * M_PI / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpwogc1gz0.swift:4:29: error: cannot find 'M_PI' in scope\n    return Double(degree) * M_PI / 180\n                            ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return (Double(degree) * Double.pi) / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (M_PI / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpipblag_6.swift:4:30: error: cannot find 'M_PI' in scope\n    return Double(degree) * (M_PI / 180)\n                             ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return (Double(degree) * Double.pi) / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * M_PI / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpwogc1gz0.swift:4:29: error: cannot find 'M_PI' in scope\n    return Double(degree) * M_PI / 180\n                            ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double.pi * Double(degree) / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double.pi * Double(degree) / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * .pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * M_PI / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpwogc1gz0.swift:4:29: error: cannot find 'M_PI' in scope\n    return Double(degree) * M_PI / 180\n                            ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return (Double(degree) * Double.pi) / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * .pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * (Double.pi / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n    return Double(degree) * Double.pi / 180\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
      "timestamp": 1665510306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}