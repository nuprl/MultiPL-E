{
  "name": "mbpp_635_heap_sort",
  "language": "swift",
  "prompt": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1h6msy2s.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted: [Int] = []\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpw0q502ld.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpdvqv2sm2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpxzu4wf4m.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted_list = [Int]()\n    while !heap.is_empty() {\n        sorted_list.append(heap.pop()!)\n    }\n    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp5lib08rz.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: <)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp69ho3az_.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: <)\n    var sortedArray = [Int]()\n    while !heap.isEmpty {\n        sortedArray.append(heap.remove()!)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpsgjn89mb.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjyex_r86.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    \n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp3twkylje.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1h6msy2s.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while let value = heap.pop() {\n        sorted.append(value)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpzrd_8dyk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.is_empty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpgndj72sb.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0syihic.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted: [Int] = []\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpw0q502ld.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0maagpf.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcj9l58n6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted: [Int] = []\n    while heap.count > 0 {\n        sorted.append(heap.remove()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp74ffebl5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5gdgn5d6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpo1hfq1e2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while let value = heap.pop() {\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpynoqb580.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(elements: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpjl7vdt49.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0ckxrso4.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "tmprqoyrqv4/tmprqoyrqv4.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba84b027c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba84ad1eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba84ad1e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba84ad1d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprqoyrqv4                        0x0000562806adf43c <unavailable> + 5180\n5    libc.so.6                          0x00002ba84b213460 __libc_start_main + 245\n6    tmprqoyrqv4                        0x0000562806adefc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while let max = heap.pop() {\n        sorted.append(max)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpjuqd3mwk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqk2q2fl6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp761u5nok.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcj9l58n6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5xe4z7j3.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp40g2qh7w.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while let value = heap.pop() {\n        sorted.append(value)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmphsktaoil.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqk2q2fl6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for item in iterable {\n        heap.insert(item)\n    }\n    var result = [Int]()\n    while let item = heap.remove() {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcu_pfz_h.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqk2q2fl6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    \n    return (0..<iterable.count).map { _ in heap.remove()! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp4fkxn9cz.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp517_7kwv.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5xe4z7j3.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    heap.buildHeap(fromArray: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpoke7hcyo.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.size > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmprovlz6vs.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpc79oqwgg.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5xe4z7j3.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0syihic.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmps2v3fh01.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>()\n    for item in iterable {\n        heap.insert(item)\n    }\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmph4nr921y.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>()\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpxzu4wf4m.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted: [Int] = []\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpy97flyo3.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmps2v3fh01.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp517_7kwv.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmptwanvd0y.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp40g2qh7w.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty() {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp00dt7hew.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjyex_r86.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: <)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpkxajx7tf.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqk2q2fl6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmptwanvd0y.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpb1zoa9bo.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5gdgn5d6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty() {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpei4wjjgn.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0ckxrso4.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqk2q2fl6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmps2v3fh01.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0maagpf.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjyex_r86.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: <)\n    var sortedArray = [Int]()\n    while !heap.isEmpty {\n        sortedArray.append(heap.remove()!)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpsgjn89mb.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmps2v3fh01.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0_r5louk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted: [Int] = []\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpy97flyo3.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    heap.buildHeap(iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp8webk438.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>()\n    for element in iterable {\n        heap.insert(element)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpmxy6661n.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>()\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcj9l58n6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0ckxrso4.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5gdgn5d6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5gdgn5d6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcj9l58n6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpsbj9f7yp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: <)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp69ho3az_.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjyex_r86.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0ckxrso4.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjyex_r86.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpxzu4wf4m.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp517_7kwv.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpqk2q2fl6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0maagpf.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpgkoxcuc8.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpo1hfq1e2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpo1hfq1e2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpo1hfq1e2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpc79oqwgg.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpdnk2jlkl.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpsbj9f7yp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp4j620w55.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1h6msy2s.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcj9l58n6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpxa8yd7xc.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpsbj9f7yp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: <)\n    var sortedArray = [Int]()\n    while !heap.isEmpty {\n        sortedArray.append(heap.remove()!)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpsgjn89mb.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmps2v3fh01.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while let value = heap.pop() {\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpynoqb580.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjyex_r86.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0maagpf.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp0_r5louk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpre_d__uw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmphna5aa1f.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    heap.buildHeap(fromArray: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpoke7hcyo.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpo1hfq1e2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp88ixx5hh.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1h6msy2s.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpo1hfq1e2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7n903gx0.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp4j620w55.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp5gdgn5d6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpa0maagpf.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpcj9l58n6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpytj9prjk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp517_7kwv.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result: [Int] = []\n    \n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmpip_c9dg6.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124221,
      "stdout": "",
      "stderr": "/tmp/tmp40g2qh7w.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp1yu3yd4t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjp5qnt82.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}