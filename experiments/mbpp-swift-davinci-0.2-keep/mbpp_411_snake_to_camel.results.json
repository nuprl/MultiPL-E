{
  "name": "mbpp_411_snake_to_camel",
  "language": "swift",
  "prompt": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    for (index, char) in word.enumerated() {\n        if char == \"_\" {\n            result += word[index + 1].uppercased()\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmpum_ih6sh.swift:7:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result += word[index + 1].uppercased()\n                      ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else if is_first_char {\n            result.append(char)\n            is_first_char = false\n        } else {\n            result.append(char.lowercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmp11vhcsa1.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel = \"\"\n    for (i, char) in word.characters.enumerated() {\n        if char == \"_\" {\n            camel += word[word.index(word.startIndex, offsetBy: i + 1)].uppercased()\n        } else {\n            camel += String(char)\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmpb90kpxpi.swift:5:27: error: 'characters' is unavailable: Please use String directly\n    for (i, char) in word.characters.enumerated() {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercaseString\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpimb67ykn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpimb67ykn.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(char).uppercased()\n                capitalize = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmppme2_6gf/tmppme2_6gf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00fa4edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00fa1e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00fa1e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00fa1e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppme2_6gf                        0x000055ad375835a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b00fa6d9460 __libc_start_main + 245\n6    tmppme2_6gf                        0x000055ad375831e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercaseString\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmp9lgy8gl3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9lgy8gl3.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercaseString)\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmpthxr2ob4.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpthxr2ob4.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().reduce(\"\") { (result, item) -> String in\n        if item.offset == 0 {\n            return result + String(item.element)\n        } else {\n            return result + String(item.element.capitalized)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmp45vrwjbp.swift:8:49: error: reference to member 'capitalized' cannot be resolved without a contextual type\n            return result + String(item.element.capitalized)\n                                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmproanwrfb.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result += String(char).uppercased()\n            is_upper = false\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp1ic2wulc/tmp1ic2wulc.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b061577bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0615472b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0615472988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b06154717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1ic2wulc                        0x000055c767e095a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b0615967460 __libc_start_main + 245\n6    tmp1ic2wulc                        0x000055c767e091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result += String(char).uppercased()\n                capitalizeNext = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmp0ucmsike.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercaseString\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpimb67ykn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpimb67ykn.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for word in words {\n        camel += word.capitalized\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmpke31p_rk.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmproanwrfb.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmplulgq3qz.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplulgq3qz.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercased())\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp6we2e9qd.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for c in word {\n        if c == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(c).uppercased()\n                capitalize = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpt6adh5gh/tmpt6adh5gh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8c800c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd8c4f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd8c4f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd8c4f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt6adh5gh                        0x000055fd978be5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afd8c9ec460 __libc_start_main + 245\n6    tmpt6adh5gh                        0x000055fd978be1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for letter in word {\n        if letter == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(letter)\n                is_first = false\n            } else {\n                result.append(letter.lowercased())\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmp2ocsq3b_/tmp2ocsq3b_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab12bbd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab12b8d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab12b8d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab12b8cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2ocsq3b_                        0x00005653d1b485a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab12bdc5460 __libc_start_main + 245\n6    tmp2ocsq3b_                        0x00005653d1b481e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for character in word.characters {\n        if character == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(String(character).uppercased())\n                capitalize = false\n            } else {\n                result.append(character)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpp1oi6g3z.swift:6:27: error: 'characters' is unavailable: Please use String directly\n    for character in word.characters {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercased())\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmptzus0rne/tmptzus0rne.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad851ee7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad851bdeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad851bde988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad851bdd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptzus0rne                        0x000055faf02375a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ad8520d3460 __libc_start_main + 245\n6    tmptzus0rne                        0x000055faf02371e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result.append(char.uppercased())\n                next_is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpnc0rgazh/tmpnc0rgazh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d41af6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d417edb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d417ed988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d417ec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnc0rgazh                        0x0000561378d8e5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d41ce2460 __libc_start_main + 245\n6    tmpnc0rgazh                        0x0000561378d8e1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpoddxl6vp.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char)\n                is_first = false\n            } else {\n                result.append(char.lowercased())\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpec4eclso.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_word = true\n    for char in word {\n        if char == \"_\" {\n            is_first_word = false\n        } else {\n            if is_first_word {\n                result.append(char)\n            } else {\n                result.append(char.uppercased())\n                is_first_word = true\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpms2hko54/tmpms2hko54.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9c22acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9c1fa3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9c1fa3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9c1fa27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpms2hko54                        0x0000559e82d305a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac9c2498460 __libc_start_main + 245\n6    tmpms2hko54                        0x0000559e82d301e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            camel += words[i]\n        } else {\n            camel += words[i].capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmppe6xry5z.swift:10:31: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += words[i].capitalized\n                     ~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpmfdj2rzt.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmfdj2rzt.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for character in word.characters {\n        if character == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(String(character).uppercased())\n                capitalize = false\n            } else {\n                result.append(character)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpp1oi6g3z.swift:6:27: error: 'characters' is unavailable: Please use String directly\n    for character in word.characters {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for character in word.characters {\n        if character == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(String(character).uppercased())\n                capitalize = false\n            } else {\n                result.append(character)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpp1oi6g3z.swift:6:27: error: 'characters' is unavailable: Please use String directly\n    for character in word.characters {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpoddxl6vp.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpud84kanm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpp86yhjo0.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpp86yhjo0.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpk9h2j87k.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1a9apvh5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1a9apvh5.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpdls1df52.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdls1df52.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    \n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpim5ah3o3.swift:7:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpim5ah3o3.swift:12:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char)\n                is_first_char = false\n            } else {\n                result.append(char.lowercased())\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpj0yl2wbm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnnkc4mle.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnnkc4mle.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1a9apvh5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1a9apvh5.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    let first = words[0]\n    let rest = words.dropFirst().map { $0.capitalized }\n    return ([first] + rest).joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp72_5lhq4.swift:6:43: error: value of type 'DropFirstSequence<[String.SubSequence]>.Element' (aka 'Substring') has no member 'capitalized'\n    let rest = words.dropFirst().map { $0.capitalized }\n                                       ~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(String(char).uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpmedb82gi.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmedb82gi.swift:11:44: error: value of type 'String' has no member 'uppercaseString'\n                result.append(String(char).uppercaseString)\n                              ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_is_upper = true\n            continue\n        }\n        if next_is_upper {\n            result.append(char.uppercaseString)\n            next_is_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpixbfmxq9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpixbfmxq9.swift:12:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpod6aqfdo.swift:4:99: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n                                                                                       ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_capital = false\n    for char in word {\n        if char == \"_\" {\n            next_capital = true\n        } else {\n            if next_capital {\n                result.append(char.uppercased())\n                next_capital = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmp38rgnzyz/tmp38rgnzyz.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abafa674c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abafa36bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abafa36b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abafa36a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp38rgnzyz                        0x000055a1daf3c5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002abafa860460 __libc_start_main + 245\n6    tmp38rgnzyz                        0x000055a1daf3c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset > 0 ? $0.element.capitalized : $0.element }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpvg060ovf.swift:4:85: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset > 0 ? $0.element.capitalized : $0.element }.joined()\n                                                                         ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpd3clo39u.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpd3clo39u.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").map { String($0).capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp9jtv0zyv.swift:4:56: error: value of type 'String' has no member 'capitalized'\n    return word.split(separator: \"_\").map { String($0).capitalized }.joined()\n                                            ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpabh52i2r.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpabh52i2r.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmprsb0hk8z.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1a9apvh5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1a9apvh5.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result += String(char).capitalized\n                capitalizeNext = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpi9escihn.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpoddxl6vp.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpxl2ti_mv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for character in word.characters {\n        if character == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(String(character).uppercased())\n                capitalize = false\n            } else {\n                result.append(character)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpp1oi6g3z.swift:6:27: error: 'characters' is unavailable: Please use String directly\n    for character in word.characters {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpmfdj2rzt.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmfdj2rzt.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            result += next_upper ? char.uppercased() : char\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp3n11o1cf.swift:10:34: error: cannot convert value of type 'Character' to expected argument type 'String'\n            result += next_upper ? char.uppercased() : char\n                                 ^\n/tmp/tmp3n11o1cf.swift:10:41: error: result values in '? :' expression have mismatching types 'String' and 'Character'\n            result += next_upper ? char.uppercased() : char\n                                   ~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result.append(char.uppercased())\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmp3t1sk0dm/tmp3t1sk0dm.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac62d13dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac62ce34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac62ce34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac62ce337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3t1sk0dm                        0x0000558520e885a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac62d329460 __libc_start_main + 245\n6    tmp3t1sk0dm                        0x0000558520e881e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpod6aqfdo.swift:4:99: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n                                                                                       ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result += String(char).capitalized\n                capitalizeNext = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpi9escihn.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var first = true\n    for char in word {\n        if char == \"_\" {\n            first = true\n        } else if first {\n            result.append(char.uppercased())\n            first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercaseString)\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpdaxa4bsn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdaxa4bsn.swift:10:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var prev_char_is_underscore = false\n    for char in word.characters {\n        if char == \"_\" {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += String(char).uppercased()\n            } else {\n                result += String(char)\n            }\n            prev_char_is_underscore = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmptx_1fz2v.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercased())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpprqidhvb/tmpprqidhvb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2532969c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2532660b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2532660988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b253265f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpprqidhvb                        0x00005600d54325a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2532b55460 __libc_start_main + 245\n6    tmpprqidhvb                        0x00005600d54321e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp6l4blnwb.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(char).uppercased()\n                is_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpipa1mu_v/tmpipa1mu_v.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac214edfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac214bd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac214bd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac214bd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpipa1mu_v                        0x0000563f358d75a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac2150cb460 __libc_start_main + 245\n6    tmpipa1mu_v                        0x0000563f358d71e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var flag = false\n    for char in word {\n        if char == \"_\" {\n            flag = true\n        } else {\n            if flag {\n                result.append(char.uppercased())\n                flag = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmps2ykcnr_/tmps2ykcnr_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5506758c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b550644fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b550644f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b550644e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps2ykcnr_                        0x00005563ee8c15a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b5506944460 __libc_start_main + 245\n6    tmps2ykcnr_                        0x00005563ee8c11e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmproanwrfb.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpmfdj2rzt.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmfdj2rzt.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercased())\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpw61vuw00/tmpw61vuw00.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d7c32cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d7c023b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d7c023988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d7c0227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw61vuw00                        0x00005626c24da5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d7c518460 __libc_start_main + 245\n6    tmpw61vuw00                        0x00005626c24da1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpoddxl6vp.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercase())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpzus3_aeu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzus3_aeu.swift:10:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase())\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            camel += words[i]\n        } else {\n            camel += words[i].capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpo76aq6l_.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercased())\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpw61vuw00/tmpw61vuw00.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d7c32cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d7c023b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d7c023988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d7c0227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw61vuw00                        0x00005626c24da5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d7c518460 __libc_start_main + 245\n6    tmpw61vuw00                        0x00005626c24da1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    for (index, char) in word.enumerated() {\n        if char == \"_\" {\n            result += word[word.index(word.startIndex, offsetBy: index + 1)].uppercased()\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpmbajp3wt/tmpmbajp3wt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef2dfd6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef2dccdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef2dccd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef2dccc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmbajp3wt                        0x0000556e8d3f9887 <unavailable> + 6279\n5    libc.so.6                          0x00002aef2e1c2460 __libc_start_main + 245\n6    tmpmbajp3wt                        0x0000556e8d3f94c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for letter in word {\n        if letter == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(letter.uppercased())\n                capitalize = false\n            } else {\n                result.append(letter)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmp538fsbeu/tmp538fsbeu.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b873d26dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b873cf64b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b873cf64988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b873cf637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp538fsbeu                        0x00005573463f25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b873d459460 __libc_start_main + 245\n6    tmp538fsbeu                        0x00005573463f21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result += String(char).capitalized\n                capitalizeNext = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpi9escihn.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var new_word = \"\"\n    var capitalize = false\n    \n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                new_word += String(char).uppercased()\n                capitalize = false\n            } else {\n                new_word += String(char)\n            }\n        }\n    }\n    \n    return new_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmp70qsg1mb/tmp70qsg1mb.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5716635c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b571632cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b571632c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b571632b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70qsg1mb                        0x00005557e903d5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b5716821460 __libc_start_main + 245\n6    tmp70qsg1mb                        0x00005557e903d1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(char).uppercased()\n                is_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpipa1mu_v/tmpipa1mu_v.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac214edfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac214bd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac214bd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac214bd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpipa1mu_v                        0x0000563f358d75a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac2150cb460 __libc_start_main + 245\n6    tmpipa1mu_v                        0x0000563f358d71e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmproanwrfb.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result += String(char).uppercased()\n                capitalizeNext = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmp0ucmsike.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "/tmp/tmproanwrfb.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for ch in word {\n        if ch == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(ch.uppercased())\n                is_first = false\n            } else {\n                result.append(ch)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpoddxl6vp.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercased())\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpw61vuw00/tmpw61vuw00.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d7c32cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d7c023b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d7c023988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d7c0227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw61vuw00                        0x00005626c24da5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d7c518460 __libc_start_main + 245\n6    tmpw61vuw00                        0x00005626c24da1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            result += next_upper ? String(c).uppercased() : String(c)\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmpa7sb17ok/tmpa7sb17ok.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac96c757c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac96c44eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac96c44e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac96c44d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa7sb17ok                        0x00005575194f35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac96c943460 __libc_start_main + 245\n6    tmpa7sb17ok                        0x00005575194f31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_capital = false\n    for char in word {\n        if char == \"_\" {\n            next_capital = true\n        } else {\n            if next_capital {\n                result.append(char.uppercased())\n                next_capital = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "tmp38rgnzyz/tmp38rgnzyz.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abafa674c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abafa36bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abafa36b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abafa36a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp38rgnzyz                        0x000055a1daf3c5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002abafa860460 __libc_start_main + 245\n6    tmp38rgnzyz                        0x000055a1daf3c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpxhpadq10.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpdls1df52.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdls1df52.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word.lowercased()\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpcztfnpxx.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_word = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result.append(char.uppercase())\n                is_first_word = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpyj4co4k4.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyj4co4k4.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercase())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp6hexe70x.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6hexe70x.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else if capitalizeNext {\n            result += String(char).capitalized\n            capitalizeNext = false\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmp2myh_vz6.swift:10:36: error: value of type 'String' has no member 'capitalized'\n            result += String(char).capitalized\n                      ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var new_word = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                new_word += String(char).uppercased()\n                is_first_char = false\n            } else {\n                new_word += String(char)\n            }\n        }\n    }\n    return new_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpdh2xlt4u.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n            } else {\n                result.append(c)\n            }\n            is_first = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "/tmp/tmpoied1zre.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpoied1zre.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}