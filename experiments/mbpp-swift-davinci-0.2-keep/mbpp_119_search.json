{
  "name": "mbpp_119_search",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]",
    "    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]",
    "    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if mid % 2 == 0 {\n            if mid + 1 < arr.count && arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else if mid - 1 >= 0 && arr[mid] == arr[mid - 1] {\n                high = mid - 2\n            } else {\n                return arr[mid]\n            }\n        } else {\n            if mid + 1 < arr.count && arr[mid] == arr[mid + 1] {\n                high = mid - 1\n            } else if mid - 1 >= 0 && arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                return arr[mid]\n            }\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]",
    "    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid == 0 {\n            return arr[mid]\n        }\n        if mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1",
    "    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid + 1] {\n            if (mid - left) % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else if arr[mid] == arr[mid - 1] {\n            if (right - mid) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[mid]",
    "    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if mid > 0 && arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 2\n            }\n        } else if mid < arr.count - 1 && arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return -1",
    "    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if (mid + 1) % 2 == 0 {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1",
    "    var start = 0\n    var end = arr.count - 1\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                end = mid - 2\n            } else {\n                start = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                start = mid + 2\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return -1",
    "    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]",
    "    var start = 0\n    var end = arr.count - 1\n    var mid = 0\n    while start <= end {\n        mid = (start + end) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                start = mid + 2\n            } else {\n                end = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return arr[mid]",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return -1",
    "    var start = 0\n    var end = arr.count - 1\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                end = mid - 2\n            } else {\n                start = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                end = mid - 1\n            } else {\n                start = mid + 2\n            }\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                low = mid + 1\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if (mid + 1) % 2 == 0 {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1",
    "    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]"
  ]
}