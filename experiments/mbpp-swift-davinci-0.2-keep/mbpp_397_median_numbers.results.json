{
  "name": "mbpp_397_median_numbers",
  "language": "swift",
  "prompt": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp35xqsh98/tmp35xqsh98.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b498473ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4984435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4984435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49844347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp35xqsh98                        0x000055dc4c9891cc <unavailable> + 4556\n5    libc.so.6                          0x00002b498492a460 __libc_start_main + 245\n6    tmp35xqsh98                        0x000055dc4c988e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let sorted = [a, b, c].sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return Double(a + b + c) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp393ezpx0/tmp393ezpx0.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b761400dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7613d04b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7613d04988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7613d037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp393ezpx0                        0x0000562574fdd1cc <unavailable> + 4556\n5    libc.so.6                          0x00002b76141f9460 __libc_start_main + 245\n6    tmp393ezpx0                        0x0000562574fdce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let sorted = [a, b, c].sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return Double(a + b + c - max(a, b, c) - min(a, b, c))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = Double(sortedArray[1])\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n            return Double(b)\n        } else if a > c {\n            return Double(c)\n        } else {\n            return Double(a)\n        }\n    } else {\n        if a > c {\n            return Double(a)\n        } else if b > c {\n            return Double(c)\n        } else {\n            return Double(b)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let mid = sorted[1]\n    return Double(mid)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp35xqsh98/tmp35xqsh98.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b498473ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4984435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4984435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49844347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp35xqsh98                        0x000055dc4c9891cc <unavailable> + 4556\n5    libc.so.6                          0x00002b498492a460 __libc_start_main + 245\n6    tmp35xqsh98                        0x000055dc4c988e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    return Double(sortedNumbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let mid = sorted[1]\n    return Double(mid)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    if sortedArray.count % 2 == 0 {\n        return Double((sortedArray[sortedArray.count / 2] + sortedArray[sortedArray.count / 2 - 1])) / 2\n    } else {\n        return Double(sortedArray[sortedArray.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let sorted = [a, b, c].sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    if sorted.count % 2 == 0 {\n        let left = sorted[sorted.count / 2 - 1]\n        let right = sorted[sorted.count / 2]\n        return Double(left + right) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var numbers = [a, b, c]\n    numbers.sortInPlace()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp0u27xa7c.swift:5:13: error: value of type '[Int]' has no member 'sortInPlace'\n    numbers.sortInPlace()\n    ~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    if array.count % 2 == 0 {\n        return Double((array[array.count / 2] + array[array.count / 2 - 1])) / 2\n    } else {\n        return Double(array[array.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let nums = [a, b, c].sorted()\n    return Double(nums[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let medianIndex = sortedNumbers.count / 2\n    return Double(sortedNumbers[medianIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    return Double(sortedNumbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let sorted = [a, b, c].sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let medianIndex = sortedNumbers.count / 2\n    let median = sortedNumbers[medianIndex]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n            return Double(b)\n        } else if a > c {\n            return Double(c)\n        } else {\n            return Double(a)\n        }\n    } else {\n        if a > c {\n            return Double(a)\n        } else if b > c {\n            return Double(c)\n        } else {\n            return Double(b)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let arr = [a, b, c].sorted()\n    return Double(arr[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return array[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp9ue4j_42.swift:5:17: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return array[1]\n           ~~~~~^~~\n           Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let mid = sorted[1]\n    return Double(mid)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    let middle = array.count / 2\n    return Double(array[middle])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let arr = [a, b, c].sorted()\n    return Double(arr[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp35xqsh98/tmp35xqsh98.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b498473ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4984435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4984435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49844347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp35xqsh98                        0x000055dc4c9891cc <unavailable> + 4556\n5    libc.so.6                          0x00002b498492a460 __libc_start_main + 245\n6    tmp35xqsh98                        0x000055dc4c988e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return Double(a + b + c) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp393ezpx0/tmp393ezpx0.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b761400dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7613d04b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7613d04988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7613d037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp393ezpx0                        0x0000562574fdd1cc <unavailable> + 4556\n5    libc.so.6                          0x00002b76141f9460 __libc_start_main + 245\n6    tmp393ezpx0                        0x0000562574fdce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count % 2 == 0 {\n        return Double((sortedNumbers[sortedNumbers.count / 2] + sortedNumbers[sortedNumbers.count / 2 - 1])) / 2\n    } else {\n        return Double(sortedNumbers[sortedNumbers.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    if sortedArray.count % 2 == 0 {\n        let midIndex = sortedArray.count / 2\n        let median = Double(sortedArray[midIndex] + sortedArray[midIndex - 1]) / 2\n        return median\n    } else {\n        let midIndex = sortedArray.count / 2\n        let median = Double(sortedArray[midIndex])\n        return median\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let arr = [a, b, c].sorted()\n    return Double(arr[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let middleIndex = sortedArray.count / 2\n    if sortedArray.count % 2 == 0 {\n        return Double(sortedArray[middleIndex - 1] + sortedArray[middleIndex]) / 2\n    } else {\n        return Double(sortedArray[middleIndex])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    if a < b {\n        if b < c {\n            return Double(b)\n        } else if a < c {\n            return Double(c)\n        } else {\n            return Double(a)\n        }\n    } else if b > c {\n        return Double(b)\n    } else if a > c {\n        return Double(c)\n    } else {\n        return Double(a)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var numbers = [a, b, c]\n    numbers.sort()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let mid = sorted.count / 2\n    return Double(sorted[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted(by: <)\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = Double(sortedArray[1])\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var numbers = [a, b, c]\n    numbers.sort()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let median = sortedNumbers[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp1k69bfv1.swift:6:18: error: cannot convert return expression of type 'Int' to return type 'Double'\n    return sorted[1]\n           ~~~~~~^~~\n           Double(  )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let arr = [a, b, c].sorted()\n    return Double(arr[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double((sorted[middle - 1] + sorted[middle])) / 2\n    } else {\n        return Double(sorted[middle])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var numbers = [a, b, c]\n    numbers.sort()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let medianIndex = sortedNumbers.count / 2\n    return Double(sortedNumbers[medianIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var arr = [a, b, c]\n    arr.sort()\n    return Double(arr[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    let medianIndex = sortedNumbers.count / 2\n    return Double(sortedNumbers[medianIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var numbers = [a, b, c]\n    numbers.sort()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var numbers = [a, b, c]\n    numbers.sort()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let median = sorted[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let arr = [a, b, c].sorted()\n    return Double(arr[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let median = sortedArray[1]\n    return Double(median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sorted = numbers.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2 - 1] + sorted[sorted.count / 2]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    var array = [a, b, c]\n    array.sort()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c]\n    let sortedNumbers = numbers.sorted()\n    return Double(sortedNumbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp35xqsh98/tmp35xqsh98.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b498473ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4984435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4984435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49844347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp35xqsh98                        0x000055dc4c9891cc <unavailable> + 4556\n5    libc.so.6                          0x00002b498492a460 __libc_start_main + 245\n6    tmp35xqsh98                        0x000055dc4c988e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    if array.count % 2 == 0 {\n        let left = sorted[(array.count / 2) - 1]\n        let right = sorted[array.count / 2]\n        return Double(left + right) / 2\n    } else {\n        return Double(sorted[array.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    return Double(a + b + c) / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "tmp393ezpx0/tmp393ezpx0.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b761400dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7613d04b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7613d04988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7613d037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp393ezpx0                        0x0000562574fdd1cc <unavailable> + 4556\n5    libc.so.6                          0x00002b76141f9460 __libc_start_main + 245\n6    tmp393ezpx0                        0x0000562574fdce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    let middle = sorted[1]\n    return Double(middle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    return Double(sortedArray[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sortedArray = array.sorted()\n    let middleIndex = sortedArray.count / 2\n    let median = Double(sortedArray[middleIndex])\n    return median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c]\n    let sorted = array.sorted()\n    return Double(sorted[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let numbers = [a, b, c].sorted()\n    return Double(numbers[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of three numbers.\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n    let array = [a, b, c].sorted()\n    return Double(array[1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(median_numbers(a: 25, b: 55, c: 65) == 55.0)\nassert(median_numbers(a: 20, b: 10, c: 30) == 20.0)\nassert(median_numbers(a: 15, b: 45, c: 75) == 45.0)",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}