{
  "name": "mbpp_468_max_product",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpx0zww17y/tmpx0zww17y.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e78b31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e78828b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e78828988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e788277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0zww17y                        0x00005569c7ab763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3e78d1d460 __libc_start_main + 245\n6    tmpx0zww17y                        0x00005569c7ab7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var maxElement = arr[0]\n    var minElement = arr[0]\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(1, minProductSoFar * arr[i])\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(1, minProductSoFar * arr[i])\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProductSoFar > maxProduct {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpmbie1g9f/tmpmbie1g9f.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac09e7c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac09e4b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac09e4b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac09e4b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmbie1g9f                        0x000055952daa863c <unavailable> + 5692\n5    libc.so.6                          0x00002ac09e9ae460 __libc_start_main + 245\n6    tmpmbie1g9f                        0x000055952daa8289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    while i < arr.count {\n        product *= arr[i]\n        if product > max_product {\n            max_product = product\n        }\n        if product == 0 {\n            product = 1\n        }\n        i += 1\n    }\n    product = 1\n    i = arr.count - 1\n    while i >= 0 {\n        product *= arr[i]\n        if product > max_product {\n            max_product = product\n        }\n        if product == 0 {\n            product = 1\n        }\n        i -= 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp760cx6sn/tmp760cx6sn.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae286b41c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae286838b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae286838988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2868377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp760cx6sn                        0x000055fd340093cc <unavailable> + 5068\n5    libc.so.6                          0x00002ae286d2d460 __libc_start_main + 245\n6    tmp760cx6sn                        0x000055fd34009019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpro43nnre/tmpro43nnre.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5afc626c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5afc31db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5afc31d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5afc31c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpro43nnre                        0x0000555c97ec963c <unavailable> + 5692\n5    libc.so.6                          0x00002b5afc812460 __libc_start_main + 245\n6    tmpro43nnre                        0x0000555c97ec9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp8hmj1912/tmp8hmj1912.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b355dbfdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b355d8f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b355d8f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b355d8f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8hmj1912                        0x0000557335a0563c <unavailable> + 5692\n5    libc.so.6                          0x00002b355dde9460 __libc_start_main + 245\n6    tmp8hmj1912                        0x0000557335a05289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_bqmiyn2/tmp_bqmiyn2.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dfbeaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dfbba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dfbba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dfbba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_bqmiyn2                        0x000055ec589bf63c <unavailable> + 5692\n5    libc.so.6                          0x00002b5dfc096460 __libc_start_main + 245\n6    tmp_bqmiyn2                        0x000055ec589bf289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpgzs8r8io/tmpgzs8r8io.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71bfa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71bf6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71bf6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71bf6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgzs8r8io                        0x0000561b8832563c <unavailable> + 5692\n5    libc.so.6                          0x00002b71bfbf4460 __libc_start_main + 245\n6    tmpgzs8r8io                        0x0000561b88325289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far *= arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp7s9mtmef/tmp7s9mtmef.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22589aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22586a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22586a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22586a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7s9mtmef                        0x0000561ae799963c <unavailable> + 5692\n5    libc.so.6                          0x00002b2258b9a460 __libc_start_main + 245\n6    tmp7s9mtmef                        0x0000561ae7999289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpyylbugoe/tmpyylbugoe.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ecdc7dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ecd974b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ecd974988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ecd9737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyylbugoe                        0x000055d6a44d463c <unavailable> + 5692\n5    libc.so.6                          0x00002b9ecde69460 __libc_start_main + 245\n6    tmpyylbugoe                        0x000055d6a44d4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxSoFar = 1\n    var minSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxSoFar = maxSoFar * arr[i]\n            minSoFar = min(minSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxSoFar = 1\n            minSoFar = 1\n        } else {\n            let temp = maxSoFar\n            maxSoFar = max(minSoFar * arr[i], 1)\n            minSoFar = temp * arr[i]\n        }\n        if maxSoFar > maxProduct {\n            maxProduct = maxSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp07iyl6zl/tmp07iyl6zl.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba76d54bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba76d242b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba76d242988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba76d2417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp07iyl6zl                        0x000055609ba2a63c <unavailable> + 5692\n5    libc.so.6                          0x00002ba76d737460 __libc_start_main + 245\n6    tmp07iyl6zl                        0x000055609ba2a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var max = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        if max < maxProduct {\n            max = maxProduct\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "/tmp/tmprg82pygq.swift:16:26: error: cannot call value of non-function type 'Int'\n            maxProduct = max(minProduct * arr[i], 1)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        \n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp9lqq2qnj/tmp9lqq2qnj.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68851fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6884ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6884ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6884ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9lqq2qnj                        0x0000557e450f463c <unavailable> + 5692\n5    libc.so.6                          0x00002b68853ea460 __libc_start_main + 245\n6    tmp9lqq2qnj                        0x0000557e450f4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp4h2eyumc/tmp4h2eyumc.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af678b9fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af678896b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af678896988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6788957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4h2eyumc                        0x000055bd9ba8563c <unavailable> + 5692\n5    libc.so.6                          0x00002af678d8b460 __libc_start_main + 245\n6    tmp4h2eyumc                        0x000055bd9ba85289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp457giy3i/tmp457giy3i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76c1cf8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76c19efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76c19ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76c19ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp457giy3i                        0x000055ea1660b63c <unavailable> + 5692\n5    libc.so.6                          0x00002b76c1ee4460 __libc_start_main + 245\n6    tmp457giy3i                        0x000055ea1660b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_bqmiyn2/tmp_bqmiyn2.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dfbeaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dfbba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dfbba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dfbba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_bqmiyn2                        0x000055ec589bf63c <unavailable> + 5692\n5    libc.so.6                          0x00002b5dfc096460 __libc_start_main + 245\n6    tmp_bqmiyn2                        0x000055ec589bf289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var current_max = arr[0]\n    var current_min = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] < 0 {\n            let temp = current_max\n            current_max = current_min\n            current_min = temp\n        }\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n        max_product = max(max_product, current_max)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpsnhnuaiv/tmpsnhnuaiv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14289c3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14286bab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14286ba988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14286b97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsnhnuaiv                        0x000055cbefa3863c <unavailable> + 5692\n5    libc.so.6                          0x00002b1428baf460 __libc_start_main + 245\n6    tmpsnhnuaiv                        0x000055cbefa38289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProductSoFar > maxProduct {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpt2z5_h27/tmpt2z5_h27.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac867b1bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac867812b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac867812988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac8678117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt2z5_h27                        0x000055deeb47f63c <unavailable> + 5692\n5    libc.so.6                          0x00002ac867d07460 __libc_start_main + 245\n6    tmpt2z5_h27                        0x000055deeb47f289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp3td5dw4p/tmp3td5dw4p.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7bb44cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7bb41c4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7bb41c4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7bb41c37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3td5dw4p                        0x0000559c946bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b7bb46b9460 __libc_start_main + 245\n6    tmp3td5dw4p                        0x0000559c946bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_so_far = 0\n    var min_so_far = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max(max_so_far * arr[i], arr[i])\n            min_so_far = min(min_so_far * arr[i], arr[i])\n        } else if arr[i] == 0 {\n            max_so_far = 0\n            min_so_far = 0\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], arr[i])\n            min_so_far = min(temp * arr[i], arr[i])\n        }\n        \n        max_product = max(max_product, max_so_far)\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpmiwh5yx7/tmpmiwh5yx7.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b427204fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4271d46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4271d46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4271d457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmiwh5yx7                        0x00005614d9f1563c <unavailable> + 5692\n5    libc.so.6                          0x00002b427223b460 __libc_start_main + 245\n6    tmpmiwh5yx7                        0x00005614d9f15289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 0\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        maxProduct = max(maxProduct, maxProductSoFar)\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpmqd568ni/tmpmqd568ni.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ed00aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ecfda1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ecfda1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ecfda07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmqd568ni                        0x000055ca232d263c <unavailable> + 5692\n5    libc.so.6                          0x00002b4ed0296460 __libc_start_main + 245\n6    tmpmqd568ni                        0x000055ca232d2289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpgzs8r8io/tmpgzs8r8io.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71bfa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71bf6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71bf6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71bf6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgzs8r8io                        0x0000561b8832563c <unavailable> + 5692\n5    libc.so.6                          0x00002b71bfbf4460 __libc_start_main + 245\n6    tmpgzs8r8io                        0x0000561b88325289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var maxSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        \n        if maxSoFar < maxProduct {\n            maxSoFar = maxProduct\n        }\n    }\n    \n    return maxSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpwc_78cpg/tmpwc_78cpg.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b971e1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b96ed8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b96ed8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b96ed77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwc_78cpg                        0x000055ed8e02063c <unavailable> + 5692\n5    libc.so.6                          0x00002b4b973cd460 __libc_start_main + 245\n6    tmpwc_78cpg                        0x000055ed8e020289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    var j = 0\n    while j < arr.count {\n        product *= arr[j]\n        if arr[j] == 0 {\n            product = 1\n            i = j + 1\n        }\n        if product > max_product {\n            max_product = product\n        }\n        j += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpbcrhpm16/tmpbcrhpm16.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f36c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f33b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f33b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f33b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbcrhpm16                        0x0000556e130263cc <unavailable> + 5068\n5    libc.so.6                          0x00002b96f38ac460 __libc_start_main + 245\n6    tmpbcrhpm16                        0x0000556e13026019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp457giy3i/tmp457giy3i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76c1cf8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76c19efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76c19ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76c19ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp457giy3i                        0x000055ea1660b63c <unavailable> + 5692\n5    libc.so.6                          0x00002b76c1ee4460 __libc_start_main + 245\n6    tmp457giy3i                        0x000055ea1660b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpx0zww17y/tmpx0zww17y.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e78b31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e78828b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e78828988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e788277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0zww17y                        0x00005569c7ab763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3e78d1d460 __libc_start_main + 245\n6    tmpx0zww17y                        0x00005569c7ab7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vny57h3/tmp4vny57h3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36368d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36365c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36365c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36365c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vny57h3                        0x000055fe5d2b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3636abc460 __libc_start_main + 245\n6    tmp4vny57h3                        0x000055fe5d2b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    var result = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_so_far * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        if max_ending_here > result {\n            result = max_ending_here\n        }\n        if max_ending_here < min_ending_here {\n            let temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpz9jj3pqj/tmpz9jj3pqj.swift:52: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b5deaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b5dba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b5dba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b5dba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz9jj3pqj                        0x00005592b8ce463c <unavailable> + 5692\n5    libc.so.6                          0x00002b9b5e096460 __libc_start_main + 245\n6    tmpz9jj3pqj                        0x00005592b8ce4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product *= arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpz0bvu0p7/tmpz0bvu0p7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b06774e6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b06771ddb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b06771dd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b06771dc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz0bvu0p7                        0x000055eaec0ad63c <unavailable> + 5692\n5    libc.so.6                          0x00002b06776d2460 __libc_start_main + 245\n6    tmpz0bvu0p7                        0x000055eaec0ad289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp0e16cdpm/tmp0e16cdpm.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad565918c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad56560fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad56560f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad56560e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0e16cdpm                        0x00005599d0c3e63c <unavailable> + 5692\n5    libc.so.6                          0x00002ad565b04460 __libc_start_main + 245\n6    tmp0e16cdpm                        0x00005599d0c3e289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vny57h3/tmp4vny57h3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36368d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36365c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36365c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36365c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vny57h3                        0x000055fe5d2b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3636abc460 __libc_start_main + 245\n6    tmp4vny57h3                        0x000055fe5d2b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element_so_far = 1\n    var min_element_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmplqme19mf/tmplqme19mf.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af63e0a5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af63dd9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af63dd9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af63dd9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqme19mf                        0x000055c43d56763c <unavailable> + 5692\n5    libc.so.6                          0x00002af63e291460 __libc_start_main + 245\n6    tmplqme19mf                        0x000055c43d567289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpm_9b_ter/tmpm_9b_ter.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c2995dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c29654b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c29654988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c296537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm_9b_ter                        0x000055a45091863c <unavailable> + 5692\n5    libc.so.6                          0x00002b8c29b49460 __libc_start_main + 245\n6    tmpm_9b_ter                        0x000055a450918289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        \n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp9lqq2qnj/tmp9lqq2qnj.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68851fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6884ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6884ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6884ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9lqq2qnj                        0x0000557e450f463c <unavailable> + 5692\n5    libc.so.6                          0x00002b68853ea460 __libc_start_main + 245\n6    tmp9lqq2qnj                        0x0000557e450f4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var prev = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProductSoFar > maxProduct {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpsksxiga7/tmpsksxiga7.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b44d228cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b44d1f83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b44d1f83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b44d1f827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsksxiga7                        0x000056216fd3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b44d2478460 __libc_start_main + 245\n6    tmpsksxiga7                        0x000056216fd36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpgqxrswtb/tmpgqxrswtb.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9641fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9641cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9641cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9641cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqxrswtb                        0x000055ca4e6a363c <unavailable> + 5692\n5    libc.so.6                          0x00002b96421b5460 __libc_start_main + 245\n6    tmpgqxrswtb                        0x000055ca4e6a3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var result = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if result < max_product {\n            result = max_product\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpe_feuben/tmpe_feuben.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b1aa8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b1a785b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b1a785988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b1a7847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe_feuben                        0x0000562e02f3263c <unavailable> + 5692\n5    libc.so.6                          0x00002b3b1ac7a460 __libc_start_main + 245\n6    tmpe_feuben                        0x0000562e02f32289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vny57h3/tmp4vny57h3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36368d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36365c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36365c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36365c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vny57h3                        0x000055fe5d2b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3636abc460 __libc_start_main + 245\n6    tmp4vny57h3                        0x000055fe5d2b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_bqmiyn2/tmp_bqmiyn2.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dfbeaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dfbba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dfbba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dfbba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_bqmiyn2                        0x000055ec589bf63c <unavailable> + 5692\n5    libc.so.6                          0x00002b5dfc096460 __libc_start_main + 245\n6    tmp_bqmiyn2                        0x000055ec589bf289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max(max_product_so_far * arr[i], arr[i])\n            min_product_so_far = min(min_product_so_far * arr[i], arr[i])\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], arr[i])\n            min_product_so_far = min(temp * arr[i], arr[i])\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp8f4cp3f3/tmp8f4cp3f3.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9068f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9065e7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9065e7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9065e67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8f4cp3f3                        0x000056481239e63c <unavailable> + 5692\n5    libc.so.6                          0x00002af906adc460 __libc_start_main + 245\n6    tmp8f4cp3f3                        0x000056481239e289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_so_far = 0\n    var min_so_far = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max(max_so_far * arr[i], arr[i])\n            min_so_far = min(min_so_far * arr[i], arr[i])\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], arr[i])\n            min_so_far = min(temp * arr[i], arr[i])\n        }\n        \n        max_product = max(max_product, max_so_far)\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpv57zjuzt/tmpv57zjuzt.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86b7d47c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86b7a3eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86b7a3e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86b7a3d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv57zjuzt                        0x000055a5a061063c <unavailable> + 5692\n5    libc.so.6                          0x00002b86b7f33460 __libc_start_main + 245\n6    tmpv57zjuzt                        0x000055a5a0610289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxSoFar = 1\n    var minSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxSoFar = maxSoFar * arr[i]\n            minSoFar = min(minSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxSoFar = 1\n            minSoFar = 1\n        } else {\n            let temp = maxSoFar\n            maxSoFar = max(minSoFar * arr[i], 1)\n            minSoFar = temp * arr[i]\n        }\n        \n        if maxProduct < maxSoFar {\n            maxProduct = maxSoFar\n        }\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp44ybe1tz/tmp44ybe1tz.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b66215d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b66212c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b66212c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b66212c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44ybe1tz                        0x0000565342ddd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b66217bc460 __libc_start_main + 245\n6    tmp44ybe1tz                        0x0000565342ddd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = Int.min\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        product *= arr[i]\n        while j < i && arr[j] < arr[i] {\n            product /= arr[j]\n            j += 1\n        }\n        max_product = max(max_product, product)\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpcxo7mkqg/tmpcxo7mkqg.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebc0cacc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebc09a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebc09a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebc09a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcxo7mkqg                        0x0000565292a484ec <unavailable> + 5356\n5    libc.so.6                          0x00002aebc0e98460 __libc_start_main + 245\n6    tmpcxo7mkqg                        0x0000565292a48139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var n = arr.count\n    for i in 0..<n {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpqaeqv7bc/tmpqaeqv7bc.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1ae6bfac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1ae68f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1ae68f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1ae68f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqaeqv7bc                        0x000055f6d9e9f63c <unavailable> + 5692\n5    libc.so.6                          0x00002b1ae6de6460 __libc_start_main + 245\n6    tmpqaeqv7bc                        0x000055f6d9e9f289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp92d475f9/tmp92d475f9.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf2c10cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf2be03b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf2be03988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf2be027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp92d475f9                        0x000055fdaa6c063c <unavailable> + 5692\n5    libc.so.6                          0x00002abf2c2f8460 __libc_start_main + 245\n6    tmp92d475f9                        0x000055fdaa6c0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var maxElement = arr[0]\n    var minElement = arr[0]\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        \n        if maxProductSoFar > maxProduct {\n            maxProduct = maxProductSoFar\n        }\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmpdnw3l6_9/tmpdnw3l6_9.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ef9d9fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ef9a96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ef9a96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ef9a957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdnw3l6_9                        0x000056001a23963c <unavailable> + 5692\n5    libc.so.6                          0x00002b4ef9f8b460 __libc_start_main + 245\n6    tmpdnw3l6_9                        0x000056001a239289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpx0zww17y/tmpx0zww17y.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e78b31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e78828b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e78828988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e788277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0zww17y                        0x00005569c7ab763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3e78d1d460 __libc_start_main + 245\n6    tmpx0zww17y                        0x00005569c7ab7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    max_product_so_far = 1\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmptlkik5qp/tmptlkik5qp.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2bad8c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2bad5bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2bad5bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2bad5bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptlkik5qp                        0x000056424833b80c <unavailable> + 6156\n5    libc.so.6                          0x00002b2badab2460 __libc_start_main + 245\n6    tmptlkik5qp                        0x000056424833b459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp8hmj1912/tmp8hmj1912.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b355dbfdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b355d8f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b355d8f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b355d8f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8hmj1912                        0x0000557335a0563c <unavailable> + 5692\n5    libc.so.6                          0x00002b355dde9460 __libc_start_main + 245\n6    tmp8hmj1912                        0x0000557335a05289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_so_far = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpwk53k6mj/tmpwk53k6mj.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1f54975c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1f5466cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1f5466c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1f5466b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwk53k6mj                        0x0000555c9f0cb63c <unavailable> + 5692\n5    libc.so.6                          0x00002b1f54b61460 __libc_start_main + 245\n6    tmpwk53k6mj                        0x0000555c9f0cb289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var currentProduct = 1\n    var currentMax = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > currentMax {\n            currentMax = arr[i]\n            currentProduct = currentProduct * arr[i]\n            maxProduct = max(maxProduct, currentProduct)\n        } else {\n            currentProduct = currentProduct * arr[i]\n            maxProduct = max(maxProduct, currentProduct)\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmptjwv56hm/tmptjwv56hm.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b55ebe94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b55ebb8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b55ebb8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b55ebb8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptjwv56hm                        0x0000555c6d8d25ec <unavailable> + 5612\n5    libc.so.6                          0x00002b55ec080460 __libc_start_main + 245\n6    tmptjwv56hm                        0x0000555c6d8d2239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var previous_product = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            current_product = max(current_product * arr[i], 1)\n            previous_product *= arr[i]\n        } else if arr[i] == 0 {\n            current_product = 1\n            previous_product = 1\n        } else {\n            let temp = current_product\n            current_product = max(previous_product * arr[i], 1)\n            previous_product = temp * arr[i]\n        }\n        max_product = max(max_product, current_product)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpd2qzbc7l/tmpd2qzbc7l.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acef2809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acef2500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acef2500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acef24ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd2qzbc7l                        0x00005619b9fb55ec <unavailable> + 5612\n5    libc.so.6                          0x00002acef29f5460 __libc_start_main + 245\n6    tmpd2qzbc7l                        0x00005619b9fb5239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp457giy3i/tmp457giy3i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76c1cf8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76c19efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76c19ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76c19ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp457giy3i                        0x000055ea1660b63c <unavailable> + 5692\n5    libc.so.6                          0x00002b76c1ee4460 __libc_start_main + 245\n6    tmp457giy3i                        0x000055ea1660b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpoqz4zr50/tmpoqz4zr50.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4507a65c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b450775cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b450775c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b450775b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoqz4zr50                        0x0000563844fd063c <unavailable> + 5692\n5    libc.so.6                          0x00002b4507c51460 __libc_start_main + 245\n6    tmpoqz4zr50                        0x0000563844fd0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpozvngl_n/tmpozvngl_n.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b62ededfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b62edbd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b62edbd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62edbd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpozvngl_n                        0x0000558954fc463c <unavailable> + 5692\n5    libc.so.6                          0x00002b62ee0cb460 __libc_start_main + 245\n6    tmpozvngl_n                        0x0000558954fc4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vny57h3/tmp4vny57h3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36368d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36365c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36365c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36365c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vny57h3                        0x000055fe5d2b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3636abc460 __libc_start_main + 245\n6    tmp4vny57h3                        0x000055fe5d2b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_bqmiyn2/tmp_bqmiyn2.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dfbeaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dfbba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dfbba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dfbba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_bqmiyn2                        0x000055ec589bf63c <unavailable> + 5692\n5    libc.so.6                          0x00002b5dfc096460 __libc_start_main + 245\n6    tmp_bqmiyn2                        0x000055ec589bf289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpv4gw_suw/tmpv4gw_suw.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f1a132c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f19e29b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f19e29988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f19e287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv4gw_suw                        0x000056029d99863c <unavailable> + 5692\n5    libc.so.6                          0x00002b9f1a31e460 __libc_start_main + 245\n6    tmpv4gw_suw                        0x000056029d998289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_so_far = 0\n    var min_so_far = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max(max_so_far * arr[i], arr[i])\n            min_so_far = min(min_so_far * arr[i], arr[i])\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], arr[i])\n            min_so_far = min(temp * arr[i], arr[i])\n        }\n        max_product = max(max_product, max_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpr9av69e5/tmpr9av69e5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1275243c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1274f3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1274f3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1274f397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr9av69e5                        0x00005623da2e363c <unavailable> + 5692\n5    libc.so.6                          0x00002b127542f460 __libc_start_main + 245\n6    tmpr9av69e5                        0x00005623da2e3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    guard arr.count > 0 else { return 0 }\n    var max_product = arr[0]\n    var min_product = arr[0]\n    var max_so_far = arr[0]\n    \n    for i in 1..<arr.count {\n        if arr[i] < 0 {\n            let temp = max_product\n            max_product = max_product * arr[i]\n            min_product = min_product * arr[i]\n            max_product = max(max_product, min_product)\n            min_product = min(temp, min_product)\n        } else {\n            max_product = max_product * arr[i]\n            min_product = min_product * arr[i]\n        }\n        max_so_far = max(max_so_far, max_product)\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp7mgbz_7b/tmp7mgbz_7b.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad1f64ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad1f341b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad1f341988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad1f3407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7mgbz_7b                        0x000055ccb1c3463c <unavailable> + 5692\n5    libc.so.6                          0x00002aad1f836460 __libc_start_main + 245\n6    tmp7mgbz_7b                        0x000055ccb1c34289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_bqmiyn2/tmp_bqmiyn2.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dfbeaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dfbba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dfbba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dfbba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_bqmiyn2                        0x000055ec589bf63c <unavailable> + 5692\n5    libc.so.6                          0x00002b5dfc096460 __libc_start_main + 245\n6    tmp_bqmiyn2                        0x000055ec589bf289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxSoFar = 1\n    var minSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxSoFar = maxSoFar * arr[i]\n            minSoFar = min(minSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxSoFar = 1\n            minSoFar = 1\n        } else {\n            let temp = maxSoFar\n            maxSoFar = max(minSoFar * arr[i], 1)\n            minSoFar = temp * arr[i]\n        }\n        if maxProduct < maxSoFar {\n            maxProduct = maxSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpra9o4h90/tmpra9o4h90.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b034569bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0345392b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0345392988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03453917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpra9o4h90                        0x0000564dc198b63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0345887460 __libc_start_main + 245\n6    tmpra9o4h90                        0x0000564dc198b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if flag == 0 && max_so_far == 1 {\n        return 0\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp0kbrdj1p/tmp0kbrdj1p.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad090b1ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad090811b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad090811988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0908107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0kbrdj1p                        0x0000559ef862763c <unavailable> + 5692\n5    libc.so.6                          0x00002ad090d06460 __libc_start_main + 245\n6    tmp0kbrdj1p                        0x0000559ef8627289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductEndingHere = 1\n    var minProductEndingHere = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductEndingHere = maxProductEndingHere * arr[i]\n            minProductEndingHere = min(minProductEndingHere * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductEndingHere = 1\n            minProductEndingHere = 1\n        } else {\n            let temp = maxProductEndingHere\n            maxProductEndingHere = max(minProductEndingHere * arr[i], 1)\n            minProductEndingHere = temp * arr[i]\n        }\n        \n        if maxProduct < maxProductEndingHere {\n            maxProduct = maxProductEndingHere\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp9vct3jwt/tmp9vct3jwt.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4de1f83c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4de1c7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4de1c7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4de1c797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9vct3jwt                        0x000055d31990f63c <unavailable> + 5692\n5    libc.so.6                          0x00002b4de216f460 __libc_start_main + 245\n6    tmp9vct3jwt                        0x000055d31990f289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpgzs8r8io/tmpgzs8r8io.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71bfa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71bf6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71bf6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71bf6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgzs8r8io                        0x0000561b8832563c <unavailable> + 5692\n5    libc.so.6                          0x00002b71bfbf4460 __libc_start_main + 245\n6    tmpgzs8r8io                        0x0000561b88325289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_bqmiyn2/tmp_bqmiyn2.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dfbeaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dfbba1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dfbba1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dfbba07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_bqmiyn2                        0x000055ec589bf63c <unavailable> + 5692\n5    libc.so.6                          0x00002b5dfc096460 __libc_start_main + 245\n6    tmp_bqmiyn2                        0x000055ec589bf289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var product = 1\n    for i in 0..<arr.count {\n        product *= arr[i]\n        if product > max_product {\n            max_product = product\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpjo_p7w1q/tmpjo_p7w1q.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7409150c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7408e47b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7408e47988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7408e467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjo_p7w1q                        0x000055d6f152755c <unavailable> + 5468\n5    libc.so.6                          0x00002b740933c460 __libc_start_main + 245\n6    tmpjo_p7w1q                        0x000055d6f15271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        \n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpubro8tav/tmpubro8tav.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27d7522c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27d7219b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27d7219988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27d72187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpubro8tav                        0x0000559cc255f63c <unavailable> + 5692\n5    libc.so.6                          0x00002b27d770e460 __libc_start_main + 245\n6    tmpubro8tav                        0x0000559cc255f289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpecp2dtd_/tmpecp2dtd_.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1ac27dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1ac24d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1ac24d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1ac24d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpecp2dtd_                        0x00005577e62d463c <unavailable> + 5692\n5    libc.so.6                          0x00002b1ac29c8460 __libc_start_main + 245\n6    tmpecp2dtd_                        0x00005577e62d4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] > arr[j] {\n            product *= arr[i]\n            if product > max_product {\n                max_product = product\n            }\n        } else {\n            j = i\n            product = 1\n        }\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpd_vs53st/tmpd_vs53st.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae345e95c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae345b8cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae345b8c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae345b8b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd_vs53st                        0x000056180e51d3cc <unavailable> + 5068\n5    libc.so.6                          0x00002ae346081460 __libc_start_main + 245\n6    tmpd_vs53st                        0x000056180e51d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for num in arr {\n        if num > 0 {\n            max_product_so_far *= num\n            min_product_so_far = min(min_product_so_far * num, 1)\n        } else if num == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * num, 1)\n            min_product_so_far = temp * num\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpy1y6fyh9/tmpy1y6fyh9.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e0972ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e09425b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e09425988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e094247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy1y6fyh9                        0x0000562891d8857c <unavailable> + 5500\n5    libc.so.6                          0x00002b2e0991a460 __libc_start_main + 245\n6    tmpy1y6fyh9                        0x0000562891d881c9 <unavailable> + 4553\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var max = 1\n    var min = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else if arr[i] == 0 {\n            max = 1\n            min = 1\n        } else {\n            let temp = max\n            max = min * arr[i]\n            min = temp * arr[i]\n        }\n        if max > maxProduct {\n            maxProduct = max\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp_qc_ifrn/tmp_qc_ifrn.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab95ef74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab95ec6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab95ec6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab95ec6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_qc_ifrn                        0x00005640993d155c <unavailable> + 5468\n5    libc.so.6                          0x00002ab95f160460 __libc_start_main + 245\n6    tmp_qc_ifrn                        0x00005640993d11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp8hmj1912/tmp8hmj1912.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b355dbfdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b355d8f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b355d8f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b355d8f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8hmj1912                        0x0000557335a0563c <unavailable> + 5692\n5    libc.so.6                          0x00002b355dde9460 __libc_start_main + 245\n6    tmp8hmj1912                        0x0000557335a05289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var max = 1\n    var min = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else if arr[i] == 0 {\n            max = 1\n            min = 1\n        } else {\n            let temp = max\n            max = min * arr[i]\n            min = temp * arr[i]\n        }\n        if max > maxProduct {\n            maxProduct = max\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp_qc_ifrn/tmp_qc_ifrn.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab95ef74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab95ec6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab95ec6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab95ec6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_qc_ifrn                        0x00005640993d155c <unavailable> + 5468\n5    libc.so.6                          0x00002ab95f160460 __libc_start_main + 245\n6    tmp_qc_ifrn                        0x00005640993d11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpx0zww17y/tmpx0zww17y.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e78b31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e78828b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e78828988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e788277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0zww17y                        0x00005569c7ab763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3e78d1d460 __libc_start_main + 245\n6    tmpx0zww17y                        0x00005569c7ab7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpgl1gh2i3/tmpgl1gh2i3.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a19225c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a18f1cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a18f1c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a18f1b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgl1gh2i3                        0x0000562a7906863c <unavailable> + 5692\n5    libc.so.6                          0x00002b4a19411460 __libc_start_main + 245\n6    tmpgl1gh2i3                        0x0000562a79068289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] > arr[j] {\n            current_product *= arr[i]\n            if current_product > max_product {\n                max_product = current_product\n            }\n        } else {\n            j = i\n            current_product = 1\n        }\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpcwvzcrh0/tmpcwvzcrh0.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8b91decc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8b91ae3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8b91ae3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8b91ae27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcwvzcrh0                        0x00005566a05813cc <unavailable> + 5068\n5    libc.so.6                          0x00002b8b91fd8460 __libc_start_main + 245\n6    tmpcwvzcrh0                        0x00005566a0581019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_at_index = [Int](repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n        max_product_at_index[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_product_at_index[i] = max(max_product_at_index[i], max_product_at_index[j] * arr[i])\n            }\n        }\n        max_product = max(max_product, max_product_at_index[i])\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp4zf17sf8/tmp4zf17sf8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b882e8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b882e5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b882e5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b882e5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4zf17sf8                        0x0000562cc7fb36ac <unavailable> + 5804\n5    libc.so.6                          0x00002b882eab8460 __libc_start_main + 245\n6    tmp4zf17sf8                        0x0000562cc7fb32f9 <unavailable> + 4857\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpo5m2fkar/tmpo5m2fkar.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c57a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c5770bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c5770b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c5770a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo5m2fkar                        0x000055ab846bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0c57c00460 __libc_start_main + 245\n6    tmpo5m2fkar                        0x000055ab846bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp7y200azq/tmp7y200azq.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae50f55ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae50f255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae50f255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae50f2547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7y200azq                        0x000055e9bd3d763c <unavailable> + 5692\n5    libc.so.6                          0x00002ae50f74a460 __libc_start_main + 245\n6    tmp7y200azq                        0x000055e9bd3d7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = Int.min\n    var product = 1\n    var i = 0\n    while i < arr.count {\n        product *= arr[i]\n        if product > maxProduct {\n            maxProduct = product\n        }\n        if product == 0 {\n            product = 1\n        }\n        i += 1\n    }\n    product = 1\n    i = arr.count - 1\n    while i >= 0 {\n        product *= arr[i]\n        if product > maxProduct {\n            maxProduct = product\n        }\n        if product == 0 {\n            product = 1\n        }\n        i -= 1\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp4km6p1h4/tmp4km6p1h4.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae001ecfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae001bc6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae001bc6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae001bc57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4km6p1h4                        0x0000556cd0b843cc <unavailable> + 5068\n5    libc.so.6                          0x00002ae0020bb460 __libc_start_main + 245\n6    tmp4km6p1h4                        0x0000556cd0b84019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var max_element = arr[0]\n    for i in 0..<arr.count {\n        product = product * arr[i]\n        if max_element < arr[i] {\n            max_element = arr[i]\n        }\n        if product > max_product {\n            max_product = product\n        }\n        if product == 0 {\n            product = 1\n        }\n    }\n    if max_product == 1 {\n        return max_element\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp0yq5o4od/tmp0yq5o4od.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e40a7ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e40775b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e40775988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e407747b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0yq5o4od                        0x0000558bf883d55c <unavailable> + 5468\n5    libc.so.6                          0x00002b7e40c6a460 __libc_start_main + 245\n6    tmp0yq5o4od                        0x0000558bf883d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i\n            min_so_far = min(min_so_far * i, 1)\n        } else if i == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * i, 1)\n            min_so_far = temp * i\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpwvqv1ky9/tmpwvqv1ky9.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8ec3d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8ec0ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8ec0cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8ec0cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwvqv1ky9                        0x0000557d3ce9857c <unavailable> + 5500\n5    libc.so.6                          0x00002af8ec5c1460 __libc_start_main + 245\n6    tmpwvqv1ky9                        0x0000557d3ce981c9 <unavailable> + 4553\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    \n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpulrzk8i7/tmpulrzk8i7.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b751b47ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b751b175b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b751b175988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b751b1747b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulrzk8i7                        0x000056514311763c <unavailable> + 5692\n5    libc.so.6                          0x00002b751b66a460 __libc_start_main + 245\n6    tmpulrzk8i7                        0x0000565143117289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpz6kg7zgf/tmpz6kg7zgf.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2188799c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2188490b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2188490988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b218848f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz6kg7zgf                        0x0000559a1d1aa63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2188985460 __libc_start_main + 245\n6    tmpz6kg7zgf                        0x0000559a1d1aa289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    var max_element_so_far = arr[0]\n    var min_element_so_far = arr[0]\n    \n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpplqm_don/tmpplqm_don.swift:46: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d169c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d166b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d166b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d166b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplqm_don                        0x000055cfe4b5063c <unavailable> + 5692\n5    libc.so.6                          0x00002b1d16bae460 __libc_start_main + 245\n6    tmpplqm_don                        0x000055cfe4b50289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var last_max = arr[0]\n    var last_min = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            last_max = max(last_max * arr[i], arr[i])\n            last_min = min(last_min * arr[i], arr[i])\n        } else {\n            let temp = last_max\n            last_max = max(last_min * arr[i], arr[i])\n            last_min = min(temp * arr[i], arr[i])\n        }\n        max_product = max(max_product, last_max)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp0ni8lyq6/tmp0ni8lyq6.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b62ad58ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b62ad285b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b62ad285988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62ad2847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ni8lyq6                        0x0000560a7a35f63c <unavailable> + 5692\n5    libc.so.6                          0x00002b62ad77a460 __libc_start_main + 245\n6    tmp0ni8lyq6                        0x0000560a7a35f289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var previous_number = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > previous_number {\n            current_product *= arr[i]\n            if current_product > max_product {\n                max_product = current_product\n            }\n        } else {\n            current_product = 1\n        }\n        previous_number = arr[i]\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpqzgnu06m/tmpqzgnu06m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8448016c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8447d0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8447d0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8447d0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzgnu06m                        0x0000559eba9a955c <unavailable> + 5468\n5    libc.so.6                          0x00002b8448202460 __libc_start_main + 245\n6    tmpqzgnu06m                        0x0000559eba9a91a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpo5m2fkar/tmpo5m2fkar.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c57a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c5770bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c5770b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c5770a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo5m2fkar                        0x000055ab846bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0c57c00460 __libc_start_main + 245\n6    tmpo5m2fkar                        0x000055ab846bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] > arr[j] {\n            product *= arr[i]\n            if product > max_product {\n                max_product = product\n            }\n        } else {\n            product = 1\n            j = i\n        }\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp1eklok0g/tmp1eklok0g.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72c5d04c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72c59fbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72c59fb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72c59fa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1eklok0g                        0x00005574052d83cc <unavailable> + 5068\n5    libc.so.6                          0x00002b72c5ef0460 __libc_start_main + 245\n6    tmp1eklok0g                        0x00005574052d8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        max_so_far *= arr[i]\n        \n        if max_so_far == 0 {\n            max_so_far = 1\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    max_so_far = 1\n    \n    for i in (0..<arr.count).reversed() {\n        max_so_far *= arr[i]\n        \n        if max_so_far == 0 {\n            max_so_far = 1\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp7oxxfmnw/tmp7oxxfmnw.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7232df9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7232af0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7232af0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7232aef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oxxfmnw                        0x00005616834bf81c <unavailable> + 6172\n5    libc.so.6                          0x00002b7232fe5460 __libc_start_main + 245\n6    tmp7oxxfmnw                        0x00005616834bf469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxSoFar = 1\n    var minSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxSoFar = maxSoFar * arr[i]\n            minSoFar = min(minSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxSoFar = 1\n            minSoFar = 1\n        } else {\n            let temp = maxSoFar\n            maxSoFar = max(minSoFar * arr[i], 1)\n            minSoFar = temp * arr[i]\n        }\n        if maxProduct < maxSoFar {\n            maxProduct = maxSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpra9o4h90/tmpra9o4h90.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b034569bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0345392b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0345392988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03453917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpra9o4h90                        0x0000564dc198b63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0345887460 __libc_start_main + 245\n6    tmpra9o4h90                        0x0000564dc198b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var product = 1\n    for i in 0..<arr.count {\n        product *= arr[i]\n        if product > max_product {\n            max_product = product\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpjo_p7w1q/tmpjo_p7w1q.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7409150c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7408e47b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7408e47988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7408e467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjo_p7w1q                        0x000055d6f152755c <unavailable> + 5468\n5    libc.so.6                          0x00002b740933c460 __libc_start_main + 245\n6    tmpjo_p7w1q                        0x000055d6f15271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpro43nnre/tmpro43nnre.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5afc626c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5afc31db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5afc31d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5afc31c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpro43nnre                        0x0000555c97ec963c <unavailable> + 5692\n5    libc.so.6                          0x00002b5afc812460 __libc_start_main + 245\n6    tmpro43nnre                        0x0000555c97ec9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in arr {\n        if i > 0 {\n            max_product = max_product * i\n            min_product = min(min_product * i, 1)\n        } else if i == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * i, 1)\n            min_product = temp * i\n        }\n        max_so_far = max(max_so_far, max_product)\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpxuqzffmu/tmpxuqzffmu.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b94e79c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b94b70b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b94b70988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b94b6f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxuqzffmu                        0x000055b30737157c <unavailable> + 5500\n5    libc.so.6                          0x00002b6b95065460 __libc_start_main + 245\n6    tmpxuqzffmu                        0x000055b3073711c9 <unavailable> + 4553\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element_so_far = 1\n    var min_element_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmplqme19mf/tmplqme19mf.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af63e0a5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af63dd9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af63dd9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af63dd9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqme19mf                        0x000055c43d56763c <unavailable> + 5692\n5    libc.so.6                          0x00002af63e291460 __libc_start_main + 245\n6    tmplqme19mf                        0x000055c43d567289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_so_far = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    if flag == 0 && max_so_far == 1 {\n        return 0\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp9em_mm1k/tmp9em_mm1k.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acfb7108c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acfb6dffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acfb6dff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acfb6dfe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9em_mm1k                        0x000055f7953f563c <unavailable> + 5692\n5    libc.so.6                          0x00002acfb72f4460 __libc_start_main + 245\n6    tmp9em_mm1k                        0x000055f7953f5289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpz6kg7zgf/tmpz6kg7zgf.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2188799c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2188490b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2188490988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b218848f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz6kg7zgf                        0x0000559a1d1aa63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2188985460 __libc_start_main + 245\n6    tmpz6kg7zgf                        0x0000559a1d1aa289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var maxSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        if maxSoFar < maxProduct {\n            maxSoFar = maxProduct\n        }\n    }\n    return maxSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpy1uax_mt/tmpy1uax_mt.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afac0bd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afac08ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afac08ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afac08cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy1uax_mt                        0x000055d19cf5763c <unavailable> + 5692\n5    libc.so.6                          0x00002afac0dc3460 __libc_start_main + 245\n6    tmpy1uax_mt                        0x000055d19cf57289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        max_product = max(max_product, max_product_so_far)\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n    }\n    max_product_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_product_so_far *= arr[i]\n        max_product = max(max_product, max_product_so_far)\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpqrjhfksk/tmpqrjhfksk.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8142b95c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b814288cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b814288c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b814288b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqrjhfksk                        0x00005581eb2e78ac <unavailable> + 6316\n5    libc.so.6                          0x00002b8142d81460 __libc_start_main + 245\n6    tmpqrjhfksk                        0x00005581eb2e74f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp2x1kzhls/tmp2x1kzhls.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bb0ab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bb07a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bb07a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bb07a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2x1kzhls                        0x000056365d0b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3bb0c9c460 __libc_start_main + 245\n6    tmp2x1kzhls                        0x000056365d0b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var current_max = arr[0]\n    var current_min = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            current_max = max(arr[i], current_max * arr[i])\n            current_min = min(arr[i], current_min * arr[i])\n        } else {\n            let temp = current_max\n            current_max = max(arr[i], current_min * arr[i])\n            current_min = min(arr[i], temp * arr[i])\n        }\n        max_product = max(max_product, current_max)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmphqin58it/tmphqin58it.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a2bc74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a2b96bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a2b96b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a2b96a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphqin58it                        0x000056070e7a063c <unavailable> + 5692\n5    libc.so.6                          0x00002b4a2be60460 __libc_start_main + 245\n6    tmphqin58it                        0x000056070e7a0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpd9e617o1/tmpd9e617o1.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbd441ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbd4115b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbd4115988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbd41147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd9e617o1                        0x00005616dc0b963c <unavailable> + 5692\n5    libc.so.6                          0x00002adbd460a460 __libc_start_main + 245\n6    tmpd9e617o1                        0x00005616dc0b9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    for i in 0..<arr.count {\n        current_product *= arr[i]\n        if current_product > max_product {\n            max_product = current_product\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmppk5h3va3/tmppk5h3va3.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1804918c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b180460fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b180460f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b180460e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppk5h3va3                        0x000056507ac0155c <unavailable> + 5468\n5    libc.so.6                          0x00002b1804b04460 __libc_start_main + 245\n6    tmppk5h3va3                        0x000056507ac011a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    var j = 0\n    while j < arr.count {\n        if arr[j] > arr[i] {\n            product *= arr[j]\n            j += 1\n        } else {\n            max_product = max(max_product, product)\n            product = 1\n            i = j\n            j += 1\n        }\n    }\n    return max(max_product, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmp6y4g5bwy/tmp6y4g5bwy.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3ae9ec4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3ae9bbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3ae9bbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3ae9bba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6y4g5bwy                        0x000055f799a2a45c <unavailable> + 5212\n5    libc.so.6                          0x00002b3aea0b0460 __libc_start_main + 245\n6    tmp6y4g5bwy                        0x000055f799a2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        \n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp9lqq2qnj/tmp9lqq2qnj.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68851fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6884ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6884ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6884ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9lqq2qnj                        0x0000557e450f463c <unavailable> + 5692\n5    libc.so.6                          0x00002b68853ea460 __libc_start_main + 245\n6    tmp9lqq2qnj                        0x0000557e450f4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var maxElement = arr[0]\n    var minElement = arr[0]\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = max(maxProductSoFar * arr[i], arr[i])\n            minProductSoFar = min(minProductSoFar * arr[i], arr[i])\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], arr[i])\n            minProductSoFar = min(temp * arr[i], arr[i])\n        }\n        \n        maxProduct = max(maxProduct, maxProductSoFar)\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmph2svkcvp/tmph2svkcvp.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df3976c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df366db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df366d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df366c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph2svkcvp                        0x000055a186a5663c <unavailable> + 5692\n5    libc.so.6                          0x00002b6df3b62460 __libc_start_main + 245\n6    tmph2svkcvp                        0x000055a186a56289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        \n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    \n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "tmp9lqq2qnj/tmp9lqq2qnj.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68851fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6884ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6884ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6884ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9lqq2qnj                        0x0000557e450f463c <unavailable> + 5692\n5    libc.so.6                          0x00002b68853ea460 __libc_start_main + 245\n6    tmp9lqq2qnj                        0x0000557e450f4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_so_far = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpkur98gkt/tmpkur98gkt.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeaf2b20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeaf2817b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeaf2817988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeaf28167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkur98gkt                        0x0000559d9f1c963c <unavailable> + 5692\n5    libc.so.6                          0x00002aeaf2d0c460 __libc_start_main + 245\n6    tmpkur98gkt                        0x0000559d9f1c9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    guard arr.count > 1 else { return arr.first ?? 0 }\n    var maxProduct = Int.min\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for num in arr {\n        if num < 0 {\n            let temp = maxProductSoFar\n            maxProductSoFar = minProductSoFar\n            minProductSoFar = temp\n        }\n        maxProductSoFar = max(maxProductSoFar * num, num)\n        minProductSoFar = min(minProductSoFar * num, num)\n        maxProduct = max(maxProduct, maxProductSoFar)\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "tmpoet6mjdj/tmpoet6mjdj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b020b41fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b020b116b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b020b116988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b020b1157b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoet6mjdj                        0x0000564b10b8962c <unavailable> + 5676\n5    libc.so.6                          0x00002b020b60b460 __libc_start_main + 245\n6    tmpoet6mjdj                        0x0000564b10b89279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_k4yo8vf/tmp_k4yo8vf.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17a507dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17a4d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17a4d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17a4d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_k4yo8vf                        0x0000555dd67f963c <unavailable> + 5692\n5    libc.so.6                          0x00002b17a5269460 __libc_start_main + 245\n6    tmp_k4yo8vf                        0x0000555dd67f9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}