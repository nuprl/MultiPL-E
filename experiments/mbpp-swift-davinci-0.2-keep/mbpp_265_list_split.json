{
  "name": "mbpp_265_list_split",
  "language": "swift",
  "prompt": "\n/// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nfunc list_split(S: AnyHashable, step: Int) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(list_split(S: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], step: 3) == [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])\nassert(list_split(S: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], step: 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])\nassert(list_split(S: [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], step: 2) == [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        temp.append(i)\n        count += 1\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n    }\n    if count != 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        temp.append(i)\n        count += 1\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var temp: [AnyHashable] = []\n    var i = 0\n    for item in S {\n        temp.append(item)\n        i += 1\n        if i == step {\n            result.append(temp)\n            temp = []\n            i = 0\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    let list = S as! [AnyHashable]\n    var result = [[AnyHashable]]()\n    var i = 0\n    var j = 0\n    while i < list.count {\n        if j == step {\n            j = 0\n            result.append([AnyHashable]())\n        }\n        result[result.count - 1].append(list[i])\n        i += 1\n        j += 1\n    }\n    return result",
    "    var result: AnyHashable = []\n    var i = 0\n    for item in S {\n        if i % step == 0 {\n            result.append([])\n        }\n        result[result.count - 1].append(item)\n        i += 1\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var temp: [AnyHashable] = []\n    var i = 0\n    for item in S {\n        if i == step {\n            result.append(temp)\n            temp = []\n            i = 0\n        }\n        temp.append(item)\n        i += 1\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i % step == 0 && i != 0 {\n            result.append(temp)\n            temp = [AnyHashable]()\n        }\n        temp.append(item)\n        i += 1\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n        temp.append(i)\n        count += 1\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result: AnyHashable = []\n    var temp: AnyHashable = []\n    var index = 0\n    for i in S {\n        if index % step == 0 && index != 0 {\n            result.append(temp)\n            temp = []\n        }\n        temp.append(i)\n        index += 1\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    for (index, item) in (S as! [AnyHashable]).enumerated() {\n        if index % step == 0 && index != 0 {\n            result.append(temp)\n            temp = [AnyHashable]()\n        }\n        temp.append(item)\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    if let list = S as? [AnyHashable] {\n        for (index, item) in list.enumerated() {\n            temp.append(item)\n            if index % step == step - 1 {\n                result.append(temp)\n                temp = [AnyHashable]()\n            }\n        }\n        if temp.count > 0 {\n            result.append(temp)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var temp: [AnyHashable] = []\n    var count = 0\n    for i in S {\n        temp.append(i)\n        count += 1\n        if count == step {\n            result.append(temp)\n            temp = []\n            count = 0\n        }\n    }\n    if count != 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        temp.append(i)\n        count += 1\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n    }\n    if count != 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result: AnyHashable = [AnyHashable]()\n    var temp: AnyHashable = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            i = 0\n        }\n        temp.append(item)\n        i += 1\n    }\n    result.append(temp)\n    return result",
    "    let list = S as! [AnyHashable]\n    var result = [[AnyHashable]]()\n    var temp = [AnyHashable]()\n    for (index, element) in list.enumerated() {\n        temp.append(element)\n        if (index + 1) % step == 0 {\n            result.append(temp)\n            temp = [AnyHashable]()\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            i = 0\n        }\n        temp.append(item)\n        i += 1\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n        temp.append(i)\n        count += 1\n    }\n    result.append(temp)\n    return result",
    "    var result: AnyHashable = [AnyHashable]()\n    var temp: AnyHashable = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            i = 0\n        }\n        temp.append(item)\n        i += 1\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i < step {\n            temp.append(item)\n            i += 1\n        } else {\n            result.append(temp)\n            temp = [AnyHashable]()\n            i = 0\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        temp.append(i)\n        count += 1\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n    }\n    if count != 0 {\n        result.append(temp)\n    }\n    return result"
  ]
}