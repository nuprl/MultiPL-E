{
  "name": "mbpp_407_rearrange_bigger",
  "language": "swift",
  "prompt": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    let sortedDigits = digits.sorted()\n    let reversedDigits = digits.reversed()\n    var nextBigger = 0\n    var i = 0\n    while i < digits.count {\n        if digits[i] != sortedDigits[i] {\n            nextBigger = digits[i]\n            break\n        }\n        i += 1\n    }\n    if nextBigger == 0 {\n        return -1\n    }\n    var j = 0\n    while j < digits.count {\n        if digits[j] == nextBigger {\n            break\n        }\n        j += 1\n    }\n    var k = 0\n    while k < digits.count {\n        if reversedDigits[k] > nextBigger {\n            break\n        }\n        k += 1\n    }\n    var newDigits = digits\n    newDigits[j] = reversedDigits[k]\n    newDigits[k] = nextBigger\n    newDigits.remove(at: k)\n    newDigits.remove(at: j)\n    newDigits.append(contentsOf: newDigits.sorted())\n    var newNumber = 0\n    for i in 0..<newDigits.count {\n        newNumber = newNumber * 10 + newDigits[i]\n    }\n    return newNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpdr9tnnvf.swift:59:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdr9tnnvf.swift:60:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdr9tnnvf.swift:61:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpdr9tnnvf.swift:28:27: error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n        if reversedDigits[k] > nextBigger {\n                          ^\n/tmp/tmpdr9tnnvf.swift:34:35: error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n    newDigits[j] = reversedDigits[k]\n                                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpgpcma8w0.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgpcma8w0.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgpcma8w0.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp8zs_51jw.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8zs_51jw.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8zs_51jw.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    let c = Array(s)\n    var i = c.count - 1\n    while i > 0 && c[i - 1] >= c[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[j] <= c[i - 1] {\n        j -= 1\n    }\n    var c = c\n    c.swapAt(i - 1, j)\n    c = c.suffix(from: i).sorted()\n    let x = String(c)\n    return Int(x)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmppzw8i_zd.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmppzw8i_zd.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmppzw8i_zd.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmppzw8i_zd.swift:17:9: error: invalid redeclaration of 'c'\n    var c = c\n        ^\n/tmp/tmppzw8i_zd.swift:5:9: note: 'c' previously declared here\n    let c = Array(s)\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = n.digits\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpyqk7zx8c.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpyqk7zx8c.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpyqk7zx8c.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpyqk7zx8c.swift:4:20: error: value of type 'Int' has no member 'digits'\n    let digits = n.digits\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted()\n    var result = 0\n    var i = 0\n    for d in sorted {\n        result += d * Int(pow(10, Double(i)))\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpk5eydnlo.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpk5eydnlo.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpk5eydnlo.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpk5eydnlo.swift:9:27: error: cannot find 'pow' in scope\n        result += d * Int(pow(10, Double(i)))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.map { String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpuv_w4uez.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpuv_w4uez.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpuv_w4uez.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpuv_w4uez.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpuv_w4uez.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpuv_w4uez.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpuv_w4uez.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpuv_w4uez.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpuv_w4uez.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpuv_w4uez.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpuv_w4uez.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = n.digits\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpo6dmqw2x.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo6dmqw2x.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo6dmqw2x.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo6dmqw2x.swift:4:20: error: value of type 'Int' has no member 'digits'\n    let digits = n.digits\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpztnul2ff.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpztnul2ff.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpztnul2ff.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpbuxom0wk.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbuxom0wk.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbuxom0wk.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpf784t3ni.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpf784t3ni.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpf784t3ni.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpf784t3ni.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i-1] = digits[j]\n    ~~~~~~^\n/tmp/tmpf784t3ni.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpf784t3ni.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpf784t3ni.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpf784t3ni.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpf784t3ni.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpf784t3ni.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpf784t3ni.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpb94b9v73.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpb94b9v73.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpb94b9v73.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpb94b9v73.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).compactMap { Int(String($0)) }\n    let sortedDigits = digits.sorted(by: >)\n    let sortedDigitsString = sortedDigits.map { String($0) }.joined()\n    let sortedNumber = Int(sortedDigitsString) ?? 0\n    if sortedNumber == n {\n        return \"Not possible\"\n    }\n    return sortedNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmp718uui1o.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp718uui1o.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp718uui1o.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpaayo2828.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpaayo2828.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpaayo2828.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpaayo2828.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpjw7ikxsr.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjw7ikxsr.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjw7ikxsr.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result > n ? result : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpqoyonsjc.swift:23:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpqoyonsjc.swift:24:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpqoyonsjc.swift:25:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    var result = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    for i in 0..<digits.count - 1 {\n        if digits[i] < digits[i + 1] {\n            let temp = digits[i]\n            digits[i] = digits[i + 1]\n            digits[i + 1] = temp\n            break\n        }\n    }\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpjn4r3bj6.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjn4r3bj6.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjn4r3bj6.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    if digits == sorted {\n        return -1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        if digits[i] != sorted[i] {\n            let index = sorted.index(of: digits[i])!\n            let temp = sorted[i]\n            sorted[i] = sorted[index]\n            sorted[index] = temp\n            break\n        }\n    }\n    for i in 0..<sorted.count {\n        result = result * 10 + sorted[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpeqlhx4n2.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpeqlhx4n2.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpeqlhx4n2.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpeqlhx4n2.swift:12:32: warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n            let index = sorted.index(of: digits[i])!\n                               ^\n/tmp/tmpeqlhx4n2.swift:12:32: note: use 'firstIndex(of:)' instead\n            let index = sorted.index(of: digits[i])!\n                               ^~~~~\n                               firstIndex\n/tmp/tmpeqlhx4n2.swift:14:19: error: cannot assign through subscript: 'sorted' is a 'let' constant\n            sorted[i] = sorted[index]\n            ~~~~~~^\n/tmp/tmpeqlhx4n2.swift:5:5: note: change 'let' to 'var' to make it mutable\n    let sorted = digits.sorted(by: >)\n    ^~~\n    var\n/tmp/tmpeqlhx4n2.swift:15:19: error: cannot assign through subscript: 'sorted' is a 'let' constant\n            sorted[index] = temp\n            ~~~~~~^\n/tmp/tmpeqlhx4n2.swift:5:5: note: change 'let' to 'var' to make it mutable\n    let sorted = digits.sorted(by: >)\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sortedDigits = digits.sorted()\n    let reversedDigits = digits.reversed()\n    var result = 0\n    for i in 0..<digits.count {\n        result += reversedDigits[i] * Int(pow(10, Double(i)))\n    }\n    if result > n {\n        return result\n    }\n    for i in 0..<digits.count {\n        result += sortedDigits[i] * Int(pow(10, Double(i)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp7ar4cc0a.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp7ar4cc0a.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp7ar4cc0a.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp7ar4cc0a.swift:9:43: error: cannot find 'pow' in scope\n        result += reversedDigits[i] * Int(pow(10, Double(i)))\n                                          ^~~\n/tmp/tmp7ar4cc0a.swift:9:34: error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n        result += reversedDigits[i] * Int(pow(10, Double(i)))\n                                 ^\n/tmp/tmp7ar4cc0a.swift:15:41: error: cannot find 'pow' in scope\n        result += sortedDigits[i] * Int(pow(10, Double(i)))\n                                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result > n ? result : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpocig3c0k.swift:23:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpocig3c0k.swift:24:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpocig3c0k.swift:25:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits = digits.reversed()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp6b0s27k0.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp6b0s27k0.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp6b0s27k0.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmphc5ki83z.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmphc5ki83z.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmphc5ki83z.swift:46:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmphc5ki83z.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmphc5ki83z.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphc5ki83z.swift:19:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmphc5ki83z.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphc5ki83z.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmphc5ki83z.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphc5ki83z.swift:24:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmphc5ki83z.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let n_str = String(n)\n    let n_arr = Array(n_str)\n    var n_arr_int = n_arr.map { Int(String($0))! }\n    var i = n_arr_int.count - 1\n    while i > 0 && n_arr_int[i - 1] >= n_arr_int[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = n_arr_int.count - 1\n    while n_arr_int[j] <= n_arr_int[i - 1] {\n        j -= 1\n    }\n    n_arr_int.swapAt(i - 1, j)\n    j = n_arr_int.count - 1\n    while i < j {\n        n_arr_int.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return n_arr_int.map { String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmp3tw3o0f9.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3tw3o0f9.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3tw3o0f9.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    digits.reverse()\n    let len = digits.count\n    var i = len - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = len - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = len - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpnw565erf.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnw565erf.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnw565erf.swift:56:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp1bghfjee.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1bghfjee.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1bghfjee.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1bghfjee.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    \n    if i <= 0 {\n        return -1\n    }\n    \n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    \n    digits.swapAt(i - 1, j)\n    \n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    \n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmp6mgmq1sa.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp6mgmq1sa.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp6mgmq1sa.swift:56:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).compactMap { Int(String($0)) }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map(String.init).joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpqr_1k10p.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpqr_1k10p.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpqr_1k10p.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpqr_1k10p.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpqr_1k10p.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).compactMap { Int(String($0)) }\n    ^~~\n    var\n/tmp/tmpqr_1k10p.swift:19:16: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n        digits.swapAt(i, j)\n        ~~~~~~ ^\n/tmp/tmpqr_1k10p.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).compactMap { Int(String($0)) }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpi8pibjm8.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi8pibjm8.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi8pibjm8.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpi8pibjm8.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpgq_1o0eh.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgq_1o0eh.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgq_1o0eh.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpgq_1o0eh.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmpgq_1o0eh.swift:4:9: note: 'digits' previously declared here\n    let digits = Array(String(n)).map { Int(String($0))! }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    if sorted == digits { return -1 }\n    var result = 0\n    for i in 0..<digits.count {\n        result += sorted[i] * Int(pow(10.0, Double(digits.count - i - 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpsw10z_ln.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsw10z_ln.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsw10z_ln.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpsw10z_ln.swift:9:35: error: cannot find 'pow' in scope\n        result += sorted[i] * Int(pow(10.0, Double(digits.count - i - 1)))\n                                  ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let n_str = String(n)\n    let n_arr = Array(n_str)\n    var n_arr_int = n_arr.map { Int(String($0))! }\n    var i = n_arr_int.count - 1\n    while i > 0 && n_arr_int[i] <= n_arr_int[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = n_arr_int.count - 1\n    while n_arr_int[j] <= n_arr_int[i - 1] {\n        j -= 1\n    }\n    let temp = n_arr_int[i - 1]\n    n_arr_int[i - 1] = n_arr_int[j]\n    n_arr_int[j] = temp\n    var k = n_arr_int.count - 1\n    while i < k {\n        let temp = n_arr_int[i]\n        n_arr_int[i] = n_arr_int[k]\n        n_arr_int[k] = temp\n        i += 1\n        k -= 1\n    }\n    return n_arr_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpn1w_b0vu.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn1w_b0vu.swift:46:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn1w_b0vu.swift:47:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let n_str = String(n)\n    let n_str_arr = Array(n_str)\n    let n_str_arr_sorted = n_str_arr.sorted()\n    let n_str_arr_sorted_str = String(n_str_arr_sorted)\n    let n_str_arr_sorted_str_int = Int(n_str_arr_sorted_str)!\n    if n_str_arr_sorted_str_int > n {\n        return n_str_arr_sorted_str_int\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpbi_pzeg2.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbi_pzeg2.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbi_pzeg2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsa9__nim.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsa9__nim.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsa9__nim.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpsa9__nim.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpsa9__nim.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpsa9__nim.swift:17:18: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits[i...].reverse()\n    ~~~~~~       ^\n/tmp/tmpsa9__nim.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpgo3_9y3s.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgo3_9y3s.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgo3_9y3s.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpgo3_9y3s.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpu3vym6zy.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu3vym6zy.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu3vym6zy.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let str = String(n)\n    var arr = [Int]()\n    for c in str {\n        arr.append(Int(String(c))!)\n    }\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    let temp = arr[i - 1]\n    arr[i - 1] = arr[j]\n    arr[j] = temp\n    j = arr.count - 1\n    while i < j {\n        let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = \"\"\n    for i in 0..<arr.count {\n        result += String(arr[i])\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpn0olspi0.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn0olspi0.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn0olspi0.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpa5a17dp9.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpa5a17dp9.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpa5a17dp9.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpyrzede2q.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpyrzede2q.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpyrzede2q.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpspgmuojb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpspgmuojb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpspgmuojb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).compactMap { $0.wholeNumberValue }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmp39y_tu1l.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp39y_tu1l.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp39y_tu1l.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp39y_tu1l.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmp39y_tu1l.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).compactMap { $0.wholeNumberValue }\n    ^~~\n    var\n/tmp/tmp39y_tu1l.swift:19:16: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n        digits.swapAt(i, j)\n        ~~~~~~ ^\n/tmp/tmp39y_tu1l.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).compactMap { $0.wholeNumberValue }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let arr = Array(String(n)).map { Int(String($0))! }\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return arr.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp5nxx0bsl.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp5nxx0bsl.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp5nxx0bsl.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp5nxx0bsl.swift:16:9: error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n    arr.swapAt(i - 1, j)\n    ~~~ ^\n/tmp/tmp5nxx0bsl.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp5nxx0bsl.swift:19:13: error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n        arr.swapAt(i, j)\n        ~~~ ^\n/tmp/tmp5nxx0bsl.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplwjb69yc.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmplwjb69yc.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmplwjb69yc.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpec4ail7r.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpec4ail7r.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpec4ail7r.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let arr = Array(String(n))\n    let count = arr.count\n    var i = count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    var temp = arr[i - 1]\n    arr[i - 1] = arr[j]\n    arr[j] = temp\n    j = count - 1\n    while i < j {\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpk8akzfc5.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpk8akzfc5.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpk8akzfc5.swift:46:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpk8akzfc5.swift:18:8: error: cannot assign through subscript: 'arr' is a 'let' constant\n    arr[i - 1] = arr[j]\n    ~~~^\n/tmp/tmpk8akzfc5.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n/tmp/tmpk8akzfc5.swift:19:8: error: cannot assign through subscript: 'arr' is a 'let' constant\n    arr[j] = temp\n    ~~~^\n/tmp/tmpk8akzfc5.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n/tmp/tmpk8akzfc5.swift:23:12: error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[i] = arr[j]\n        ~~~^\n/tmp/tmpk8akzfc5.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n/tmp/tmpk8akzfc5.swift:24:12: error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[j] = temp\n        ~~~^\n/tmp/tmpk8akzfc5.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i] <= digits[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmp17zrhag5.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp17zrhag5.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp17zrhag5.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpc8pntyg8.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpc8pntyg8.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpc8pntyg8.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpc8pntyg8.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpc8pntyg8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpc8pntyg8.swift:19:16: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n        digits.swapAt(i, j)\n        ~~~~~~ ^\n/tmp/tmpc8pntyg8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    let c = s.characters\n    var i = c.count - 1\n    while i > 0 && c[c.index(c.startIndex, offsetBy: i - 1)] >= c[c.index(c.startIndex, offsetBy: i)] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[c.index(c.startIndex, offsetBy: j)] <= c[c.index(c.startIndex, offsetBy: i - 1)] {\n        j -= 1\n    }\n    var c = Array(c)\n    c.swapAt(i - 1, j)\n    c = c.suffix(from: i).sorted()\n    let s = String(c)\n    return Int(s)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp102mpoui.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp102mpoui.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp102mpoui.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp102mpoui.swift:5:15: error: 'characters' is unavailable: Please use String directly\n    let c = s.characters\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp102mpoui.swift:17:9: error: invalid redeclaration of 'c'\n    var c = Array(c)\n        ^\n/tmp/tmp102mpoui.swift:5:9: note: 'c' previously declared here\n    let c = s.characters\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpk94sqo4e.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpk94sqo4e.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpk94sqo4e.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpk94sqo4e.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpk94sqo4e.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpk94sqo4e.swift:17:18: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits[i...].sort()\n    ~~~~~~       ^\n/tmp/tmpk94sqo4e.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpxrcql57c.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpxrcql57c.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpxrcql57c.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    let sorted = digits.sorted()\n    let reversed = sorted.reversed()\n    let min = reversed.first!\n    let max = reversed.last!\n    let index = digits.index(of: max)!\n    let index2 = digits.index(of: min)!\n    var newDigits = digits\n    newDigits[index] = min\n    newDigits[index2] = max\n    let newNumber = newDigits.reduce(0) { $0 * 10 + $1 }\n    return newNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp4zm0urtd.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp4zm0urtd.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp4zm0urtd.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp4zm0urtd.swift:9:24: warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let index = digits.index(of: max)!\n                       ^\n/tmp/tmp4zm0urtd.swift:9:24: note: use 'firstIndex(of:)' instead\n    let index = digits.index(of: max)!\n                       ^~~~~\n                       firstIndex\n/tmp/tmp4zm0urtd.swift:10:25: warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let index2 = digits.index(of: min)!\n                        ^\n/tmp/tmp4zm0urtd.swift:10:25: note: use 'firstIndex(of:)' instead\n    let index2 = digits.index(of: min)!\n                        ^~~~~\n                        firstIndex\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmphxu7kp1w.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmphxu7kp1w.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmphxu7kp1w.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    \n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    \n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    \n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp1ngkuldi.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1ngkuldi.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1ngkuldi.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp1bghfjee.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1bghfjee.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1bghfjee.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1bghfjee.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "/tmp/tmpyrzede2q.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpyrzede2q.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpyrzede2q.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let n_str = String(n)\n    var n_arr = Array(n_str)\n    var i = n_arr.count - 1\n    while i > 0 && n_arr[i - 1] >= n_arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = n_arr.count - 1\n    while n_arr[j] <= n_arr[i - 1] {\n        j -= 1\n    }\n    n_arr.swapAt(i - 1, j)\n    j = n_arr.count - 1\n    while i < j {\n        n_arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(n_arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpqfef76e9.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpqfef76e9.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpqfef76e9.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpu_rp8ftj.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu_rp8ftj.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu_rp8ftj.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpu_rp8ftj.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpi8pibjm8.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi8pibjm8.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi8pibjm8.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpi8pibjm8.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsr87y20b.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsr87y20b.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsr87y20b.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpb94b9v73.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpb94b9v73.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpb94b9v73.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpb94b9v73.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpbvvyxe51.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbvvyxe51.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbvvyxe51.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpbvvyxe51.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpbvvyxe51.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpbvvyxe51.swift:19:16: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n        digits.swapAt(i, j)\n        ~~~~~~ ^\n/tmp/tmpbvvyxe51.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map(String.init).joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpylltlfhb.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpylltlfhb.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpylltlfhb.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpoczs0x4k.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpoczs0x4k.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpoczs0x4k.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpz1eiaqr8.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpz1eiaqr8.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpz1eiaqr8.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num = 0\n    for i in 0..<digits.count {\n        num = num * 10 + digits[i]\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpakoj5tsj.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpakoj5tsj.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpakoj5tsj.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpnblnfz4b.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnblnfz4b.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnblnfz4b.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    var i = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n        i += 1\n    }\n    var j = i - 1\n    while j > 0 {\n        if digits[j - 1] < digits[j] {\n            let tmp = digits[j - 1]\n            digits[j - 1] = digits[j]\n            digits[j] = tmp\n            break\n        }\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpjntmsw9f.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjntmsw9f.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjntmsw9f.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp1bghfjee.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1bghfjee.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1bghfjee.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1bghfjee.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp3e4evl6x.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3e4evl6x.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3e4evl6x.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpjhn9vyid.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjhn9vyid.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjhn9vyid.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpjhn9vyid.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmphollx1re.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmphollx1re.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmphollx1re.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmphollx1re.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphollx1re.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphollx1re.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphollx1re.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).compactMap { Int(String($0)) }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpth4sytmo.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpth4sytmo.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpth4sytmo.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpth4sytmo.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmpth4sytmo.swift:4:9: note: 'digits' previously declared here\n    let digits = String(n).compactMap { Int(String($0)) }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let arr = Array(String(n))\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    swap(&arr[i - 1], &arr[j])\n    var k = arr.count - 1\n    while i < k {\n        swap(&arr[i], &arr[k])\n        i += 1\n        k -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpt_zou7rg.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpt_zou7rg.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpt_zou7rg.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpt_zou7rg.swift:16:10: error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n    swap(&arr[i - 1], &arr[j])\n         ^~~~\n/tmp/tmpt_zou7rg.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n/tmp/tmpt_zou7rg.swift:16:23: error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n    swap(&arr[i - 1], &arr[j])\n                      ^~~~\n/tmp/tmpt_zou7rg.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n/tmp/tmpt_zou7rg.swift:19:14: error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n        swap(&arr[i], &arr[k])\n             ^~~~\n/tmp/tmpt_zou7rg.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n/tmp/tmpt_zou7rg.swift:19:23: error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n        swap(&arr[i], &arr[k])\n                      ^~~~\n/tmp/tmpt_zou7rg.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let arr = Array(String(n))\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n = n / 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpp296nes_.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp296nes_.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp296nes_.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).compactMap { Int(String($0)) }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpdrn_91nl.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdrn_91nl.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdrn_91nl.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpdrn_91nl.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpdrn_91nl.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).compactMap { Int(String($0)) }\n    ^~~\n    var\n/tmp/tmpdrn_91nl.swift:17:18: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits[i...].reverse()\n    ~~~~~~       ^\n/tmp/tmpdrn_91nl.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).compactMap { Int(String($0)) }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp1bghfjee.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1bghfjee.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1bghfjee.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1bghfjee.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpgo3_9y3s.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgo3_9y3s.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgo3_9y3s.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpgo3_9y3s.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0 ..< digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpp432_gv4.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp432_gv4.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp432_gv4.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 2\n    while i >= 0 && digits[i] >= digits[i + 1] {\n        i -= 1\n    }\n    if i < 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while j >= 0 && digits[j] <= digits[i] {\n        j -= 1\n    }\n    digits.swapAt(i, j)\n    digits[i + 1...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpbyu1h5my.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbyu1h5my.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbyu1h5my.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpbyu1h5my.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i, j)\n    ~~~~~~ ^\n/tmp/tmpbyu1h5my.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpbyu1h5my.swift:17:17: error: cannot convert value of type 'PartialRangeFrom<Int>' to expected argument type 'Int'\n    digits[i + 1...].reverse()\n                ^\n/tmp/tmpbyu1h5my.swift:17:22: error: value of type 'Int' has no member 'reverse'\n    digits[i + 1...].reverse()\n    ~~~~~~~~~~~~~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpkaosw8vo.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpkaosw8vo.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpkaosw8vo.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpspgmuojb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpspgmuojb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpspgmuojb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpnij3f6ro.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnij3f6ro.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnij3f6ro.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpnij3f6ro.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpnij3f6ro.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpnij3f6ro.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpnij3f6ro.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplwjb69yc.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmplwjb69yc.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmplwjb69yc.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpq1b5hnm_.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpq1b5hnm_.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpq1b5hnm_.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    for i in (0..<digits.count - 1).reversed() {\n        if digits[i] < digits[i + 1] {\n            let temp = digits[i]\n            digits[i] = digits[i + 1]\n            digits[i + 1] = temp\n            break\n        }\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp3dpkkd2j.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3dpkkd2j.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3dpkkd2j.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = String(n)\n    var i = n.count - 1\n    while i > 0 && n[i] <= n[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = n.count - 1\n    while n[j] <= n[i - 1] {\n        j -= 1\n    }\n    n.swapAt(i - 1, j)\n    n = String(n[0..<i] + n[i...].reversed())\n    return Int(n)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmpq3vhp3cn.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpq3vhp3cn.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpq3vhp3cn.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpq3vhp3cn.swift:6:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && n[i] <= n[i - 1] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq3vhp3cn.swift:6:28: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && n[i] <= n[i - 1] {\n                           ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq3vhp3cn.swift:13:11: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while n[j] <= n[i - 1] {\n          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq3vhp3cn.swift:13:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while n[j] <= n[i - 1] {\n                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq3vhp3cn.swift:16:7: error: value of type 'String' has no member 'swapAt'\n    n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp2ho7nri5.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp2ho7nri5.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp2ho7nri5.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    var i = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n        i += 1\n    }\n    var j = i - 1\n    while j > 0 && digits[j - 1] >= digits[j] {\n        j -= 1\n    }\n    if j == 0 {\n        return -1\n    }\n    var k = i - 1\n    while digits[j - 1] >= digits[k] {\n        k -= 1\n    }\n    let temp = digits[j - 1]\n    digits[j - 1] = digits[k]\n    digits[k] = temp\n    k = i - 1\n    while j < k {\n        let temp = digits[j]\n        digits[j] = digits[k]\n        digits[k] = temp\n        j += 1\n        k -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpx4jp250a.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx4jp250a.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx4jp250a.swift:56:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsr87y20b.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsr87y20b.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsr87y20b.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpdenvb5px.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdenvb5px.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdenvb5px.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    var result = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    for i in 0..<digits.count - 1 {\n        for j in i + 1..<digits.count {\n            if digits[i] < digits[j] {\n                let temp = digits[i]\n                digits[i] = digits[j]\n                digits[j] = temp\n                for k in 0..<digits.count {\n                    result = result * 10 + digits[k]\n                }\n                return result\n            }\n        }\n    }\n    return \"Not possible\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp_en93lsd.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp_en93lsd.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp_en93lsd.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp8y3zgxd0.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8y3zgxd0.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8y3zgxd0.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpi8pibjm8.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi8pibjm8.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi8pibjm8.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpi8pibjm8.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpi8pibjm8.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpi8pibjm8.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpjhn9vyid.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjhn9vyid.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjhn9vyid.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpjhn9vyid.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpkaosw8vo.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpkaosw8vo.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpkaosw8vo.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var nums = Array(String(n))\n    var i = nums.count - 1\n    while i > 0 && nums[i - 1] >= nums[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = nums.count - 1\n    while nums[j] <= nums[i - 1] {\n        j -= 1\n    }\n    nums.swapAt(i - 1, j)\n    j = nums.count - 1\n    while i < j {\n        nums.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(nums))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp5y055cqm.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp5y055cqm.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp5y055cqm.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp75uv90f2.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp75uv90f2.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp75uv90f2.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp75uv90f2.swift:23:23: error: no exact matches in call to instance method 'joined'\n    return Int(digits.joined())!\n                      ^\nSwift.Sequence:1:11: note: candidate requires that 'String.Element' (aka 'Character') conform to 'StringProtocol' (requirement specified as 'Self.Element' : 'StringProtocol')\nextension Sequence where Self.Element : StringProtocol {\n          ^\nSwift.BidirectionalCollection:1:11: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'String')\nextension BidirectionalCollection where Self.Element == String {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits = digits[0..<i] + digits[i...].reversed()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpb_5dvyy6.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpb_5dvyy6.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpb_5dvyy6.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpb_5dvyy6.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmpb_5dvyy6.swift:4:9: note: 'digits' previously declared here\n    let digits = Array(String(n)).map { Int(String($0))! }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpxrcql57c.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpxrcql57c.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpxrcql57c.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0 ..< digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpx09ckd22.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx09ckd22.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx09ckd22.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits: [Int] = []\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpehdu9kc7.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpehdu9kc7.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpehdu9kc7.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpb94b9v73.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpb94b9v73.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpb94b9v73.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpb94b9v73.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpb94b9v73.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpb94b9v73.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp4fd5lzsw.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp4fd5lzsw.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp4fd5lzsw.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 2\n    while i >= 0 && digits[i] >= digits[i + 1] {\n        i -= 1\n    }\n    if i < 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while j > i && digits[j] <= digits[i] {\n        j -= 1\n    }\n    let temp = digits[i]\n    digits[i] = digits[j]\n    digits[j] = temp\n    var k = i + 1\n    var l = digits.count - 1\n    while k < l {\n        let temp = digits[k]\n        digits[k] = digits[l]\n        digits[l] = temp\n        k += 1\n        l -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp5y2f_jl9.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp5y2f_jl9.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp5y2f_jl9.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let n_str = String(n)\n    let n_str_arr = Array(n_str)\n    var n_str_arr_sorted = n_str_arr.sorted()\n    var n_str_arr_sorted_reversed = n_str_arr_sorted.reversed()\n    let n_str_arr_sorted_reversed_str = String(n_str_arr_sorted_reversed)\n    let n_str_arr_sorted_reversed_str_int = Int(n_str_arr_sorted_reversed_str)\n    if n_str_arr_sorted_reversed_str_int == n {\n        return -1\n    }\n    var n_str_arr_sorted_reversed_str_int_str = String(n_str_arr_sorted_reversed_str_int!)\n    var n_str_arr_sorted_reversed_str_int_str_arr = Array(n_str_arr_sorted_reversed_str_int_str)\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted = n_str_arr_sorted_reversed_str_int_str_arr.sorted()\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed = n_str_arr_sorted_reversed_str_int_str_arr_sorted.reversed()\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed_str = String(n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed)\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed_str_int = Int(n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed_str)\n    var n_str_arr_s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmpfhm7mypy.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpfhm7mypy.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpfhm7mypy.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpfhm7mypy.swift:19:9: error: type annotation missing in pattern\n    var n_str_arr_s\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmphxu7kp1w.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmphxu7kp1w.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmphxu7kp1w.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "/tmp/tmp7p_tp6qt.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp7p_tp6qt.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp7p_tp6qt.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp7p_tp6qt.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmp7p_tp6qt.swift:4:9: note: 'digits' previously declared here\n    let digits = String(n).map { Int(String($0))! }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517250,
      "stdout": "",
      "stderr": "/tmp/tmpztnul2ff.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpztnul2ff.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpztnul2ff.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let str = String(n)\n    var arr = Array(str)\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpx_1ouoh_.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx_1ouoh_.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx_1ouoh_.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp1bghfjee.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1bghfjee.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1bghfjee.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1bghfjee.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}