{
  "name": "mbpp_767_get_pairs_count",
  "language": "swift",
  "prompt": "\n/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfunc get_pairs_count(arr: [Int], sum: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_pairs_count(arr: [1, 1, 1, 1], sum: 2) == 6)\nassert(get_pairs_count(arr: [1, 5, 7, -1, 5], sum: 6) == 3)\nassert(get_pairs_count(arr: [1, -2, 3], sum: 1) == 1)\nassert(get_pairs_count(arr: [-1, -2, 3], sum: -3) == 1)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = dict[sum - arr[i]] {\n            count += val\n        }\n        if let val = dict[arr[i]] {\n            dict[arr[i]] = val + 1\n        } else {\n            dict[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var set = Set<Int>()\n    \n    for num in arr {\n        if set.contains(sum - num) {\n            count += 1\n        }\n        set.insert(num)\n    }\n    \n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var set = Set<Int>()\n    for i in 0..<arr.count {\n        if set.contains(arr[i]) {\n            count += 1\n        }\n        set.insert(sum - arr[i])\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for i in arr {\n        if dict[sum - i] != nil {\n            count += dict[sum - i]!\n        }\n        if sum - i == i {\n            count -= 1\n        }\n    }\n    return count / 2",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if let _ = dict[sum - arr[i]] {\n            count += 1\n        }\n        dict[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = hash[sum - arr[i]] {\n            count += val\n        }\n        if let val = hash[arr[i]] {\n            hash[arr[i]] = val + 1\n        } else {\n            hash[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if let _ = map[sum - i] {\n            count += 1\n        }\n        map[i] = i\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = dict[sum - arr[i]] {\n            count += val\n        }\n        if let val = dict[arr[i]] {\n            dict[arr[i]] = val + 1\n        } else {\n            dict[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = dict[sum - arr[i]] {\n            count += val\n        }\n        if let val = dict[arr[i]] {\n            dict[arr[i]] = val + 1\n        } else {\n            dict[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in arr {\n        if let _ = hash[sum - i] {\n            count += 1\n        }\n        hash[i] = i\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = hash[sum - arr[i]] {\n            count += val\n        }\n        if let val = hash[arr[i]] {\n            hash[arr[i]] = val + 1\n        } else {\n            hash[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in arr {\n        if let value = hash[sum - i] {\n            count += value\n        }\n        if let value = hash[i] {\n            hash[i] = value + 1\n        } else {\n            hash[i] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if map[sum - i] != nil {\n            count += 1\n        }\n        map[i] = 1\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if map[i] != nil {\n            map[i] = map[i]! + 1\n        } else {\n            map[i] = 1\n        }\n    }\n    for i in arr {\n        if map[sum - i] != nil {\n            count += map[sum - i]!\n        }\n        if sum - i == i {\n            count--\n        }\n    }\n    return count / 2",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if map[diff] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var s = Set<Int>()\n    for i in arr {\n        if s.contains(sum - i) {\n            count += 1\n        }\n        s.insert(i)\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var s = Set<Int>()\n    for i in arr {\n        if s.contains(sum - i) {\n            count += 1\n        }\n        s.insert(i)\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[arr[i]] != nil {\n            count += 1\n        } else {\n            map[sum - arr[i]] = i\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if let _ = map[sum - i] {\n            count += 1\n        }\n        map[i] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in arr {\n        if let _ = hash[sum - i] {\n            count += 1\n        }\n        hash[i] = i\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if dict[diff] != nil {\n            count += 1\n        }\n        dict[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Bool]()\n    for i in 0..<arr.count {\n        if let _ = dict[sum - arr[i]] {\n            count += 1\n        }\n        dict[arr[i]] = true\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if map[sum - i] != nil {\n            count += 1\n        }\n        map[i] = 1\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let _ = hash[sum - arr[i]] {\n            count += 1\n        }\n        hash[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(sum - i) {\n            count += 1\n        }\n        set.insert(i)\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if map[diff] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let value = hash[sum - arr[i]] {\n            count += value\n        }\n        if let value = hash[arr[i]] {\n            hash[arr[i]] = value + 1\n        } else {\n            hash[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = map[sum - arr[i]] {\n            count += val\n        }\n        if let val = map[arr[i]] {\n            map[arr[i]] = val + 1\n        } else {\n            map[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if let value = map[sum - arr[i]] {\n            count += value\n        }\n        if let value = map[arr[i]] {\n            map[arr[i]] = value + 1\n        } else {\n            map[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(sum - i) {\n            count += 1\n        }\n        set.insert(i)\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[arr[i]] != nil {\n            count += 1\n        } else {\n            map[sum - arr[i]] = i\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Bool]()\n    for i in 0..<arr.count {\n        if hash[sum - arr[i]] != nil {\n            count += 1\n        }\n        hash[arr[i]] = true\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    \n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if dict[sum - arr[i]] != nil {\n            count += 1\n        }\n        dict[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = dict[sum - arr[i]] {\n            count += val\n        }\n        if let val = dict[arr[i]] {\n            dict[arr[i]] = val + 1\n        } else {\n            dict[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if hash[sum - arr[i]] != nil {\n            count += 1\n        }\n        hash[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if hash[sum - arr[i]] != nil {\n            count += 1\n        }\n        hash[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in arr {\n        if hash[sum - i] != nil {\n            count += 1\n        }\n        hash[i] = i\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if let j = map[sum - i] {\n            count += j\n        }\n        if let _ = map[i] {\n            map[i]! += 1\n        } else {\n            map[i] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in 0..<arr.count {\n        if let _ = dict[sum - arr[i]] {\n            count += 1\n        }\n        dict[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in arr {\n        if let _ = hash[sum - i] {\n            count += 1\n        }\n        hash[i] = i\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if map[diff] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(sum - i) {\n            count += 1\n        }\n        set.insert(i)\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let val = hash[sum - arr[i]] {\n            count += val\n        }\n        if let val = hash[arr[i]] {\n            hash[arr[i]] = val + 1\n        } else {\n            hash[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var s = Set<Int>()\n    for i in 0..<arr.count {\n        if s.contains(sum - arr[i]) {\n            count += 1\n        }\n        s.insert(arr[i])\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    \n    for i in 0..<arr.count {\n        let complement = sum - arr[i]\n        if map[complement] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for num in arr {\n        if let _ = map[num] {\n            map[num]! += 1\n        } else {\n            map[num] = 1\n        }\n    }\n    for num in arr {\n        if let _ = map[sum - num] {\n            count += map[sum - num]!\n        }\n        if sum - num == num {\n            count -= 1\n        }\n    }\n    return count / 2",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let _ = hash[sum - arr[i]] {\n            count += 1\n        }\n        hash[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    \n    for i in 0..<arr.count {\n        if let _ = hash[sum - arr[i]] {\n            count += 1\n        }\n        hash[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        if map[sum - arr[i]] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if map[diff] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var s = Set<Int>()\n    for i in 0..<arr.count {\n        if s.contains(sum - arr[i]) {\n            count += 1\n        }\n        s.insert(arr[i])\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(sum - i) {\n            count += 1\n        }\n        set.insert(i)\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if let _ = map[sum - i] {\n            count += 1\n        }\n        map[i] = i\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[sum - i] {\n            count += val\n        }\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in arr {\n        if map[sum - i] != nil {\n            count += 1\n        }\n        map[i] = i\n    }\n    return count",
    "    var count = 0\n    var hash = [Int: Int]()\n    for i in 0..<arr.count {\n        if let value = hash[sum - arr[i]] {\n            count += value\n        }\n        if let value = hash[arr[i]] {\n            hash[arr[i]] = value + 1\n        } else {\n            hash[arr[i]] = 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if map[diff] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count",
    "    var count = 0\n    var map = [Int: Int]()\n    for i in 0..<arr.count {\n        let diff = sum - arr[i]\n        if map[diff] != nil {\n            count += 1\n        }\n        map[arr[i]] = i\n    }\n    return count"
  ]
}