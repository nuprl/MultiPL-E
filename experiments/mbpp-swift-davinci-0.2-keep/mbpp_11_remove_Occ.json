{
  "name": "mbpp_11_remove_Occ",
  "language": "swift",
  "prompt": "\n/// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s: String, ch: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_Occ(s: \"hello\", ch: \"l\") == \"heo\")\nassert(remove_Occ(s: \"abcda\", ch: \"a\") == \"bcd\")\nassert(remove_Occ(s: \"PHP\", ch: \"P\") == \"H\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    let s1 = s.replacingOccurrences(of: ch, with: \"\", options: .literal, range: nil)\n    let s2 = s1.replacingOccurrences(of: ch, with: \"\", options: .literal, range: nil)\n    return s2",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var new_s = s\n    var i = 0\n    while i < new_s.count {\n        if new_s[i] == ch {\n            new_s.remove(at: i)\n            break\n        }\n        i += 1\n    }\n    i = new_s.count - 1\n    while i >= 0 {\n        if new_s[i] == ch {\n            new_s.remove(at: i)\n            break\n        }\n        i -= 1\n    }\n    return new_s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var new_s = s\n    if let index = new_s.firstIndex(of: Character(ch)) {\n        new_s.remove(at: index)\n    }\n    if let index = new_s.lastIndex(of: Character(ch)) {\n        new_s.remove(at: index)\n    }\n    return new_s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    let ch = ch.first!\n    if let index = s.firstIndex(of: ch) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: ch) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var str = s\n    if let range = str.range(of: ch) {\n        str.removeSubrange(range)\n    }\n    if let range = str.range(of: ch, options: .backwards) {\n        str.removeSubrange(range)\n    }\n    return str",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if ch.count > 1 {\n        ch = String(ch.first!)\n    }\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let first = s.firstIndex(of: Character(ch)) {\n        s.remove(at: first)\n    }\n    if let last = s.lastIndex(of: Character(ch)) {\n        s.remove(at: last)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        let index = s.firstIndex(of: Character(ch))\n        s.remove(at: index!)\n        let index2 = s.lastIndex(of: Character(ch))\n        s.remove(at: index2!)\n    }\n    return s",
    "    var s = s\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    let c = ch.first!\n    if let range = s.range(of: c.description) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: c.description, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let r = s.range(of: ch) {\n        s.removeSubrange(r)\n    }\n    if let r = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(r)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var str = s\n    if let range = str.range(of: ch) {\n        str.removeSubrange(range)\n    }\n    if let range = str.range(of: ch, options: .backwards) {\n        str.removeSubrange(range)\n    }\n    return str",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var string = s\n    var char = ch\n    if let index = string.firstIndex(of: Character(char)) {\n        string.remove(at: index)\n    }\n    if let index = string.lastIndex(of: Character(char)) {\n        string.remove(at: index)\n    }\n    return string",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if ch.count > 1 {\n        ch = String(ch.first!)\n    }\n    if let first = s.firstIndex(of: Character(ch)) {\n        s.remove(at: first)\n    }\n    if let last = s.lastIndex(of: Character(ch)) {\n        s.remove(at: last)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var new_str = \"\"\n    for i in s {\n        if i != Character(ch) {\n            new_str.append(i)\n        }\n    }\n    return new_str",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s1 = s\n    var s2 = s\n    if let index = s1.firstIndex(of: Character(ch)) {\n        s1.remove(at: index)\n    }\n    if let index = s2.lastIndex(of: Character(ch)) {\n        s2.remove(at: index)\n    }\n    return s1 + s2",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    let ch = ch.first!\n    let first = s.firstIndex(of: ch)\n    let last = s.lastIndex(of: ch)\n    if first != nil {\n        s.remove(at: first!)\n    }\n    if last != nil {\n        s.remove(at: last!)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        let index = s.firstIndex(of: Character(ch))\n        s.remove(at: index!)\n        let index2 = s.lastIndex(of: Character(ch))\n        s.remove(at: index2!)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var new_s = \"\"\n    var first = true\n    for c in s {\n        if c != Character(ch) {\n            new_s.append(c)\n        } else if first {\n            first = false\n        } else {\n            new_s.append(c)\n        }\n    }\n    return new_s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var str = s\n    if let range = str.range(of: ch) {\n        str.removeSubrange(range)\n    }\n    if let range = str.range(of: ch, options: .backwards) {\n        str.removeSubrange(range)\n    }\n    return str",
    "    let str = s.replacingOccurrences(of: ch, with: \"\")\n    let result = str.replacingOccurrences(of: ch, with: \"\", options: .backwards)\n    return result",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    let s = s.replacingOccurrences(of: ch, with: \"\")\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    let index = s.firstIndex(of: Character(ch))\n    if let index = index {\n        s.remove(at: index)\n    }\n    let index1 = s.lastIndex(of: Character(ch))\n    if let index1 = index1 {\n        s.remove(at: index1)\n    }\n    return s",
    "    var s = s\n    let index = s.firstIndex(of: Character(ch))\n    s.remove(at: index!)\n    let index2 = s.lastIndex(of: Character(ch))\n    s.remove(at: index2!)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    let ch = ch.first!\n    if let index = s.firstIndex(of: ch) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: ch) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var new_s = s\n    if let index = new_s.firstIndex(of: Character(ch)) {\n        new_s.remove(at: index)\n    }\n    if let index = new_s.lastIndex(of: Character(ch)) {\n        new_s.remove(at: index)\n    }\n    return new_s",
    "    var s = s\n    let ch = ch.first!\n    if let first = s.firstIndex(of: ch) {\n        s.remove(at: first)\n    }\n    if let last = s.lastIndex(of: ch) {\n        s.remove(at: last)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if ch.count != 1 {\n        print(\"Please enter a character\")\n    }\n    else {\n        if let index = s.firstIndex(of: Character(ch)) {\n            s.remove(at: index)\n        }\n        if let index = s.lastIndex(of: Character(ch)) {\n            s.remove(at: index)\n        }\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var str = s\n    if let index = str.firstIndex(of: Character(ch)) {\n        str.remove(at: index)\n    }\n    if let index = str.lastIndex(of: Character(ch)) {\n        str.remove(at: index)\n    }\n    return str",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var new_str = \"\"\n    var first_occ = true\n    var last_occ = false\n    \n    for i in s {\n        if i == Character(ch) && first_occ {\n            first_occ = false\n        } else if i == Character(ch) && !first_occ {\n            last_occ = true\n        } else if i != Character(ch) && last_occ {\n            new_str.append(i)\n            last_occ = false\n        } else {\n            new_str.append(i)\n        }\n    }\n    return new_str",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    let index = s.firstIndex(of: Character(ch))\n    if let index = index {\n        s.remove(at: index)\n    }\n    let index2 = s.lastIndex(of: Character(ch))\n    if let index2 = index2 {\n        s.remove(at: index2)\n    }\n    return s",
    "    var s = s\n    let index1 = s.firstIndex(of: Character(ch))\n    let index2 = s.lastIndex(of: Character(ch))\n    s.remove(at: index1!)\n    s.remove(at: index2!)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let first = s.firstIndex(of: Character(ch)) {\n        s.remove(at: first)\n    }\n    if let last = s.lastIndex(of: Character(ch)) {\n        s.remove(at: last)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let first = s.firstIndex(of: Character(ch)) {\n        s.remove(at: first)\n    }\n    if let last = s.lastIndex(of: Character(ch)) {\n        s.remove(at: last)\n    }\n    return s",
    "    var new_string = s\n    var first_index = 0\n    var last_index = 0\n    for i in 0..<s.count {\n        if s[i] == ch[0] {\n            first_index = i\n            break\n        }\n    }\n    for i in (0..<s.count).reversed() {\n        if s[i] == ch[0] {\n            last_index = i\n            break\n        }\n    }\n    new_string.remove(at: new_string.index(new_string.startIndex, offsetBy: first_index))\n    new_string.remove(at: new_string.index(new_string.startIndex, offsetBy: last_index - 1))\n    return new_string",
    "    var s = s\n    var ch = ch\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if s.contains(ch) {\n        s.removeFirst(ch)\n        s.removeLast(ch)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var new_str = \"\"\n    for i in s {\n        if i == Character(ch) {\n            continue\n        }\n        new_str.append(i)\n    }\n    return new_str",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    let str = s.replacingOccurrences(of: ch, with: \"\")\n    return str",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    let first = s.firstIndex(of: Character(ch))\n    let last = s.lastIndex(of: Character(ch))\n    if first != nil {\n        s.remove(at: first!)\n    }\n    if last != nil {\n        s.remove(at: last!)\n    }\n    return s",
    "    var s = s\n    var ch = ch\n    if s.contains(ch) {\n        s.removeFirst(1)\n        s.removeLast(1)\n    }\n    return s",
    "    let s = s.replacingOccurrences(of: ch, with: \"\")\n    let s = s.replacingOccurrences(of: ch, with: \"\", options: .backwards)\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var newString = \"\"\n    var count = 0\n    for i in s {\n        if i == Character(ch) {\n            if count == 0 {\n                count += 1\n                continue\n            }\n            else if count == 1 {\n                break\n            }\n        }\n        newString.append(i)\n    }\n    return newString",
    "    var s = s\n    if let first = s.firstIndex(of: Character(ch)) {\n        s.remove(at: first)\n    }\n    if let last = s.lastIndex(of: Character(ch)) {\n        s.remove(at: last)\n    }\n    return s",
    "    var str = s\n    if let range = str.range(of: ch) {\n        str.removeSubrange(range)\n    }\n    if let range = str.range(of: ch, options: .backwards) {\n        str.removeSubrange(range)\n    }\n    return str",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.remove(at: s.index(of: Character(ch))!)\n    s.remove(at: s.index(of: Character(ch))!)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    let index = s.index(of: Character(ch))\n    if index != nil {\n        s.remove(at: index!)\n    }\n    let index1 = s.index(of: Character(ch))\n    if index1 != nil {\n        s.remove(at: index1!)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var str = s\n    if let range = str.range(of: ch) {\n        str.removeSubrange(range)\n    }\n    if let range = str.range(of: ch, options: .backwards) {\n        str.removeSubrange(range)\n    }\n    return str",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    let s = s.replacingOccurrences(of: ch, with: \"\", options: .literal, range: nil)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    let first = s.firstIndex(of: Character(ch))\n    let last = s.lastIndex(of: Character(ch))\n    if let first = first {\n        s.remove(at: first)\n    }\n    if let last = last {\n        s.remove(at: last)\n    }\n    return s",
    "    var s = s\n    let first = s.firstIndex(of: Character(ch))\n    let last = s.lastIndex(of: Character(ch))\n    s.remove(at: first!)\n    s.remove(at: last!)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    let c = ch.first!\n    if let i = s.firstIndex(of: c) {\n        s.remove(at: i)\n    }\n    if let i = s.lastIndex(of: c) {\n        s.remove(at: i)\n    }\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var str = s\n    if let range = str.range(of: ch) {\n        str.removeSubrange(range)\n    }\n    if let range = str.range(of: ch, options: .backwards) {\n        str.removeSubrange(range)\n    }\n    return str",
    "    var s = s\n    if let index = s.firstIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    if let index = s.lastIndex(of: Character(ch)) {\n        s.remove(at: index)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    var s = s\n    if let range = s.range(of: ch) {\n        s.removeSubrange(range)\n    }\n    if let range = s.range(of: ch, options: .backwards) {\n        s.removeSubrange(range)\n    }\n    return s",
    "    let s = s.replacingOccurrences(of: ch, with: \"\", options: .anchored, range: nil)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s",
    "    var s = s\n    s.removeFirst(1)\n    s.removeLast(1)\n    return s"
  ]
}