{
  "name": "mbpp_759_is_decimal",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*[.]{0,1}[0-9]{0,2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpe0kolshi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*[.]{0,1}[0-9]{0,2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0kolshi.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "/tmp/tmp2gr8dhcx.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2gr8dhcx.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmp2gr8dhcx.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpysxhi19t.swift:5:16: error: value of type 'String' has no member 'range'\n    return num.range(of: pattern, options: .regularExpression) != nil\n           ~~~ ^~~~~\n/tmp/tmpysxhi19t.swift:5:45: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: pattern, options: .regularExpression) != nil\n                                           ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "/tmp/tmp2gr8dhcx.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2gr8dhcx.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmp2gr8dhcx.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpvzezv9l5.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvzezv9l5.swift:6:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^\\\\d+\\\\.\\\\d{2}$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmp3fzubrdu.swift:5:12: error: cannot find 'NSPredicate' in scope\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n           ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: num.count)\n    return regex.firstMatch(in: num, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmptpn_0h6s.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptpn_0h6s.swift:6:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: num.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = NSPredicate(format: \"SELF MATCHES %@\", \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return decimal.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpljbrcvxx.swift:4:19: error: cannot find 'NSPredicate' in scope\n    let decimal = NSPredicate(format: \"SELF MATCHES %@\", \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                  ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpvczbv67o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvczbv67o.swift:5:49: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpq92aqn91.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpq92aqn91.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpug7f7mtn.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpug7f7mtn.swift:4:87: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                     ~^~~~~~~~~~~~~~~\n/tmp/tmpug7f7mtn.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpww_rz40h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpww_rz40h.swift:5:49: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "/tmp/tmp2gr8dhcx.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2gr8dhcx.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmp2gr8dhcx.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpr6tdxww1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpr6tdxww1.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.utf16.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpw3dzcisf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpw3dzcisf.swift:4:87: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: .caseInsensitive)\n                                                                                     ~^~~~~~~~~~~~~~~\n/tmp/tmpw3dzcisf.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpoeiefmms.swift:5:16: error: value of type 'String' has no member 'range'\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n           ~~~ ^~~~~\n/tmp/tmpoeiefmms.swift:5:43: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n                                         ~^~~~~~~~~~~~~~~~~\n/tmp/tmpoeiefmms.swift:5:69: error: 'nil' requires a contextual type\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n                                                                    ^\n/tmp/tmpoeiefmms.swift:5:82: error: 'nil' requires a contextual type\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n                                                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpvzezv9l5.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvzezv9l5.swift:6:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpbnhmbqqe.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnhmbqqe.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.matches(in: num, range: NSRange(location: 0, length: num.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpx4fexax1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpx4fexax1.swift:5:42: error: cannot find 'NSRange' in scope\n    return regex.matches(in: num, range: NSRange(location: 0, length: num.count)).count > 0\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmppdnkfaev.swift:5:12: error: cannot find 'NSPredicate' in scope\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n           ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.matches(in: num, options: [], range: NSMakeRange(0, num.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmptlmhqjab.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptlmhqjab.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmptlmhqjab.swift:6:55: error: cannot find 'NSMakeRange' in scope\n    return regex.matches(in: num, options: [], range: NSMakeRange(0, num.count)).count > 0\n                                                      ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    return num.rangeOfString(\"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpgd0l4f3n.swift:4:16: error: value of type 'String' has no member 'rangeOfString'\n    return num.rangeOfString(\"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .RegularExpressionSearch) != nil\n           ~~~ ^~~~~~~~~~~~~\n/tmp/tmpgd0l4f3n.swift:4:68: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return num.rangeOfString(\"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .RegularExpressionSearch) != nil\n                                                                  ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]*(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmp3_lqphgf.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3_lqphgf.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpoeiefmms.swift:5:16: error: value of type 'String' has no member 'range'\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n           ~~~ ^~~~~\n/tmp/tmpoeiefmms.swift:5:43: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n                                         ~^~~~~~~~~~~~~~~~~\n/tmp/tmpoeiefmms.swift:5:69: error: 'nil' requires a contextual type\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n                                                                    ^\n/tmp/tmpoeiefmms.swift:5:82: error: 'nil' requires a contextual type\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil\n                                                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmptmcz6ayq.swift:5:16: error: value of type 'String' has no member 'range'\n    return num.range(of: regex, options: .regularExpression) != nil\n           ~~~ ^~~~~\n/tmp/tmptmcz6ayq.swift:5:43: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: regex, options: .regularExpression) != nil\n                                         ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpz49fbxpi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz49fbxpi.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpr6tdxww1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpr6tdxww1.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.utf16.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.numberOfMatches(in: num, options: [], range: NSMakeRange(0, num.count)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpef5eou4j.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpef5eou4j.swift:5:63: error: cannot find 'NSMakeRange' in scope\n    return regex.numberOfMatches(in: num, options: [], range: NSMakeRange(0, num.count)) > 0\n                                                              ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmppdnkfaev.swift:5:12: error: cannot find 'NSPredicate' in scope\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n           ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpww_rz40h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpww_rz40h.swift:5:49: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp7s7mc8c0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7s7mc8c0.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxo3ft_oz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxo3ft_oz.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmptmcz6ayq.swift:5:16: error: value of type 'String' has no member 'range'\n    return num.range(of: regex, options: .regularExpression) != nil\n           ~~~ ^~~~~\n/tmp/tmptmcz6ayq.swift:5:43: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: regex, options: .regularExpression) != nil\n                                         ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmppdnkfaev.swift:5:12: error: cannot find 'NSPredicate' in scope\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)\n           ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = NSPredicate(format: \"SELF MATCHES %@\", \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return decimal.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpljbrcvxx.swift:4:19: error: cannot find 'NSPredicate' in scope\n    let decimal = NSPredicate(format: \"SELF MATCHES %@\", \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                  ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}