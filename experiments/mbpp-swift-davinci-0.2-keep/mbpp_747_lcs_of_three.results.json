{
  "name": "mbpp_747_lcs_of_three",
  "language": "swift",
  "prompt": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpvo0b9jhi.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpjh_6uf2v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp1sobty9v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sobty9v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sobty9v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sobty9v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                }\n                else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                }\n                else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "/tmp/tmpe638ipa5.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe638ipa5.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe638ipa5.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe638ipa5.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "/tmp/tmpxjiaj6az.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjiaj6az.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjiaj6az.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjiaj6az.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpza0ez0o8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpns_ojt1e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpza0ez0o8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let x = Array(X)\n    let y = Array(Y)\n    let z = Array(Z)\n    let m = x.count\n    let n = y.count\n    let o = z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if x[i-1] == y[j-1] && x[i-1] == z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0\n                } else if (X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0\n                } else if (X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpjh_6uf2v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpq2wls_t0.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq2wls_t0.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq2wls_t0.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq2wls_t0.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let x = Array(X)\n    let y = Array(Y)\n    let z = Array(Z)\n    let m = x.count\n    let n = y.count\n    let o = z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_ns244iz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    var m = X.count\n    var n = Y.count\n    var o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmptgm6wo4r.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmptgm6wo4r.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb92g61a8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmprkwqc5bk.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprkwqc5bk.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprkwqc5bk.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprkwqc5bk.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                }\n                else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                }\n                else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_ns244iz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_ns244iz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpza0ez0o8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp1sobty9v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sobty9v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sobty9v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1sobty9v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let x = Array(X)\n    let y = Array(Y)\n    let z = Array(Z)\n    let m = x.count\n    let n = y.count\n    let o = z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if x[i-1] == y[j-1] && x[i-1] == z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpza0fi_6v.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpeb78kydl.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeb78kydl.swift:13:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeb78kydl.swift:13:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeb78kydl.swift:13:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb92g61a8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpza0fi_6v.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpvo0b9jhi.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmppdmi9k7s.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmp46632l3w.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp46632l3w.swift:13:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp46632l3w.swift:13:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp46632l3w.swift:13:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmppdmi9k7s.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_ns244iz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpza0ez0o8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    var m = X.count\n    var n = Y.count\n    var o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let x = Array(X)\n    let y = Array(Y)\n    let z = Array(Z)\n    let m = x.count\n    let n = y.count\n    let o = z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if x[i-1] == y[j-1] && x[i-1] == z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb92g61a8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "/tmp/tmp_62_beg8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_62_beg8.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_62_beg8.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_62_beg8.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && Y[j - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmppdmi9k7s.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppdmi9k7s.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb92g61a8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpns_ojt1e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpjh_6uf2v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpaan_fyo_.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaan_fyo_.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaan_fyo_.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaan_fyo_.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpb92g61a8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb92g61a8.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpqghphq3u.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqghphq3u.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqghphq3u.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqghphq3u.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpjh_6uf2v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmps_834657.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps_834657.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps_834657.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps_834657.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let x = X.count\n    let y = Y.count\n    let z = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: z+1), count: y+1), count: x+1)\n    \n    for i in 0...x {\n        for j in 0...y {\n            for k in 0...z {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[x][y][z]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    var m = X.count\n    var n = Y.count\n    var o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpza0fi_6v.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    var m = X.count\n    var n = Y.count\n    var o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    var m = X.count\n    var n = Y.count\n    var o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0\n                } else if (X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_ns244iz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpza0ez0o8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                }\n                else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                }\n                else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmptgm6wo4r.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmps_834657.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps_834657.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps_834657.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps_834657.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "/tmp/tmpxjiaj6az.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjiaj6az.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjiaj6az.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjiaj6az.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmprkwqc5bk.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprkwqc5bk.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprkwqc5bk.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprkwqc5bk.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmp_ns244iz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ns244iz.swift:15:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let x = Array(X)\n    let y = Array(Y)\n    let z = Array(Z)\n    let m = x.count\n    let n = y.count\n    let o = z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if x[i-1] == y[j-1] && x[i-1] == z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpntf4xx5y.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpntf4xx5y.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpvo0b9jhi.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo0b9jhi.swift:13:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmpjh_6uf2v.swift:15:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjh_6uf2v.swift:15:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    \n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmptgm6wo4r.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptgm6wo4r.swift:13:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpza0fi_6v.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if (i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0\n                } else if (X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)]) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpns_ojt1e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpns_ojt1e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "/tmp/tmpza0fi_6v.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                      ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:51: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0fi_6v.swift:14:63: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                              ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "/tmp/tmpza0ez0o8.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpza0ez0o8.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp3mqpfd52.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mqpfd52.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i-1)] == Y[Y.index(Y.startIndex, offsetBy: j-1)] && X[X.index(X.startIndex, offsetBy: i-1)] == Z[Z.index(Z.startIndex, offsetBy: k-1)] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    \n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[X.index(X.startIndex, offsetBy: i - 1)] == Y[Y.index(Y.startIndex, offsetBy: j - 1)] && X[X.index(X.startIndex, offsetBy: i - 1)] == Z[Z.index(Z.startIndex, offsetBy: k - 1)] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = [[[Int]]](repeating: [[Int]](repeating: [Int](repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                }\n                else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                }\n                else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1666122522,
      "stdout": "",
      "stderr": "/tmp/tmpdelj0zr2.swift:15:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdelj0zr2.swift:15:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                    ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdelj0zr2.swift:15:49: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdelj0zr2.swift:15:61: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                                                            ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n    let m = X.count\n    let n = Y.count\n    let o = Z.count\n    var L = Array(repeating: Array(repeating: Array(repeating: 0, count: o+1), count: n+1), count: m+1)\n    \n    for i in 0...m {\n        for j in 0...n {\n            for k in 0...o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1]))\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)\nassert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)\nassert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)",
      "timestamp": 1665510008,
      "stdout": "",
      "stderr": "/tmp/tmp7ehb634e.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:47: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ehb634e.swift:14:57: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                                                        ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}