{
  "name": "mbpp_441_surfacearea_cube",
  "language": "swift",
  "prompt": "\n/// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(surfacearea_cube(l: 5) == 150)\nassert(surfacearea_cube(l: 3) == 54)\nassert(surfacearea_cube(l: 10) == 600)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    let area = 6 * l * l\n    return area",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l*l*6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l*l*6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return 6 * l * l",
    "    return l * l * 6",
    "    return l * l * 6",
    "    return l * l * 6"
  ]
}