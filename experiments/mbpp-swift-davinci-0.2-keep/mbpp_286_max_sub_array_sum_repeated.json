{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "swift",
  "prompt": "\n/// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunc max_sub_array_sum_repeated(a: [Int], n: Int, k: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sub_array_sum_repeated(a: [10, 20, -30, -1], n: 4, k: 3) == 30)\nassert(max_sub_array_sum_repeated(a: [-1, 10, 20], n: 3, k: 2) == 59)\nassert(max_sub_array_sum_repeated(a: [-1, -2, -3], n: 3, k: 3) == -1)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    \n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element <= 0 {\n        return max_element * k\n    }\n    var i1 = 0\n    while i1 < n {\n        var i2 = 0\n        while i2 < k {\n            max_ending_here = max_ending_here + a[(i1 + i2) % n]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            i2 += 1\n        }\n        i1 += 1\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var max_sum = Int.min\n    var min_sum = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if sum > 0 {\n        max_sum = max_so_far * k\n    } else if sum == 0 {\n        max_sum = max_element * k\n    } else {\n        max_sum = max(max_so_far, sum * (k - 2) + max_so_far)\n    }\n    if min_element < 0 {\n        min_sum = sum * (k - 2) + min_element * 2\n    }\n    return max(max_sum, min_sum)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_so_far > 0 {\n        return max_so_far * k\n    }\n    return max_element",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if k == 2 {\n        max_sum = max_sub_array_sum(a: a, n: n)\n        max_sum = max(max_sum, sum + max_sub_array_sum(a: a, n: n, start: 0, end: n-1))\n        return max_sum\n    }\n    \n    if max_element < 0 {\n        return max_element * k\n    }\n    \n    if min_element > 0 {\n        return sum * k\n    }\n    \n    max_sum = max_sub_array_sum(a: a, n: n)\n    max_sum = max(max_sum, sum + max_sub_array_sum(a: a, n: n, start: 0, end: n-1))\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_sum = max(max_sum, max_so_far * (k - 2))\n    \n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    \n    while i < n * 2 {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        \n        i += 1\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    let max_sum_without_repeating = max_so_far\n    let max_sum_with_repeating = sum * k - max_so_far\n    return max(max_sum_without_repeating, max_sum_with_repeating)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_so_far == 0 {\n        return max_element\n    }\n    \n    let max_sum_without_wrap = max_so_far\n    let max_sum_with_wrap = sum + max_so_far\n    let min_sum_with_wrap = sum - min_element\n    \n    if k == 1 {\n        return max_sum_without_wrap\n    }\n    \n    if k == 2 {\n        return max(max_sum_without_wrap, max_sum_with_wrap)\n    }\n    \n    return max(max_sum_without_wrap, max_sum_with_wrap, min_sum_with_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_wrap = max_wrap + max_ending_here\n    \n    return max(max_so_far, max_wrap * (k - 2))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    var max_sum = sum * k\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    return max(max_sum, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    var i = 0\n    var j = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max_sub_array_sum(a: a, n: n)\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_so_far = max(max_so_far, max_ending_here)\n    \n    return max(max_so_far, (sum * (k - 2) + max_so_far))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_array_sum = Int.min\n    var max_array_sum_index = 0\n    var max_array_sum_index_end = 0\n    var max_array_sum_index_start = 0\n    var max_array_sum_index_end_temp = 0\n    var max_array_sum_index_start_temp = 0\n    var max_array_sum_temp = 0\n    var max_array_sum_temp_index = 0\n    var max_array_sum_temp_index_end = 0\n    var max_array_sum_temp_index_start = 0\n    var max_array_sum_temp_index_end_temp = 0\n    var max_array_sum_temp_index_start_temp = 0\n    var max_array_sum_temp_index_end_temp_temp = 0\n    var max_array_sum_temp_index_start_temp_temp = 0\n    var max_array_sum_temp_index_end_temp_temp_temp = 0\n    var max_array_sum_temp_index_start_temp_temp_temp = 0\n    var max_array_sum_temp_index_end_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_start_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_end_temp_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_start_temp_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_end_temp_temp_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_start_temp_temp_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_end_temp_temp_temp_temp_temp_temp_temp = 0\n    var max_array_sum_temp_index_start_temp_temp_temp_temp_temp_temp_temp = 0\n   ",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a: a, n: n, k: k)\n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var max_sum = max_so_far\n    var min_sum = min_element\n    for _ in 1..<k {\n        max_sum = max(max_sum, sum)\n        sum += max_sum\n        min_sum += sum\n    }\n    return max(max_sum, min_sum)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    var result = max_so_far\n    for i in 0..<n {\n        max_ending_here += a[i]\n        max_ending_here = max(max_ending_here, 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    result = max(result, max_so_far)\n    return result * k - max_so_far",
    "    var max_so_far: Int = 0\n    var max_ending_here: Int = 0\n    var max_element: Int = Int.min\n    var i: Int = 0\n    var j: Int = 0\n    var sum: Int = 0\n    var start: Int = 0\n    var end: Int = 0\n    var s: Int = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0...end {\n        max_wrap += a[i]\n    }\n    var min_wrap = 0\n    for i in start...n - 1 {\n        min_wrap += a[i]\n    }\n    \n    return max(max_so_far, max_wrap + min_wrap + (k - 2) * sum)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    var j = 0\n    var count = 0\n    while count < k {\n        max_so_far = 0\n        max_ending_here = 0\n        i = 0\n        j = 0\n        while i < n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                j = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            i += 1\n        }\n        if max_element < max_so_far {\n            max_element = max_so_far\n        }\n        count += 1\n    }\n    return max_element",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    var j = 0\n    var count = 0\n    while count < k {\n        max_so_far = 0\n        max_ending_here = 0\n        i = 0\n        j = 0\n        while i < n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                j = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            i += 1\n        }\n        if max_so_far > max_element {\n            max_element = max_so_far\n        }\n        count += 1\n    }\n    return max_element",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    \n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var neg_count = 0\n    var neg_max = Int.min\n    var max_ele = Int.min\n    \n    for i in 0..<n {\n        if a[i] < 0 {\n            neg_count += 1\n            if a[i] > neg_max {\n                neg_max = a[i]\n            }\n        }\n        if a[i] > max_ele {\n            max_ele = a[i]\n        }\n    }\n    \n    if neg_count == n {\n        return neg_max\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    var max_without_k_adjacents = max_so_far\n    var max_with_k_adjacents = max_so_far\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_with_k_adjacents < max_ending_here {\n            max_with_k_adjacents = max_ending_here\n        }\n    }\n    \n    max_so_far = max_with_k_adjacents\n    \n    for _ in 0..<k-2 {\n        max_so_far = max_so_far + max_without_k_adjacents\n    }\n    \n    return max_so",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    var j = 0\n    while j < k {\n        i = 0\n        while i < n {\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    max_wrap = max_wrap * k\n    max_wrap = max(max_wrap, max_so_far)\n    \n    return max(max_wrap, max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    while i < k {\n        j = 0\n        while j < n {\n            max_ending_here += a[j]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    let max_sum_k_times = sum * k\n    let max_sum_k_1_times = max_sum_k_times - min_element\n    let max_sum_k_2_times = max_sum_k_times - (sum - max_element)\n    \n    return max(max_so_far, max(max_sum_k_1_times, max_sum_k_2_times))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_so_far == 0 {\n        return max_element\n    }\n    \n    var max_sum = max_so_far\n    for i in 1..<k {\n        max_sum = max(max_sum, sum + max_so_far)\n        max_so_far = max(max_so_far, sum + max_so_far)\n    }\n    \n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    return max(max_wrap, max_so_far) / k",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var max_wrap = 0\n    var i = 0\n    var j = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_wrap += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if max_wrap < 0 {\n        return max_so_far\n    }\n    max_wrap = max_wrap * k\n    max_so_far = max(max_so_far, max_wrap)\n    return max_so_far",
    "    var max_sum = 0\n    var curr_sum = 0\n    var max_element = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        curr_sum += a[i]\n        if i == n - 1 {\n            curr_sum = curr_sum * k\n        }\n        if curr_sum < 0 {\n            curr_sum = 0\n        }\n        max_sum = max(max_sum, curr_sum)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_wrap = max_wrap + max_sub_array_sum(a: a, n: n)\n    \n    return max(max_so_far, max_wrap * (k - 2))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var max_index = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    if max_so_far < 0 {\n        max_so_far = max_so_far * k\n    } else {\n        var sum = 0\n        for i in start...end {\n            sum += a[i]\n        }\n        max_so_far = max_so_far * k\n        max_so_far -= sum\n        max_so_far += sum * k\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    \n    while i < k {\n        var max_ending_here = 0\n        j = 0\n        while j < n {\n            max_ending_here = max_ending_here + a[j]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            j += 1\n        }\n        i += 1\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var sum = 0\n    \n    for i in 0..<n {\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    var circular_sum = sum\n    circular_sum = circular_sum * k\n    \n    if circular_sum == 0 {\n        return max_element\n    }\n    \n    var result = max(max_so_far, circular_sum)\n    \n    for i in 0..<n {\n        sum -= a[i]\n        circular_sum = sum * (k - 1)\n        result = max(result, max_so_far + circular_sum)\n    }\n    \n    return result",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var min_so_far = 0\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        min_so_far += a[i]\n        if min_so_far > 0 {\n            min_so_far = 0\n        }\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var result = max_so_far\n    for _ in 1..<k {\n        max_so_far = (max_so_far + sum)\n        result = max(result, max_so_far)\n    }\n    result = max(result, max_so_far - min_so_far)\n    return result",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    var j = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_element < a[i] {\n            max_element = a[i]\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_so_far = max(max_so_far, sum * k)\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap * k\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_sum = 0\n    var curr_sum = 0\n    var max_val = 0\n    for i in 0..<n {\n        max_val = max(max_val, a[i])\n        curr_sum += a[i]\n        if i == n - 1 {\n            curr_sum = curr_sum * k\n        }\n        if curr_sum < 0 {\n            curr_sum = 0\n        }\n        max_sum = max(max_sum, curr_sum)\n    }\n    if max_val < 0 {\n        return max_val\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * k)\n    max_so_far = max(max_so_far, (sum - min_element) * k)\n    \n    return max_so_far",
    "    var max_so_far = 0, max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_wrap = max_wrap + max_sub_array_sum_repeated(a: a, n: n, k: k)\n    \n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var max_wrap = 0\n    var min_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        min_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max(max_wrap, min_wrap)\n    return max(max_so_far, max_wrap * (k - 2) + max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    if sum == min_element {\n        return max_element\n    }\n    \n    return max(max_so_far, sum * k - (sum - max_so_far))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], 0)\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var circular_sum = sum * k\n    var max_circular_sum = circular_sum - (max_so_far * 2)\n    return max(max_circular_sum, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_k_times = 0\n    var max_k_times_index = 0\n    var max_k_times_index_end = 0\n    var max_k_times_index_start = 0\n    var max_k_times_index_end_temp = 0\n    var max_k_times_index_start_temp = 0\n    var max_k_times_temp = 0\n    var max_k_times_index_temp = 0\n    var max_k_times_index_end_temp_temp = 0\n    var max_k_times_index_start_temp_temp = 0\n    var max_k_times_temp_temp = 0\n    var max_k_times_index_temp_temp = 0\n    \n    for _ in 0..<k {\n        max_ending_here = 0\n        max_so_far = 0\n        i = 0\n        j = 0\n        while i < n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                max_k_times_index_end_temp = i\n                max_k_times_index_start_temp = j\n                max_k_times_temp = max_so_far\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                j = i + 1\n            }\n            i += 1\n        }\n        if max_k_times_temp > max_k_times {\n            max_k_times = max_k_times_temp\n            max_k_times_index_end = max_k_times_index_end_temp\n            max_k_times_index_start = max_k_times_index_start_temp\n            max_k_times_index = max_k_times_index_temp\n        }\n        max_k_times_index_end_temp_temp = max_k_times_index_end_temp\n        max_k_",
    "    var sum = 0\n    var max_sum = Int.min\n    var max_ending_here = 0\n    var max_so_far = Int.min\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    var min_sum = Int.max\n    var min_ending_here = 0\n    var min_so_far = Int.max\n    s = 0\n    \n    for i in 0..<n {\n        min_ending_here += a[i]\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here\n            s = i + 1\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        sum += a[i]\n    }\n    \n    max_wrap = max(max_wrap, sum - min_so_far)\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    let max_sum_without_modification = max_so_far\n    let max_sum_with_modification = max_so_far + (k - 2) * sum\n    \n    return max(max_sum_without_modification, max_sum_with_modification)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var max_sum = max_so_far\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        a[i] = -a[i]\n    }\n    max_so_far = 0\n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_sum = max(max_sum, sum + max_so_far)\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far + (sum * (k - 2))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 2 {\n        return max(max_wrap, max_so_far)\n    }\n    return max(max_wrap, max_so_far * (k - 2))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        return max_element\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_so_far = max(max_so_far, sum * k)\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        max_ending_here += a[i]\n        max_ending_here = max(max_ending_here, max_wrap)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        max_ending_here = max_ending_here + a[i]\n    }\n    if max_wrap < 0 {\n        return max_so_far\n    }\n    return max(max_so_far, max_wrap + max_so_far * (k - 2))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    while i < n {\n        sum += a[i]\n        i += 1\n    }\n    max_so_far = sum\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * k\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        if max_element < a[i % n] {\n            max_element = a[i % n]\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    let max_sum_with_k_adjacent = max_so_far * k\n    let max_sum_with_all_elements = sum * k\n    let max_sum_with_wraparound = (sum - min_element) * k\n    return max(max_sum_with_k_adjacent, max(max_sum_with_all_elements, max_sum_with_wraparound))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        max_element = max(max_element, a[i%n])\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    \n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var circular_sum = sum * k\n    circular_sum -= max_so_far\n    return max(max_so_far, circular_sum)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    max_so_far = max(max_so_far, sum * k)\n    sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        a[i] = -a[i]\n    }\n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, sum + max_ending_here)\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var curr_sum = 0\n    var prev_sum = 0\n    var neg_count = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < 0 {\n            neg_count += 1\n        }\n        curr_sum += a[i]\n    }\n    \n    if neg_count == n {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    prev_sum = max_so_far\n    for i in 0..<n {\n        curr_sum = curr_sum + a[i]\n        max_so_far = max(max_so_far, prev_sum + curr_sum)\n        prev_sum = prev_sum + a[i]\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if all_negative(a: a, n: n) {\n        return max_element\n    }\n    \n    max_so_far = max_sub_array_sum(a: a, n: n)\n    \n    for i in 1..<k {\n        for j in 0..<n {\n            a[j] = a[j] + sum\n        }\n        max_so_far = max(max_so_far, max_sub_array_sum(a: a, n: n))\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_sum = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    for i in start...end {\n        max_sum += a[i % n]\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * (k - 2) + max_so_far)\n    return max(max_so_far, sum * (k - 2) + sum - min_element)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * (k - 2)\n    return max(max_so_far, max_wrap + max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_so_far = max(max_so_far, max_ending_here)\n    \n    max_so_far = max(max_so_far, sum * (k - 2))\n    \n    sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_so_far = max(max_so_far, max_ending_here)\n    max_so_far = max(max_so_far, sum * (k - 2))\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var t = 0\n    \n    while t < 2 {\n        while i < n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = i + 1\n            }\n            i += 1\n        }\n        t += 1\n        if t < 2 {\n            if max_so_far < 0 {\n                return max_so_far\n            }\n            if end == n - 1 {\n                return max_so_far\n            }\n            max_ending_here = 0\n            s = 0\n            i = end + 1\n            max_so_far = 0\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    let max_sum_without_wrap = max_so_far\n    let max_sum_with_wrap = sum * k - min_element\n    return max(max_sum_without_wrap, max_sum_with_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"max_so_far: \\(max_so_far)\")\n    print(\"start: \\(start)\")\n    print(\"end: \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 2 {\n        return max(max_wrap, max_so_far)\n    }\n    return max(max_wrap, max_so_far + (k - 2) * max_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var sum = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        sum += a[i%n]\n    }\n    if sum < 0 {\n        max_so_far = sum\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 1 {\n        return max_so_far\n    }\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_sum = 0\n    var curr_sum = 0\n    \n    for i in 0..<n {\n        curr_sum += a[i]\n    }\n    \n    max_sum = curr_sum\n    \n    for i in 0..<n {\n        curr_sum += (k - 1) * a[i]\n        max_sum = max(max_sum, curr_sum)\n    }\n    \n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var min_element = a[0]\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n    }\n    \n    max_wrap = max_wrap - min_element\n    \n    return max(max_so_far, max_wrap * (k - 2) + max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"The sum of contiguous subarray with the largest sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_sum = 0\n    var curr_sum = 0\n    for i in 0..<n {\n        curr_sum += a[i]\n    }\n    max_sum = curr_sum\n    for i in 0..<n {\n        curr_sum += a[i] * (k - 1)\n        max_sum = max(max_sum, curr_sum)\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start) end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var max_sum = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    max_sum = max_so_far\n    for i in 1..<k {\n        max_sum = max(max_sum, max_so_far + max_sum)\n        max_so_far = max(max_so_far, max_so_far + max_element)\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var circular_sum = 0\n    for i in 0..<n {\n        circular_sum += a[i]\n        a[i] = -a[i]\n    }\n    var curr_max = max_sub_array_sum_repeated(a: a, n: n, k: k)\n    if curr_max < 0 {\n        curr_max = 0\n    }\n    return max(curr_max, circular_sum + max_so_far * (k - 2))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    var j = 0\n    while j < k {\n        var i = 0\n        while i < n {\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var max_index = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    \n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_so_far * k\n    } else {\n        max_so_far = max_so_far * k - (sum(a, start, end) * (k - 1))\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var max_sum = max_so_far\n    var max_possible_sum = sum * k\n    if max_possible_sum > max_sum && sum > 0 {\n        max_sum = max_possible_sum\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if sum < 0 {\n        return max_element\n    }\n    return max(max_so_far, sum * k - max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    \n    if max_element < 0 {\n        return max_element * k\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_wrap = max_wrap + max_so_far\n    \n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    var i = 0\n    var j = 0\n    var start = 0\n    var end = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if k == 2 {\n        max_so_far = max_sub_array_sum(a: a, n: n)\n        for i in 0..<n {\n            a[i] = -a[i]\n        }\n        max_so_far = max(max_so_far, max_sub_array_sum(a: a, n: n))\n        return max_so_far\n    }\n    \n    if sum > 0 {\n        max_so_far = sum * k\n        return max_so_far\n    }\n    \n    if sum == 0 {\n        max_so_far = max_element\n        return max_so_far\n    }\n    \n    max_so_far = min_element\n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    for i in 0..<n {\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start) end: \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var max_sum_kadane = 0\n    var max_sum_kadane_start = 0\n    var max_sum_kadane_end = 0\n    var max_sum_kadane_temp = 0\n    var max_sum_kadane_temp_start = 0\n    var max_sum_kadane_temp_end = 0\n    \n    // find max sum of kadane's algorithm\n    for i in 0..<n {\n        max_sum_kadane_temp += a[i]\n        if max_sum_kadane_temp < 0 {\n            max_sum_kadane_temp = 0\n            max_sum_kadane_temp_start = i + 1\n        }\n        else if max_sum_kadane_temp > max_sum_kadane {\n            max_sum_kadane = max_sum_kadane_temp\n            max_sum_kadane_start = max_sum_kadane_temp_start\n            max_sum_kadane_end = i\n        }\n    }\n    \n    // find max sum of kadane's algorithm\n    for i in 0..<n {\n        max_sum_kadane_temp += a[i]\n        if max_sum_kadane_temp < 0 {\n            max_sum_kadane_temp = 0\n            max_sum_kadane_temp_start = i + 1\n        }\n        else if max_sum_kadane_temp > max_sum_kadane {\n            max_sum_kadane = max_sum_kadane_temp\n            max_sum_kadane_start = max_sum_kadane_temp_start\n            max_sum_kadane_end = i\n        }\n    }\n    \n    // find max sum of kadane's algorithm\n    for i in 0",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start) end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var max_sum = Int.min\n    var min_sum = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    var min_sum_index = 0\n    var max_sum_index = 0\n    var min_sum_array = [Int]()\n    var max_sum_array = [Int]()\n    var max_sum_array_index = 0\n    var min_sum_array_index = 0\n    var max_sum_array_index_start = 0\n    var min_sum_array_index_start = 0\n    var max_sum_array_index_end = 0\n    var min_sum_array_index_end = 0\n    var max_sum_array_index_start_temp = 0\n    var min_sum_array_index_start_temp = 0\n    var max_sum_array_index_end_temp = 0\n    var min_sum_array_index_end_temp = 0\n    var max_sum_array_index_start_temp_1 = 0\n    var min_sum_array_index_start_temp_1 = 0\n    var max_sum_array_index_end_temp_1 = 0\n    var min_sum_array_index_end_temp_1 = 0\n    var max_sum_array_index_start_temp_2 = 0\n    var min_sum_array_index_start_temp_2 = 0\n    var max_sum_array_index_end_temp_2 = 0\n    var min_sum_array_index_end_temp_2 = 0\n    var max_sum_array_index_start_temp_3 = 0\n    var min_sum_array_index_start_temp_3 = 0\n    var max_sum_array_index_end_temp_3 = 0\n    var min_sum_array_index_end_temp_3 = 0\n    var max_sum_array_index_start_temp_4 = 0\n    var min_sum_array_index",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far * k",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var min_element = a[0]\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var min_sum = 0\n    var sum = 0\n    i = 0\n    while i < n {\n        sum += a[i]\n        i += 1\n    }\n    min_sum = sum\n    var j = 0\n    while j < n {\n        sum = sum - a[j] + a[(j + n) % n]\n        if sum < min_sum {\n            min_sum = sum\n        }\n        j += 1\n    }\n    var result = max_so_far\n    var kk = 2\n    while kk <= k {\n        max_so_far = max_so_far + sum\n        if max_so_far > result {\n            result = max_so_far\n        }\n        sum = sum - min_sum\n        kk += 1\n    }\n    return result",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    return max_so_far * k",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var curr_val = 0\n    for i in 0..<start {\n        curr_val = curr_val + a[i]\n    }\n    var curr_max = curr_val\n    for i in start..<n {\n        curr_val = curr_val + a[i] - a[i - start]\n        curr_max = max(curr_max, curr_val)\n    }\n    var total_sum = curr_max\n    for i in 0..<(k - 2) {\n        total_sum = total_sum + max_so_far\n    }\n    return total_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        if max_element < a[i] {\n            max_element = a[i]\n        }\n        if min_element > a[i] {\n            min_element = a[i]\n        }\n    }\n    \n    var max_wrap = 0\n    var min_wrap = 0\n    \n    for i in 0..<n {\n        min_wrap += a[i]\n        max_wrap += a[i]\n    }\n    \n    min_wrap = min_wrap + (k - 2) * min_element\n    max_wrap = max_wrap + (k - 2) * max_element\n    \n    if max_wrap > max_so_far {\n        max_so_far = max_wrap\n    }\n    \n    if min_wrap > max_so_far {\n        max_so_far = min_wrap\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = Int.min\n    var max_index = 0\n    var min_index = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    \n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n            max_index = i\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n            min_index = i\n        }\n        sum += a[i]\n        i += 1\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if sum > 0 {\n        max_sum = sum * k\n    } else {\n        max_sum = max_element\n    }\n    \n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    \n    if max_index > min_index {\n        max_sum = max(max_sum, max_so_far + sum * (k - 2))\n    } else {\n        max_sum = max(max_sum, max_so_far)\n    }\n    \n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_ending_here = sum\n    for i in 0..<n {\n        max_ending_here = max_ending_here + sum - n * a[n - i - 1]\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    return max_so_far",
    "    var sum = 0\n    var max_sum = Int.min\n    var max_ending_here = 0\n    var max_so_far = Int.min\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here = max_ending_here + a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    for i in start...end {\n        sum += a[i%n]\n    }\n    return sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    var result = max_so_far\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    result = max(result, max_so_far)\n    return result",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_sum = max_so_far\n    for i in 0..<n {\n        sum = sum - a[i]\n        max_ending_here = max_ending_here + sum\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    return max(max_sum, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    var max_index = 0\n    var min_index = 0\n    \n    for i in 0..<n {\n        sum += a[i]\n        if a[i] > sum {\n            sum = a[i]\n            max_index = i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            min_index = max_index\n        }\n    }\n    \n    max_so_far = max_sum\n    \n    for i in 0..<k-1 {\n        for j in 0..<n {\n            max_ending_here += a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * k - min_element)\n    return max_so_far",
    "    var max_sum = 0\n    var curr_sum = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        curr_sum += a[i]\n        if i == n - 1 {\n            curr_sum = curr_sum * (k - 1)\n        }\n        if curr_sum < 0 {\n            curr_sum = 0\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum\n        }\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var curr_max = max_so_far\n    var curr_min = 0\n    for i in (end + 1)..<n {\n        curr_max = curr_max + a[i]\n        curr_min = curr_min + a[i]\n    }\n    var max_wrap = curr_max\n    for _ in 0..<k - 1 {\n        if curr_max < 0 {\n            break\n        }\n        curr_max = curr_max + curr_min\n        max_wrap = max(max_wrap, curr_max)\n    }\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_so_far > 0 {\n        return max_so_far * k\n    }\n    return max_element",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_sum = 0\n    var sum = 0\n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                j = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n        }\n        sum = sum + max_so_far\n        max_ending_here = 0\n        max_so_far = 0\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    var j = 0\n    while j < n {\n        max_wrap += a[j]\n        j += 1\n    }\n    max_wrap = max_wrap * k\n    var total = 0\n    j = 0\n    while j < n {\n        total += a[j]\n        j += 1\n    }\n    max_wrap = max_wrap - total\n    if max_wrap > 0 {\n        return max(max_so_far, max_wrap)\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * k\n    max_wrap = max_wrap + max_so_far\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    let max_sum_with_k_array = sum * k\n    let max_sum_with_k_minus_1_array = sum * (k - 1)\n    let max_sum_with_k_plus_1_array = sum * (k + 1)\n    let max_sum_with_k_minus_1_array_and_max_element = max_sum_with_k_minus_1_array + max_element\n    let max_sum_with_k_plus_1_array_and_min_element = max_sum_with_k_plus_1_array + min_element\n    return max(max_so_far, max(max_sum_with_k_array, max(max_sum_with_k_minus_1_array_and_max_element, max_sum_with_k_plus_1_array_and_min_element)))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var sum = 0\n    var max_sum = 0\n    var max_ending_here = 0\n    var min_ending_here = 0\n    var min_sum = 0\n    var max_element = Int.min\n    var flag = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_element = max(max_element, a[i])\n    }\n    if sum > 0 {\n        max_sum = (k - 2) * sum + max_sub_array_sum(a: a, n: n)\n    } else if sum == 0 {\n        max_sum = max_element\n    } else {\n        max_sum = max_sub_array_sum(a: a, n: n)\n        for i in 0..<n {\n            max_ending_here += a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_sum < max_ending_here {\n                max_sum = max_ending_here\n            }\n        }\n        for i in 0..<n {\n            min_ending_here += a[i]\n            if min_ending_here > 0 {\n                min_ending_here = 0\n            }\n            if min_sum > min_ending_here {\n                min_sum = min_ending_here\n            }\n        }\n        max_sum = max(max_sum, sum * (k - 2) + max_sum)\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far * k",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_so_far_k = Int.min\n    var max_ending_here_k = 0\n    var start_k = 0, end_k = 0, s_k = 0\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    for i in 0..<n {\n        max_ending_here_k = max_ending_here_k + a[i]\n        if max_so_far_k < max_ending_here_k {\n            max_so_far_k = max_ending_here_k\n            start_k = s_k\n            end_k = i\n        }\n        if max_ending_here_k < 0 {\n            max_ending_here_k = 0\n            s_k = i + 1\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n    }\n    \n    max_wrap = max_wrap * k\n    \n    if max_wrap > max_so_far_k {\n        max_so_far_k = max_wrap\n    }\n    \n    return max_so_far_k",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * (k - 2)\n    return max(max_so_far, max_wrap + max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var circular_sum = sum * k\n    circular_sum -= max_so_far\n    return max(circular_sum, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_sum = max_so_far\n    for i in 0..<k-1 {\n        max_sum += sum\n        max_ending_here = 0\n        for j in 0..<n {\n            max_ending_here += a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n        }\n        if max_so_far > max_sum {\n            max_sum = max_so_far\n        }\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    var max_sum = max_so_far\n    for i in 1..<k {\n        max_sum = max(max_sum, sum + max_so_far)\n        max_so_far = max(max_so_far, sum + max_so_far)\n        sum += sum\n    }\n    \n    return max_sum",
    "    var max_sum = Int.min\n    var curr_sum = 0\n    var max_so_far = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        curr_sum += a[i%n]\n        if curr_sum > max_sum {\n            max_sum = curr_sum\n            start = s\n            end = i\n        }\n        if curr_sum < 0 {\n            curr_sum = 0\n            s = i + 1\n        }\n    }\n    for i in start...end {\n        max_so_far += a[i%n]\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var count = 0\n    while count < 2 * k {\n        max_ending_here = max_ending_here + a[j % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            i = j + 1\n        }\n        j += 1\n        count += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * k)\n    \n    var curr_prefix = 0\n    var curr_suffix = 0\n    for i in 0..<n {\n        curr_prefix += a[i]\n        max_so_far = max(max_so_far, curr_prefix)\n        curr_suffix += a[n - i - 1]\n        max_so_far = max(max_so_far, curr_suffix)\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start = \\(start), end = \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    let max_sum_without_wrap = max_so_far\n    let max_sum_with_wrap = sum + (k - 2) * min_element\n    \n    return max(max_sum_without_wrap, max_sum_with_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_ending_here = sum\n    for i in 0..<n {\n        max_ending_here = max_ending_here + sum - n * a[n - i - 1]\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var flag = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if a[i] > 0 {\n            flag = 1\n        }\n    }\n    if flag == 0 {\n        return max_element\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_so_far = max(max_so_far, sum * k)\n    var sum_so_far = 0\n    for i in 0..<n {\n        sum_so_far += a[i]\n        max_so_far = max(max_so_far, sum_so_far)\n        sum_so_far = max(sum_so_far, 0)\n    }\n    sum_so_far = 0\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        sum_so_far += a[i]\n        max_so_far = max(max_so_far, sum_so_far)\n        sum_so_far = max(sum_so_far, 0)\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    var j = 0\n    while j < k {\n        i = 0\n        while i < n {\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        sum += a[i]\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    if min_element > 0 {\n        return min_element * k\n    }\n    \n    max_so_far = max_sub_array_sum(a: a, n: n)\n    \n    for i in 1..<k {\n        for j in 0..<n {\n            let temp = a[j]\n            a[j] = sum - n * a[n - j - 1]\n            sum = temp\n        }\n        max_ending_here = max_sub_array_sum(a: a, n: n)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    var j = 0\n    var sum = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var e = 0\n    var max_sum = 0\n    var max_index = 0\n    var max_sum_index = 0\n    \n    for i in 0..<n {\n        if max_element < a[i] {\n            max_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element * k\n    }\n    \n    max_sum = sum\n    max_sum_index = n - 1\n    \n    for j in 1..<k {\n        for i in 0..<n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        if max_sum < (max_so_far + max_sum) {\n            max_sum = max_so_far + max_sum\n            max_index = end\n            max_sum_index = max_index + (n * j)\n        }\n        max_so_far = 0\n        max_ending_here = 0\n        s = 0\n    }\n    print(\"start: \\(start), end: \\(end), max_index: \\(max_index), max_sum_index: \\(max_sum_index)\")\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    max_ending_here = sum\n    \n    for i in 1..<k {\n        max_ending_here = max(sum, max_ending_here + sum)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var ans = max_so_far\n    for _ in 1..<k {\n        ans += sum\n        if ans < max_so_far {\n            ans = max_so_far\n        }\n    }\n    return ans",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_so_far > 0 {\n        return max_so_far * k\n    }\n    return max_element",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    let max_sum_without_wrap = max_so_far\n    let max_sum_with_wrap = sum * k - min_element * n\n    \n    return max(max_sum_without_wrap, max_sum_with_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var min_element = a.min()!\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    if min_element > 0 {\n        return sum * k\n    }\n    let max_sum_with_wrap = sum + max_sub_array_sum(a: a, n: n)\n    return max(max_so_far, max_sum_with_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    if min_element > 0 {\n        return sum * k\n    }\n    \n    return max(max_so_far, sum * (k - 2) + max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"max_so_far: \\(max_so_far)\")\n    print(\"start: \\(start)\")\n    print(\"end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        return max_element\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n    }\n    \n    max_wrap = max_wrap * k\n    max_wrap = max(max_wrap, max_so_far)\n    \n    var i = 0\n    while i < start {\n        max_wrap += a[i]\n        i += 1\n    }\n    \n    i = end + 1\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    \n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_sum = max_so_far\n    for i in 0..<n {\n        sum -= a[i]\n        max_ending_here = max_ending_here + sum\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_sum = max(max_sum, max_so_far)\n    \n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        \n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        \n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if all_negative(a: a, n: n) {\n        return max_element\n    }\n    \n    max_so_far = max_sub_array_sum(a: a, n: n)\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    let circular_sum = sum * k\n    let linear_sum = max_sub_array_sum(a: a, n: n)\n    \n    return max(max_so_far, circular_sum - linear_sum)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    while j < n {\n        if a[j] > max_element {\n            max_element = a[j]\n        }\n        if a[j] < min_element {\n            min_element = a[j]\n        }\n        sum += a[j]\n        max_ending_here += a[j]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        j += 1\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var circular_sum = sum * k\n    circular_sum -= min_element * k\n    if circular_sum > max_so_far {\n        return circular_sum\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        sum += a[i]\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var circular_sum = sum * k\n    circular_sum -= max_so_far\n    return max(max_so_far, circular_sum)"
  ]
}