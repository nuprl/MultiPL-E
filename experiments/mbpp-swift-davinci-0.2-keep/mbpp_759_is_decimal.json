{
  "name": "mbpp_759_is_decimal",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]*[.]{0,1}[0-9]{0,2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: pattern, options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = \"^\\\\d+\\\\.\\\\d{2}$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: num.count)\n    return regex.firstMatch(in: num, options: [], range: range) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let decimal = NSPredicate(format: \"SELF MATCHES %@\", \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return decimal.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.matches(in: num, range: NSRange(location: 0, length: num.count)).count > 0",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.matches(in: num, options: [], range: NSMakeRange(0, num.count)).count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    return num.rangeOfString(\"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .RegularExpressionSearch) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]*(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression, range: nil, locale: nil) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.numberOfMatches(in: num, options: [], range: NSMakeRange(0, num.count)) > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil",
    "    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", regex).evaluate(with: num)",
    "    let decimal = NSPredicate(format: \"SELF MATCHES %@\", \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return decimal.evaluate(with: num)",
    "    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil"
  ]
}