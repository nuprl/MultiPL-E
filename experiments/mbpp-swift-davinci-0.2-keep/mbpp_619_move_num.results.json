{
  "name": "mbpp_619_move_num",
  "language": "swift",
  "prompt": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        if str[i].isNumber {\n            while j > i {\n                if !str[j].isNumber {\n                    break\n                }\n                j -= 1\n            }\n            if j > i {\n                str.swapAt(i, j)\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "/tmp/tmpe6kpifwj.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isNumber {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe6kpifwj.swift:10:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if !str[j].isNumber {\n                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe6kpifwj.swift:16:21: error: value of type 'String' has no member 'swapAt'\n                str.swapAt(i, j)\n                ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var str_arr_copy = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            str_arr_copy.append(str_arr[i])\n        }\n    }\n    str_arr_copy.append(contentsOf: num_arr)\n    return String(str_arr_copy)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str_arr {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var letter_str = \"\"\n    for i in str {\n        if i.isNumber {\n            num_str.append(i)\n        } else {\n            letter_str.append(i)\n        }\n    }\n    str = letter_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    for c in str {\n        if c.isNumber {\n            nums.append(c)\n        }\n    }\n    str.removeAll { $0.isNumber }\n    str.append(contentsOf: nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var str_arr_new = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            num_arr.append(str_arr[i])\n        } else {\n            str_arr_new.append(str_arr[i])\n        }\n    }\n    str_arr_new.append(contentsOf: num_arr)\n    return String(str_arr_new)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        if str[i].isNumber {\n            num_str += String(str[i])\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    str += num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "/tmp/tmp11ndpk_0.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isNumber {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp11ndpk_0.swift:9:31: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            num_str += String(str[i])\n                              ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = [Character]()\n    var chars = [Character]()\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    str = String(chars) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var letters = \"\"\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            letters.append(char)\n        }\n    }\n    return letters + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae81f77fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae81f476561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae81f476286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae81f47613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae81f475bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ae81f5a9ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002ae81f562660 String.subscript.getter + 34\n7    tmpjt5klle0                        0x0000561d42947c27 <unavailable> + 7207\n8    tmpjt5klle0                        0x0000561d42947686 <unavailable> + 5766\n9    libc.so.6                          0x00002ae81f96b460 __libc_start_main + 245\n10   tmpjt5klle0                        0x0000561d42947389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char >= \"0\" && char <= \"9\" {\n            num_str += String(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    for c in str {\n        if c.isNumber {\n            nums += String(c)\n        } else {\n            chars += String(c)\n        }\n    }\n    str = chars + nums\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var alpha_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            alpha_arr.append(str_arr[i])\n        }\n    }\n    return String(alpha_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        }\n    }\n    str.removeAll { $0.isNumber }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if Int(String(str[index])) != nil {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            char_str += String(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var letters = \"\"\n    for char in str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            letters += String(char)\n        }\n    }\n    str = letters + nums\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var test_str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for c in test_str {\n        if c.isNumber {\n            num_str.append(c)\n        } else {\n            char_str.append(c)\n        }\n    }\n    test_str = char_str + num_str\n    return test_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        while i < j && !str[str.index(str.startIndex, offsetBy: i)].isNumber {\n            i += 1\n        }\n        while i < j && !str[str.index(str.startIndex, offsetBy: j)].isLetter {\n            j -= 1\n        }\n        if i < j {\n            str.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmpteelknzy.swift:15:17: error: value of type 'String' has no member 'swapAt'\n            str.swapAt(i, j)\n            ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0fe28ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0fdf81561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af0fdf81286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af0fdf8113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af0fdf80bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af0fe0b4ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002af0fe06d660 String.subscript.getter + 34\n7    tmp0okahv45                        0x000056217554fc37 <unavailable> + 7223\n8    tmp0okahv45                        0x000056217554f696 <unavailable> + 5782\n9    libc.so.6                          0x00002af0fe476460 __libc_start_main + 245\n10   tmp0okahv45                        0x000056217554f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = [Character]()\n    var chars = [Character]()\n    for c in str {\n        if c.isNumber {\n            nums.append(c)\n        } else {\n            chars.append(c)\n        }\n    }\n    str = String(chars) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            char_str += String(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for c in str_arr {\n        if c.isNumber {\n            num_arr.append(c)\n        } else {\n            char_arr.append(c)\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(contentsOf: num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums: [Character] = []\n    var letters: [Character] = []\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            letters.append(char)\n        }\n    }\n    str = String(letters) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num += String(str[index])\n            str.remove(at: index)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59bd2e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59bcfdb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b59bcfdb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b59bcfdb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b59bcfdabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b59bd10eec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b59bd0c7660 String.subscript.getter + 34\n7    tmpbz1wqxwj                        0x00005609240d0c74 <unavailable> + 7284\n8    tmpbz1wqxwj                        0x00005609240d06e6 <unavailable> + 5862\n9    libc.so.6                          0x00002b59bd4d0460 __libc_start_main + 245\n10   tmpbz1wqxwj                        0x00005609240d03e9 <unavailable> + 5097\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var letter_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            letter_str.append(char)\n        }\n    }\n    str = letter_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str_arr {\n        if char >= \"0\" && char <= \"9\" {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    str_arr = char_arr + num_arr\n    return String(str_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    str = String(char_arr) + String(num_arr)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char >= \"0\" && char <= \"9\" {\n            num_str.append(char)\n        }\n    }\n    str.removeAll { (char) -> Bool in\n        return char >= \"0\" && char <= \"9\"\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        while i < j && !str[str.index(str.startIndex, offsetBy: i)].isNumber {\n            i += 1\n        }\n        while i < j && !str[str.index(str.startIndex, offsetBy: j)].isLetter {\n            j -= 1\n        }\n        if i < j {\n            let temp = str[str.index(str.startIndex, offsetBy: i)]\n            str.replaceSubrange(str.index(str.startIndex, offsetBy: i)..<str.index(str.startIndex, offsetBy: i+1), with: String(str[str.index(str.startIndex, offsetBy: j)]))\n            str.replaceSubrange(str.index(str.startIndex, offsetBy: j)..<str.index(str.startIndex, offsetBy: j+1), with: String(temp))\n            i += 1\n            j -= 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpuhl7ox6b/tmpuhl7ox6b.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50c778ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50c7485b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50c7485988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50c74847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhl7ox6b                        0x0000561fb885e6e7 <unavailable> + 5863\n5    libc.so.6                          0x00002b50c797a460 __libc_start_main + 245\n6    tmpuhl7ox6b                        0x0000561fb885e329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var res = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            res.append(char)\n        }\n    }\n    return res + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        if str[i] >= \"0\" && str[i] <= \"9\" {\n            if str[j] >= \"0\" && str[j] <= \"9\" {\n                j -= 1\n            } else {\n                str.swapAt(i, j)\n                i += 1\n                j -= 1\n            }\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmpqhp7bbop.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"0\" && str[i] <= \"9\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqhp7bbop.swift:8:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"0\" && str[i] <= \"9\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqhp7bbop.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str[j] >= \"0\" && str[j] <= \"9\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqhp7bbop.swift:9:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str[j] >= \"0\" && str[j] <= \"9\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqhp7bbop.swift:12:21: error: value of type 'String' has no member 'swapAt'\n                str.swapAt(i, j)\n                ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(contentsOf: num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result_str = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result_str.append(char)\n        }\n    }\n    result_str.append(num_str)\n    return result_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var new_str = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            new_str.append(char)\n        }\n    }\n    new_str.append(contentsOf: num_str)\n    return new_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var i = 0\n    var j = str_arr.count - 1\n    while i < j {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            while j > i && str_arr[j] >= \"0\" && str_arr[j] <= \"9\" {\n                j -= 1\n            }\n            if j > i {\n                let temp = str_arr[i]\n                str_arr[i] = str_arr[j]\n                str_arr[j] = temp\n            }\n        }\n        i += 1\n    }\n    return String(str_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "tmp4d1n_5u8/tmp4d1n_5u8.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b494b33bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b494b032b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b494b032988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b494b0317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4d1n_5u8                        0x0000564165170747 <unavailable> + 5959\n5    libc.so.6                          0x00002b494b527460 __libc_start_main + 245\n6    tmp4d1n_5u8                        0x0000564165170389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for c in str {\n        if c.isNumber {\n            num_str.append(c)\n        } else {\n            char_str.append(c)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var new_str = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            new_str += String(char)\n        }\n    }\n    return new_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    \n    for char in str_arr {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    \n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num += String(str[index])\n            str.remove(at: index)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59bd2e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59bcfdb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b59bcfdb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b59bcfdb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b59bcfdabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b59bd10eec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b59bd0c7660 String.subscript.getter + 34\n7    tmpbz1wqxwj                        0x00005609240d0c74 <unavailable> + 7284\n8    tmpbz1wqxwj                        0x00005609240d06e6 <unavailable> + 5862\n9    libc.so.6                          0x00002b59bd4d0460 __libc_start_main + 245\n10   tmpbz1wqxwj                        0x00005609240d03e9 <unavailable> + 5097\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char >= \"0\" && char <= \"9\" {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = [Character]()\n    var chars = [Character]()\n    \n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    \n    str = String(chars) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for (index, char) in str.enumerated() {\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: str.index(str.startIndex, offsetBy: index))\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aece8d80c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aece8a77561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aece8a77286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aece8a7713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aece8a76bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002aece8baaec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002aece8bc6cd0 String.remove(at:) + 35\n7    tmp3wftkjwi                        0x00005587a7a7bcb7 <unavailable> + 7351\n8    tmp3wftkjwi                        0x00005587a7a7b6f6 <unavailable> + 5878\n9    libc.so.6                          0x00002aece8f6c460 __libc_start_main + 245\n10   tmp3wftkjwi                        0x00005587a7a7b3f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num += String(str[index])\n            str.remove(at: index)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59bd2e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59bcfdb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b59bcfdb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b59bcfdb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b59bcfdabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b59bd10eec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b59bd0c7660 String.subscript.getter + 34\n7    tmpbz1wqxwj                        0x00005609240d0c74 <unavailable> + 7284\n8    tmpbz1wqxwj                        0x00005609240d06e6 <unavailable> + 5862\n9    libc.so.6                          0x00002b59bd4d0460 __libc_start_main + 245\n10   tmpbz1wqxwj                        0x00005609240d03e9 <unavailable> + 5097\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = [Character]()\n    var chars = [Character]()\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    str = String(chars) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str += String(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    for char in str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            chars += String(char)\n        }\n    }\n    str = chars + nums\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str_arr {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char >= \"0\" && char <= \"9\" {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var result = \"\"\n    var num = \"\"\n    for char in str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        }\n    }\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmpcd0s5l2q.swift:11:15: error: value of type 'String' has no member 'replacingOccurrences'\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n          ~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcd0s5l2q.swift:11:69: error: cannot infer contextual base in reference to member 'regularExpression'\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n                                                                   ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac4dbc8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac4db986561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac4db986286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac4db98613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac4db985bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ac4dbab9ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002ac4dba72660 String.subscript.getter + 34\n7    tmprql53v9x                        0x0000560f90704c14 <unavailable> + 7188\n8    tmprql53v9x                        0x0000560f90704686 <unavailable> + 5766\n9    libc.so.6                          0x00002ac4dbe7b460 __libc_start_main + 245\n10   tmprql53v9x                        0x0000560f90704389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str += String(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            char_str += String(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            num_arr.append(str_arr[i])\n            str_arr.remove(at: i)\n        }\n    }\n    str_arr.append(contentsOf: num_arr)\n    return String(str_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac03872c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac03569561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aac03569286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aac0356913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aac03568bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002aac0336a0a3 <unavailable> + 188579\n6    tmpmfr8k5by                        0x0000562d93881e04 <unavailable> + 7684\n7    tmpmfr8k5by                        0x0000562d93881936 <unavailable> + 6454\n8    libc.so.6                          0x00002aac03a5e460 __libc_start_main + 245\n9    tmpmfr8k5by                        0x0000562d93881639 <unavailable> + 5689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        if str[i].isNumber {\n            while j > i && str[j].isNumber {\n                j -= 1\n            }\n            if j > i {\n                str.swapAt(i, j)\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmpc6t7t_lk.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isNumber {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc6t7t_lk.swift:9:28: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            while j > i && str[j].isNumber {\n                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpc6t7t_lk.swift:13:21: error: value of type 'String' has no member 'swapAt'\n                str.swapAt(i, j)\n                ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str_arr {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    return chars + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if Int(String(str[index])) != nil {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if Int(String(str[index])) != nil {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = [Character]()\n    var chars = [Character]()\n    \n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    \n    str = String(chars) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str += String(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var new_str = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            new_str.append(char)\n        }\n    }\n    return new_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num.append(char)\n        } else {\n            str.append(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if Int(String(str[index])) != nil {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let char = str[str.index(str.startIndex, offsetBy: i)]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n            i -= 1\n        }\n        i += 1\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        }\n    }\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmpcd0s5l2q.swift:11:15: error: value of type 'String' has no member 'replacingOccurrences'\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n          ~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcd0s5l2q.swift:11:69: error: cannot infer contextual base in reference to member 'regularExpression'\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n                                                                   ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    for char in str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            chars += String(char)\n        }\n    }\n    str = chars + nums\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var str_arr_new = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            num_arr.append(str_arr[i])\n        } else {\n            str_arr_new.append(str_arr[i])\n        }\n    }\n    str_arr_new.append(contentsOf: num_arr)\n    return String(str_arr_new)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var i = 0\n    var j = str_arr.count - 1\n    while i < j {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            if str_arr[j] >= \"0\" && str_arr[j] <= \"9\" {\n                j -= 1\n            } else {\n                let temp = str_arr[i]\n                str_arr[i] = str_arr[j]\n                str_arr[j] = temp\n                i += 1\n                j -= 1\n            }\n        } else {\n            i += 1\n        }\n    }\n    return String(str_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "tmp1h57imwe/tmp1h57imwe.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac6b66c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac6b63b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac6b63b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac6b63b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1h57imwe                        0x0000564727023747 <unavailable> + 5959\n5    libc.so.6                          0x00002ac6b68ad460 __libc_start_main + 245\n6    tmp1h57imwe                        0x0000564727023389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        }\n    }\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31c5bf9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31c58f0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b31c58f0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b31c58f013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b31c58efbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b31c5a23ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b31c59dc660 String.subscript.getter + 34\n7    tmpaybh_s5e                        0x0000556b8c10dc14 <unavailable> + 7188\n8    tmpaybh_s5e                        0x0000556b8c10d686 <unavailable> + 5766\n9    libc.so.6                          0x00002b31c5de5460 __libc_start_main + 245\n10   tmpaybh_s5e                        0x0000556b8c10d389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char >= \"0\" && char <= \"9\" {\n            num_str.append(char)\n        }\n    }\n    str.removeAll { (char) -> Bool in\n        return char >= \"0\" && char <= \"9\"\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str_arr {\n        if char >= \"0\" && char <= \"9\" {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    str_arr = char_arr + num_arr\n    return String(str_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for char in str_arr {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            char_arr.append(char)\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        }\n        else {\n            i += 1\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        }\n    }\n    str.append(num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31c5bf9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31c58f0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b31c58f0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b31c58f013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b31c58efbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b31c5a23ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b31c59dc660 String.subscript.getter + 34\n7    tmpaybh_s5e                        0x0000556b8c10dc14 <unavailable> + 7188\n8    tmpaybh_s5e                        0x0000556b8c10d686 <unavailable> + 5766\n9    libc.so.6                          0x00002b31c5de5460 __libc_start_main + 245\n10   tmpaybh_s5e                        0x0000556b8c10d389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        }\n    }\n    str.removeAll { $0.isNumber }\n    str.append(contentsOf: nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            str.append(char)\n        }\n    }\n    for char in test_str {\n        if !char.isNumber {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "tmp7ani0haa/tmp7ani0haa.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6242dc1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6242ab8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6242ab8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6242ab77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ani0haa                        0x0000561ffe6e2467 <unavailable> + 5223\n5    libc.so.6                          0x00002b6242fad460 __libc_start_main + 245\n6    tmp7ani0haa                        0x0000561ffe6e20a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var letter_arr = [Character]()\n    for char in str_arr {\n        if char.isNumber {\n            num_arr.append(char)\n        } else {\n            letter_arr.append(char)\n        }\n    }\n    return String(letter_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            num_str.append(str[index])\n            str.remove(at: index)\n        }\n    }\n    str.append(contentsOf: num_str)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b03db167c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b03dae5e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b03dae5e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b03dae5e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b03dae5dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b03daf91ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b03daf4a660 String.subscript.getter + 34\n7    tmpsyvj3ubl                        0x000055a59a418c24 <unavailable> + 7204\n8    tmpsyvj3ubl                        0x000055a59a418696 <unavailable> + 5782\n9    libc.so.6                          0x00002b03db353460 __libc_start_main + 245\n10   tmpsyvj3ubl                        0x000055a59a418399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var alpha_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            alpha_str.append(char)\n        }\n    }\n    str = alpha_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num += String(char)\n        } else {\n            str += String(char)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for c in test_str {\n        if c >= \"0\" && c <= \"9\" {\n            num_str += String(c)\n        } else {\n            char_str += String(c)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            char_str += String(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        if str[i] >= \"0\" && str[i] <= \"9\" {\n            while j > i {\n                if str[j] >= \"0\" && str[j] <= \"9\" {\n                    j -= 1\n                } else {\n                    break\n                }\n            }\n            if j > i {\n                str.swapAt(i, j)\n                j -= 1\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmp3hippiej.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"0\" && str[i] <= \"9\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3hippiej.swift:8:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"0\" && str[i] <= \"9\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3hippiej.swift:10:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if str[j] >= \"0\" && str[j] <= \"9\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3hippiej.swift:10:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if str[j] >= \"0\" && str[j] <= \"9\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3hippiej.swift:17:21: error: value of type 'String' has no member 'swapAt'\n                str.swapAt(i, j)\n                ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var i = 0\n    var j = str_arr.count - 1\n    while i < j {\n        if str_arr[i] >= \"0\" && str_arr[i] <= \"9\" {\n            if str_arr[j] >= \"0\" && str_arr[j] <= \"9\" {\n                j -= 1\n            } else {\n                str_arr.swapAt(i, j)\n                i += 1\n                j -= 1\n            }\n        } else {\n            i += 1\n        }\n    }\n    return String(str_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "tmp6upd0ws7/tmp6upd0ws7.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d522b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d51faab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d51faa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d51fa97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6upd0ws7                        0x0000564ba3fc9797 <unavailable> + 6039\n5    libc.so.6                          0x00002b2d5249f460 __libc_start_main + 245\n6    tmp6upd0ws7                        0x0000564ba3fc93d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for c in test_str {\n        if c.isNumber {\n            num += String(c)\n        } else {\n            str += String(c)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var letter_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str += String(char)\n        } else {\n            letter_str += String(char)\n        }\n    }\n    str = letter_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for c in test_str {\n        if c.isNumber {\n            num += String(c)\n        } else {\n            str += String(c)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    str = char_str + num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    str = chars + nums\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums += String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(contentsOf: num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(contentsOf: num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str.append(char)\n        }\n    }\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "/tmp/tmppbrao1ll.swift:11:15: error: value of type 'String' has no member 'replacingOccurrences'\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n          ~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppbrao1ll.swift:11:69: error: cannot infer contextual base in reference to member 'regularExpression'\n    str = str.replacingOccurrences(of: \"[0-9]\", with: \"\", options: .regularExpression)\n                                                                   ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    for char in str {\n        if char.isNumber {\n            num_str += String(char)\n        }\n    }\n    str.removeAll(where: {$0.isNumber})\n    str += num_str\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        if char.isNumber {\n            num_str.append(char)\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = [Character]()\n    var chars = [Character]()\n    for c in str {\n        if c.isNumber {\n            nums.append(c)\n        } else {\n            chars.append(c)\n        }\n    }\n    str = String(chars) + String(nums)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    \n    for c in str.characters {\n        if c >= \"0\" && c <= \"9\" {\n            nums.append(c)\n        } else {\n            chars.append(c)\n        }\n    }\n    return chars + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "/tmp/tmpusrsx8ar.swift:8:18: error: 'characters' is unavailable: Please use String directly\n    for c in str.characters {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpusrsx8ar.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = test_str\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    for char in str {\n        if char.isNumber {\n            nums += String(char)\n        }\n    }\n    str.removeAll { $0.isNumber }\n    str += nums\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isNumber {\n            nums += String(str[index])\n            str.remove(at: index)\n        }\n        i += 1\n    }\n    return str + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "tmprqnkqc2b/tmprqnkqc2b.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebcf28ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebcef85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebcef85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebcef847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprqnkqc2b                        0x000056199b6b7617 <unavailable> + 5655\n5    libc.so.6                          0x00002aebcf47a460 __libc_start_main + 245\n6    tmprqnkqc2b                        0x000056199b6b7259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var num_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    result.append(contentsOf: num_str)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var nums = \"\"\n    var chars = \"\"\n    for char in str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            chars.append(char)\n        }\n    }\n    return chars + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for c in test_str {\n        if c.isNumber {\n            nums.append(c)\n        } else {\n            result.append(c)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = Array(test_str)\n    var num_arr = [Character]()\n    var char_arr = [Character]()\n    for i in 0..<str_arr.count {\n        if str_arr[i].isNumber {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return String(char_arr + num_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = test_str\n    var num_str = \"\"\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if Int(String(str[index])) != nil {\n            num_str.append(str[index])\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str_arr = test_str.map { String($0) }\n    var num_arr = [String]()\n    var char_arr = [String]()\n    for i in 0..<str_arr.count {\n        if Int(str_arr[i]) != nil {\n            num_arr.append(str_arr[i])\n        } else {\n            char_arr.append(str_arr[i])\n        }\n    }\n    return char_arr.joined() + num_arr.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var num_str = \"\"\n    var char_str = \"\"\n    for char in test_str {\n        if char.isNumber {\n            num_str.append(char)\n        } else {\n            char_str.append(char)\n        }\n    }\n    return char_str + num_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var str = \"\"\n    var num = \"\"\n    for c in test_str {\n        if c.isNumber {\n            num += String(c)\n        } else {\n            str += String(c)\n        }\n    }\n    return str + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str: String) -> String {\n    var result = \"\"\n    var nums = \"\"\n    for char in test_str {\n        if char.isNumber {\n            nums.append(char)\n        } else {\n            result.append(char)\n        }\n    }\n    return result + nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\nassert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")\nassert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}