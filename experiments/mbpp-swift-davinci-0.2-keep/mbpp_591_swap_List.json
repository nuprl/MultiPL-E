{
  "name": "mbpp_591_swap_List",
  "language": "swift",
  "prompt": "\n/// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(swap_List(newList: [12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12])\nassert(swap_List(newList: [1, 2, 3]) == [3, 2, 1])\nassert(swap_List(newList: [4, 5, 6]) == [6, 5, 4])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let temp = newList[0]\n    newList[0] = newList[newList.count - 1]\n    newList[newList.count - 1] = temp\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    newList.swapAt(0, newList.count - 1)\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let temp = newList[0]\n    newList[0] = newList[newList.count - 1]\n    newList[newList.count - 1] = temp\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let temp = newList[0]\n    newList[0] = newList[newList.count - 1]\n    newList[newList.count - 1] = temp\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    if newList.count > 1 {\n        let first = newList[0]\n        let last = newList[newList.count - 1]\n        newList[0] = last\n        newList[newList.count - 1] = first\n    }\n    return newList",
    "    var newList = newList\n    if newList.count > 1 {\n        let first = newList[0]\n        let last = newList[newList.count - 1]\n        newList[0] = last\n        newList[newList.count - 1] = first\n    }\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList",
    "    var newList = newList\n    let first = newList[0]\n    let last = newList[newList.count - 1]\n    newList[0] = last\n    newList[newList.count - 1] = first\n    return newList"
  ]
}