{
  "name": "mbpp_635_heap_sort",
  "language": "swift",
  "prompt": "\n/// Write a function to sort the given list.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted",
    "    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result",
    "    var heap = Heap(iterable)\n    var sorted: [Int] = []\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted",
    "    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    return heap.sort()",
    "    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var sorted_list = [Int]()\n    while !heap.is_empty() {\n        sorted_list.append(heap.pop()!)\n    }\n    return sorted_list",
    "    var heap = Heap(array: iterable, sort: <)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove()!)\n    }\n    return sorted",
    "    var heap = Heap(array: iterable, sort: <)\n    var sortedArray = [Int]()\n    while !heap.isEmpty {\n        sortedArray.append(heap.remove()!)\n    }\n    return sortedArray",
    "    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted",
    "    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted",
    "    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    \n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    \n    return result",
    "    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result",
    "    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while let value = heap.pop() {\n        sorted.append(value)\n    }\n    return sorted"
  ]
}