{
  "name": "mbpp_794_text_starta_endb",
  "language": "swift",
  "prompt": "\n/// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_starta_endb(text: \"aabbbb\") == true)\nassert(text_starta_endb(text: \"aabAbbbc\") == false)\nassert(text_starta_endb(text: \"accddbbjjj\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text.match(\"^a.*b$\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return false",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return false",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return false",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return false",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.rangeOfString(\"a.*b\", options: .RegularExpressionSearch) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let pattern = \"^a.*b$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.+b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.match(\"^a.*b$\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.match(\"^a.*b$\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text.range(of: \"^a.*b$\", options: .regularExpression) != nil",
    "    return text =~ \"^a.*b$\"",
    "    return text =~ \"^a.*b$\"",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text =~ \"^a.*b$\"",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0",
    "    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^a.*b$\", options: [])\n    let range = NSMakeRange(0, text.characters.count)\n    return regex.firstMatchInString(text, options: [], range: range) != nil",
    "    return text =~ \"^a.*b$\""
  ]
}