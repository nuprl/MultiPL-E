{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum1, sum2 + sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp9deh9chk/tmp9deh9chk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b83dea36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b83de72db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b83de72d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b83de72c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9deh9chk                        0x000055b62e6ae421 <unavailable> + 5153\n5    libc.so.6                          0x00002b83dec22460 __libc_start_main + 245\n6    tmp9deh9chk                        0x000055b62e6ae059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpip_dn2v2/tmpip_dn2v2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002affba61dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002affba314b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002affba314988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002affba3137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpip_dn2v2                        0x00005622f6ed5421 <unavailable> + 5153\n5    libc.so.6                          0x00002affba809460 __libc_start_main + 245\n6    tmpip_dn2v2                        0x00005622f6ed5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpiykwftne/tmpiykwftne.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c2439c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c2130b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c2130988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c212f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiykwftne                        0x0000559345600421 <unavailable> + 5153\n5    libc.so.6                          0x00002b23c2625460 __libc_start_main + 245\n6    tmpiykwftne                        0x0000559345600059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpkx6e57l6/tmpkx6e57l6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbde809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbde500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbde500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbde4ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkx6e57l6                        0x000055b88b76a421 <unavailable> + 5153\n5    libc.so.6                          0x00002adbde9f5460 __libc_start_main + 245\n6    tmpkx6e57l6                        0x000055b88b76a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpvo_qn0zo/tmpvo_qn0zo.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85cbd45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85cba3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85cba3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85cba3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvo_qn0zo                        0x0000561c1823b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b85cbf31460 __libc_start_main + 245\n6    tmpvo_qn0zo                        0x0000561c1823b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n        if a[index] < a[k] {\n            sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpggrx1n0a/tmpggrx1n0a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aed44766c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aed4445db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aed4445d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aed4445c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpggrx1n0a                        0x000055da8b06d421 <unavailable> + 5153\n5    libc.so.6                          0x00002aed44952460 __libc_start_main + 245\n6    tmpggrx1n0a                        0x000055da8b06d059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7468d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7465c9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab7465c9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab7465c913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab7465c8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ab7463c8e83 <unavailable> + 188035\n6    tmplmbj54ih                        0x00005595e282274e <unavailable> + 5966\n7    tmplmbj54ih                        0x00005595e282271d <unavailable> + 5917\n8    tmplmbj54ih                        0x00005595e28223a3 <unavailable> + 5027\n9    libc.so.6                          0x00002ab746abe460 __libc_start_main + 245\n10   tmplmbj54ih                        0x00005595e2822059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpn9ipjziw/tmpn9ipjziw.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaee6b20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaee6817b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaee6817988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaee68167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9ipjziw                        0x000055ab7afc5661 <unavailable> + 5729\n5    libc.so.6                          0x00002aaee6d0c460 __libc_start_main + 245\n6    tmpn9ipjziw                        0x000055ab7afc5299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpn9ipjziw/tmpn9ipjziw.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaee6b20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaee6817b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaee6817988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaee68167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9ipjziw                        0x000055ab7afc5661 <unavailable> + 5729\n5    libc.so.6                          0x00002aaee6d0c460 __libc_start_main + 245\n6    tmpn9ipjziw                        0x000055ab7afc5299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpip_dn2v2/tmpip_dn2v2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002affba61dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002affba314b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002affba314988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002affba3137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpip_dn2v2                        0x00005622f6ed5421 <unavailable> + 5153\n5    libc.so.6                          0x00002affba809460 __libc_start_main + 245\n6    tmpip_dn2v2                        0x00005622f6ed5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp9gfn37od/tmp9gfn37od.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b40837b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b40834acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b40834ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b40834ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9gfn37od                        0x000055e48c8ed661 <unavailable> + 5729\n5    libc.so.6                          0x00002b40839a1460 __libc_start_main + 245\n6    tmp9gfn37od                        0x000055e48c8ed299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < index {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpjzd4viuw/tmpjzd4viuw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef5e532c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef5e229b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef5e229988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef5e2287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjzd4viuw                        0x00005624043a5421 <unavailable> + 5153\n5    libc.so.6                          0x00002aef5e71e460 __libc_start_main + 245\n6    tmpjzd4viuw                        0x00005624043a5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in index..<k {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpik47xh2n/tmpik47xh2n.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5331fe0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5331cd7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5331cd7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5331cd67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpik47xh2n                        0x000055acfd5365d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b53321cc460 __libc_start_main + 245\n6    tmpik47xh2n                        0x000055acfd536209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k < index {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp4wnt7_61/tmp4wnt7_61.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b4796cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b47663b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b47663988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b476627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4wnt7_61                        0x0000563d999af421 <unavailable> + 5153\n5    libc.so.6                          0x00002b7b47b58460 __libc_start_main + 245\n6    tmp4wnt7_61                        0x0000563d999af059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpvo_qn0zo/tmpvo_qn0zo.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85cbd45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85cba3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85cba3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85cba3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvo_qn0zo                        0x0000561c1823b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b85cbf31460 __libc_start_main + 245\n6    tmpvo_qn0zo                        0x0000561c1823b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2ac5a6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2ac5762561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2ac5762286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2ac576213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2ac5761bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b2ac5561e83 <unavailable> + 188035\n6    tmp75jmfq3t                        0x000056294395d74e <unavailable> + 5966\n7    tmp75jmfq3t                        0x000056294395d71d <unavailable> + 5917\n8    tmp75jmfq3t                        0x000056294395d3a3 <unavailable> + 5027\n9    libc.so.6                          0x00002b2ac5c57460 __libc_start_main + 245\n10   tmp75jmfq3t                        0x000056294395d059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp8eya_wme/tmp8eya_wme.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b590020fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b58fff06b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b58fff06988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58fff057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8eya_wme                        0x000055ef1682e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b59003fb460 __libc_start_main + 245\n6    tmp8eya_wme                        0x000055ef1682e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k > n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp7ctmz44g/tmp7ctmz44g.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5956beac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59568e1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59568e1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59568e07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ctmz44g                        0x00005606cffb0421 <unavailable> + 5153\n5    libc.so.6                          0x00002b5956dd6460 __libc_start_main + 245\n6    tmp7ctmz44g                        0x00005606cffb0059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpt6t0vvii/tmpt6t0vvii.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3eff7dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3eff4d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3eff4d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3eff4d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt6t0vvii                        0x00005616b6b2c5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b3eff9c8460 __libc_start_main + 245\n6    tmpt6t0vvii                        0x00005616b6b2c1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpeowdwvz_/tmpeowdwvz_.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700186bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7001562b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7001562988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70015617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeowdwvz_                        0x0000562079695421 <unavailable> + 5153\n5    libc.so.6                          0x00002b7001a57460 __libc_start_main + 245\n6    tmpeowdwvz_                        0x0000562079695059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpn6taqhwf/tmpn6taqhwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b251ee52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b251eb49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b251eb49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b251eb487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn6taqhwf                        0x000055d0dee55421 <unavailable> + 5153\n5    libc.so.6                          0x00002b251f03e460 __libc_start_main + 245\n6    tmpn6taqhwf                        0x000055d0dee55059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum += max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpoom312m7/tmpoom312m7.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac39466dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac394364b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac394364988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3943637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoom312m7                        0x000055dbe2505511 <unavailable> + 5393\n5    libc.so.6                          0x00002ac394859460 __libc_start_main + 245\n6    tmpoom312m7                        0x000055dbe2505149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp7k9r2tte/tmp7k9r2tte.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc043acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc040a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc040a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc040a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7k9r2tte                        0x000055b02a5f75a1 <unavailable> + 5537\n5    libc.so.6                          0x00002acc04598460 __libc_start_main + 245\n6    tmp7k9r2tte                        0x000055b02a5f71d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpdq7u26df/tmpdq7u26df.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1607994c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b160768bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b160768b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b160768a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdq7u26df                        0x0000556cae684661 <unavailable> + 5729\n5    libc.so.6                          0x00002b1607b80460 __libc_start_main + 245\n6    tmpdq7u26df                        0x0000556cae684299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpxt0xp1bd/tmpxt0xp1bd.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad4fc86c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad4f97db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad4f97d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad4f97c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxt0xp1bd                        0x000055673a27e421 <unavailable> + 5153\n5    libc.so.6                          0x00002aad4fe72460 __libc_start_main + 245\n6    tmpxt0xp1bd                        0x000055673a27e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var maxSum = dp[index]\n    for i in index..<k {\n        if dp[i] > maxSum {\n            maxSum = dp[i]\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmp9a5w_rth/tmp9a5w_rth.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add9f131c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add9ee28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add9ee28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add9ee277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9a5w_rth                        0x000055add61195d1 <unavailable> + 5585\n5    libc.so.6                          0x00002add9f31d460 __libc_start_main + 245\n6    tmp9a5w_rth                        0x000055add6119209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt66oc_rx/tmpt66oc_rx.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b87b3105c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b87b2dfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b87b2dfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b87b2dfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt66oc_rx                        0x000055940464d5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b87b32f1460 __libc_start_main + 245\n6    tmpt66oc_rx                        0x000055940464d1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpy9uxz3a4/tmpy9uxz3a4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79f68fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79f65f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79f65f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79f65f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9uxz3a4                        0x000055e817d87421 <unavailable> + 5153\n5    libc.so.6                          0x00002b79f6ae9460 __libc_start_main + 245\n6    tmpy9uxz3a4                        0x000055e817d87059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpgqavkc95/tmpgqavkc95.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4e72d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4e6fcbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4e6fcb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4e6fca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqavkc95                        0x000055e51667d755 <unavailable> + 5973\n5    libc.so.6                          0x00002ae4e74c0460 __libc_start_main + 245\n6    tmpgqavkc95                        0x000055e51667d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == -1 {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1)\n    } else {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if k == -1 {\n        if a[index] > a[index + 1] {\n            sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1))\n        }\n    } else {\n        if a[index] > a[k] {\n            sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpu_8cfxa3/tmpu_8cfxa3.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89c4075c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89c3d6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89c3d6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89c3d6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu_8cfxa3                        0x0000556f347fe421 <unavailable> + 5153\n5    libc.so.6                          0x00002b89c4261460 __libc_start_main + 245\n6    tmpu_8cfxa3                        0x0000556f347fe059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var sum2 = 0\n    if a[index] < a[k] {\n        sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1) + a[index]\n    }\n    return max(sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmppw4lllf3/tmppw4lllf3.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b794c410c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b794c107b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b794c107988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b794c1067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppw4lllf3                        0x000055b07fdf5421 <unavailable> + 5153\n5    libc.so.6                          0x00002b794c5fc460 __libc_start_main + 245\n6    tmppw4lllf3                        0x000055b07fdf5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in 0...index {\n        sum += a[i]\n    }\n    sum += dp[k]\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmphrso2fbn/tmphrso2fbn.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adcc7dbfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adcc7ab6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adcc7ab6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adcc7ab57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphrso2fbn                        0x0000557af5839751 <unavailable> + 5969\n5    libc.so.6                          0x00002adcc7fab460 __libc_start_main + 245\n6    tmphrso2fbn                        0x0000557af5839389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    let including = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let excluding = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(including, excluding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpohsejf2p/tmpohsejf2p.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9ce11cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9cde13b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9cde13988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9cde127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpohsejf2p                        0x000055e885c6e421 <unavailable> + 5153\n5    libc.so.6                          0x00002ab9ce308460 __libc_start_main + 245\n6    tmpohsejf2p                        0x000055e885c6e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index >= n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let including = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let excluding = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(including, excluding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpuipdco5c/tmpuipdco5c.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3ce943c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ce63ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ce63a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ce6397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuipdco5c                        0x00005613648b9421 <unavailable> + 5153\n5    libc.so.6                          0x00002ae3ceb2f460 __libc_start_main + 245\n6    tmpuipdco5c                        0x00005613648b9059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpvo_qn0zo/tmpvo_qn0zo.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85cbd45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85cba3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85cba3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85cba3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvo_qn0zo                        0x0000561c1823b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b85cbf31460 __libc_start_main + 245\n6    tmpvo_qn0zo                        0x0000561c1823b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpf8iuwk7s/tmpf8iuwk7s.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe287d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe284ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abe284ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abe284cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf8iuwk7s                        0x000055e29c2b2421 <unavailable> + 5153\n5    libc.so.6                          0x00002abe289c3460 __libc_start_main + 245\n6    tmpf8iuwk7s                        0x000055e29c2b2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp_xtxpqtp/tmp_xtxpqtp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b452c000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b452bcf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b452bcf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b452bcf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xtxpqtp                        0x0000557ac7949421 <unavailable> + 5153\n5    libc.so.6                          0x00002b452c1ec460 __libc_start_main + 245\n6    tmp_xtxpqtp                        0x0000557ac7949059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if k > index {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k))\n    }\n    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpwlc8du1r/tmpwlc8du1r.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1544c46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b154493db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b154493d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b154493c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwlc8du1r                        0x00005577a3777421 <unavailable> + 5153\n5    libc.so.6                          0x00002b1544e32460 __libc_start_main + 245\n6    tmpwlc8du1r                        0x00005577a3777059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k > index && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpy2xi9a3j/tmpy2xi9a3j.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd33ccec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd339c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd339c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd339c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy2xi9a3j                        0x000055bf193b5421 <unavailable> + 5153\n5    libc.so.6                          0x00002abd33eba460 __libc_start_main + 245\n6    tmpy2xi9a3j                        0x000055bf193b5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum + sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpe6vh7h5b/tmpe6vh7h5b.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b936d255c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b936cf4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b936cf4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b936cf4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe6vh7h5b                        0x0000563caed80421 <unavailable> + 5153\n5    libc.so.6                          0x00002b936d441460 __libc_start_main + 245\n6    tmpe6vh7h5b                        0x0000563caed80059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpox6nw5f8/tmpox6nw5f8.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b5bc2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b58b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b58b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b58b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpox6nw5f8                        0x000055c9051515a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b11b5dae460 __libc_start_main + 245\n6    tmpox6nw5f8                        0x000055c9051511d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpox6nw5f8/tmpox6nw5f8.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b5bc2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b58b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b58b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b58b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpox6nw5f8                        0x000055c9051515a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b11b5dae460 __libc_start_main + 245\n6    tmpox6nw5f8                        0x000055c9051511d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp7jm463yo/tmp7jm463yo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16ab481c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16ab178b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16ab178988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16ab1777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7jm463yo                        0x0000561076a9b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b16ab66d460 __libc_start_main + 245\n6    tmp7jm463yo                        0x0000561076a9b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpf8iuwk7s/tmpf8iuwk7s.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe287d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe284ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abe284ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abe284cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf8iuwk7s                        0x000055e29c2b2421 <unavailable> + 5153\n5    libc.so.6                          0x00002abe289c3460 __libc_start_main + 245\n6    tmpf8iuwk7s                        0x000055e29c2b2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index + 1 {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp9h6c3mj5/tmp9h6c3mj5.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4bb6bd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4bb68ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4bb68ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4bb68cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9h6c3mj5                        0x0000560b4e51e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4bb6dc3460 __libc_start_main + 245\n6    tmp9h6c3mj5                        0x0000560b4e51e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpgqavkc95/tmpgqavkc95.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4e72d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4e6fcbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4e6fcb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4e6fca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqavkc95                        0x000055e51667d755 <unavailable> + 5973\n5    libc.so.6                          0x00002ae4e74c0460 __libc_start_main + 245\n6    tmpgqavkc95                        0x000055e51667d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpouvlnq2u/tmpouvlnq2u.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bf5933c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bf562ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bf562a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bf56297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpouvlnq2u                        0x000056521ec44421 <unavailable> + 5153\n5    libc.so.6                          0x00002b8bf5b1f460 __libc_start_main + 245\n6    tmpouvlnq2u                        0x000056521ec44059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpeok008g6/tmpeok008g6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10c52afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10c4fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10c4fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10c4fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeok008g6                        0x000055b21d77e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b10c549b460 __libc_start_main + 245\n6    tmpeok008g6                        0x000055b21d77e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<n {\n        if i != k {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmph8btsu0l/tmph8btsu0l.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad0e5a18c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad0e570fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad0e570f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0e570e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph8btsu0l                        0x0000560d566eb661 <unavailable> + 5729\n5    libc.so.6                          0x00002ad0e5c04460 __libc_start_main + 245\n6    tmph8btsu0l                        0x0000560d566eb299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpiykwftne/tmpiykwftne.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c2439c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c2130b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c2130988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c212f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiykwftne                        0x0000559345600421 <unavailable> + 5153\n5    libc.so.6                          0x00002b23c2625460 __libc_start_main + 245\n6    tmpiykwftne                        0x0000559345600059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123759,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if index == k {\n        return a[index]\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k) + a[index])\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpz4binbu5/tmpz4binbu5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60531bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6052eb2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6052eb2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6052eb17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4binbu5                        0x0000557cdec0f5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b60533a7460 __libc_start_main + 245\n6    tmpz4binbu5                        0x0000557cdec0f1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmppn2461b6/tmppn2461b6.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3dc4f5dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3dc4c54b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3dc4c54988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3dc4c537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppn2461b6                        0x000056318ac66421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3dc5149460 __libc_start_main + 245\n6    tmppn2461b6                        0x000056318ac66059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpwuvo5z9u/tmpwuvo5z9u.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd4d313c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd4d00ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd4d00a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd4d0097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwuvo5z9u                        0x00005607094e7421 <unavailable> + 5153\n5    libc.so.6                          0x00002afd4d4ff460 __libc_start_main + 245\n6    tmpwuvo5z9u                        0x00005607094e7059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var result = 0\n    for i in index..<k {\n        result = max(result, dp[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmp32_tt80j/tmp32_tt80j.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabfda9ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabfd791b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabfd791988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabfd7907b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp32_tt80j                        0x00005655086c2661 <unavailable> + 5729\n5    libc.so.6                          0x00002aabfdc86460 __libc_start_main + 245\n6    tmp32_tt80j                        0x00005655086c2299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpuy6bfzzj/tmpuy6bfzzj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9eb2177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9eb1e6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9eb1e6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9eb1e6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuy6bfzzj                        0x0000562d0113e661 <unavailable> + 5729\n5    libc.so.6                          0x00002b9eb2363460 __libc_start_main + 245\n6    tmpuy6bfzzj                        0x0000562d0113e299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                if i == k {\n                    dp[i] = max(dp[i], dp[j] + a[i])\n                } else {\n                    dp[i] = max(dp[i], dp[j])\n                }\n            }\n        }\n    }\n    return dp[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmp5bhmom07/tmp5bhmom07.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a91955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a9164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a9164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a9164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5bhmom07                        0x000055985ce0d661 <unavailable> + 5729\n5    libc.so.6                          0x00002b9a91b41460 __libc_start_main + 245\n6    tmp5bhmom07                        0x000055985ce0d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpb46nj0m7/tmpb46nj0m7.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7554022c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7553d19b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7553d19988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7553d187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb46nj0m7                        0x000055d88206c5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b755420e460 __libc_start_main + 245\n6    tmpb46nj0m7                        0x000055d88206c1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmp71lejidb/tmp71lejidb.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b30e0b92c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b30e0889b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b30e0889988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b30e08887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp71lejidb                        0x0000564e0d201421 <unavailable> + 5153\n5    libc.so.6                          0x00002b30e0d7e460 __libc_start_main + 245\n6    tmp71lejidb                        0x0000564e0d201059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt0i4o04a/tmpt0i4o04a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b037b89fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b037b596b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b037b596988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b037b5957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt0i4o04a                        0x000055a55fcae421 <unavailable> + 5153\n5    libc.so.6                          0x00002b037ba8b460 __libc_start_main + 245\n6    tmpt0i4o04a                        0x000055a55fcae059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpa9gczg0y/tmpa9gczg0y.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6284fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6281f3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6281f3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6281f27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa9gczg0y                        0x000055e996e62421 <unavailable> + 5153\n5    libc.so.6                          0x00002af6286e8460 __libc_start_main + 245\n6    tmpa9gczg0y                        0x000055e996e62059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp90up4jmt/tmp90up4jmt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b58dce06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b58dcafdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b58dcafd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58dcafc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp90up4jmt                        0x000055ae9ad4e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b58dcff2460 __libc_start_main + 245\n6    tmp90up4jmt                        0x000055ae9ad4e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpgb8a81vp/tmpgb8a81vp.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac2a826dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2a7f64b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2a7f64988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2a7f637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgb8a81vp                        0x000055750eceb421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac2a8459460 __libc_start_main + 245\n6    tmpgb8a81vp                        0x000055750eceb059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpeok008g6/tmpeok008g6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10c52afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10c4fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10c4fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10c4fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeok008g6                        0x000055b21d77e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b10c549b460 __libc_start_main + 245\n6    tmpeok008g6                        0x000055b21d77e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k < index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpwxnn4gr_/tmpwxnn4gr_.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae7a1a1fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae7a1716b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae7a1716988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7a17157b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwxnn4gr_                        0x000055b63155a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ae7a1c0b460 __libc_start_main + 245\n6    tmpwxnn4gr_                        0x000055b63155a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpndc_65hk/tmpndc_65hk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac00b962c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac00b659b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac00b659988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac00b6587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpndc_65hk                        0x000055ebb30ef5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ac00bb4e460 __libc_start_main + 245\n6    tmpndc_65hk                        0x000055ebb30ef1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpmfxgdcmb/tmpmfxgdcmb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b70e1b77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b70e186eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b70e186e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70e186d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmfxgdcmb                        0x00005578d7700421 <unavailable> + 5153\n5    libc.so.6                          0x00002b70e1d63460 __libc_start_main + 245\n6    tmpmfxgdcmb                        0x00005578d7700059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpzzex7a6q/tmpzzex7a6q.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad815843c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad81553ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad81553a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8155397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzzex7a6q                        0x0000557b95d715a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad815a2f460 __libc_start_main + 245\n6    tmpzzex7a6q                        0x0000557b95d711d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpxziglhyh/tmpxziglhyh.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b41797cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b41794c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b41794c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b41794c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxziglhyh                        0x0000556b030c75d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b41799ba460 __libc_start_main + 245\n6    tmpxziglhyh                        0x0000556b030c7209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpsp04z554/tmpsp04z554.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7a262fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7a2326b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7a2326988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7a23257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsp04z554                        0x0000556075aee5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad7a281b460 __libc_start_main + 245\n6    tmpsp04z554                        0x0000556075aee1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += dp[i]\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpe8jip38k/tmpe8jip38k.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b18de63ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b18de331b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b18de331988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b18de3307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8jip38k                        0x000055839bac05d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b18de826460 __libc_start_main + 245\n6    tmpe8jip38k                        0x000055839bac0209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + a[index]\n    } else {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp314agnmm/tmp314agnmm.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9997773c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b999746ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b999746a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99974697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp314agnmm                        0x000055d5a28e5391 <unavailable> + 5009\n5    libc.so.6                          0x00002b999795f460 __libc_start_main + 245\n6    tmp314agnmm                        0x000055d5a28e4fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return sum + dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp_gvfljxj/tmp_gvfljxj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9112ee6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9112bddb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9112bdd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9112bdc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_gvfljxj                        0x0000555ec75a5661 <unavailable> + 5729\n5    libc.so.6                          0x00002b91130d2460 __libc_start_main + 245\n6    tmp_gvfljxj                        0x0000555ec75a5299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpip_dn2v2/tmpip_dn2v2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002affba61dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002affba314b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002affba314988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002affba3137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpip_dn2v2                        0x00005622f6ed5421 <unavailable> + 5153\n5    libc.so.6                          0x00002affba809460 __libc_start_main + 245\n6    tmpip_dn2v2                        0x00005622f6ed5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<n {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmptoosxs26/tmptoosxs26.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38dc2cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38dbfc5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38dbfc5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38dbfc47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptoosxs26                        0x000055a220a3b5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b38dc4ba460 __libc_start_main + 245\n6    tmptoosxs26                        0x000055a220a3b209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpn6taqhwf/tmpn6taqhwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b251ee52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b251eb49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b251eb49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b251eb487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn6taqhwf                        0x000055d0dee55421 <unavailable> + 5153\n5    libc.so.6                          0x00002b251f03e460 __libc_start_main + 245\n6    tmpn6taqhwf                        0x000055d0dee55059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == -1 {\n        for i in index..<n {\n            sum = max(sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    } else {\n        for i in index..<n {\n            if i != k {\n                sum = max(sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp3j1inv75/tmp3j1inv75.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60fa470c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60fa167b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60fa167988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60fa1667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3j1inv75                        0x0000563feb8065a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b60fa65c460 __libc_start_main + 245\n6    tmp3j1inv75                        0x0000563feb8061d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<index {\n        if a[i] < a[k] && dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpolw9uhhf/tmpolw9uhhf.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1f8c75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1f896cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae1f896c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae1f896b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpolw9uhhf                        0x00005580dd50e6c5 <unavailable> + 5829\n5    libc.so.6                          0x00002ae1f8e61460 __libc_start_main + 245\n6    tmpolw9uhhf                        0x00005580dd50e209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp8nu5dut0/tmp8nu5dut0.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3439e39c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3439b30b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3439b30988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3439b2f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8nu5dut0                        0x000055b4f9b085a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b343a025460 __libc_start_main + 245\n6    tmp8nu5dut0                        0x000055b4f9b081d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[j] + a[i] > dp[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] && dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpqomsq58e/tmpqomsq58e.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7a0eb73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7a0e86ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7a0e86a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7a0e8697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqomsq58e                        0x0000559d97dfd6c5 <unavailable> + 5829\n5    libc.so.6                          0x00002b7a0ed5f460 __libc_start_main + 245\n6    tmpqomsq58e                        0x0000559d97dfd209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[k] > a[i] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpnaiva55u/tmpnaiva55u.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1721a88c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b172177fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b172177f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b172177e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnaiva55u                        0x000055780023d755 <unavailable> + 5973\n5    libc.so.6                          0x00002b1721c74460 __libc_start_main + 245\n6    tmpnaiva55u                        0x000055780023d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return dp[index] + sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmprla7fmp8/tmprla7fmp8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4175826c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b417551db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b417551d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b417551c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprla7fmp8                        0x000055d8a04a1661 <unavailable> + 5729\n5    libc.so.6                          0x00002b4175a12460 __libc_start_main + 245\n6    tmprla7fmp8                        0x000055d8a04a1299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpeok008g6/tmpeok008g6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10c52afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10c4fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10c4fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10c4fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeok008g6                        0x000055b21d77e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b10c549b460 __libc_start_main + 245\n6    tmpeok008g6                        0x000055b21d77e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return dp[index] + sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmprla7fmp8/tmprla7fmp8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4175826c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b417551db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b417551d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b417551c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprla7fmp8                        0x000055d8a04a1661 <unavailable> + 5729\n5    libc.so.6                          0x00002b4175a12460 __libc_start_main + 245\n6    tmprla7fmp8                        0x000055d8a04a1299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    let include = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp6oorlt_i/tmp6oorlt_i.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6330c3cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6330933b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6330933988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63309327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6oorlt_i                        0x000055b256963421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6330e28460 __libc_start_main + 245\n6    tmp6oorlt_i                        0x000055b256963059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpxt0xp1bd/tmpxt0xp1bd.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad4fc86c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad4f97db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad4f97d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad4f97c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxt0xp1bd                        0x000055673a27e421 <unavailable> + 5153\n5    libc.so.6                          0x00002aad4fe72460 __libc_start_main + 245\n6    tmpxt0xp1bd                        0x000055673a27e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k + 1) + a[k])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp_j3ebmox/tmp_j3ebmox.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c714bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c711b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c711b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c711b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_j3ebmox                        0x000055a6a5a6e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b0c716a6460 __libc_start_main + 245\n6    tmp_j3ebmox                        0x000055a6a5a6e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpqnno8x4i/tmpqnno8x4i.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4795cc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b47959bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b47959bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b47959bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqnno8x4i                        0x0000557d13b13421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4795eb1460 __libc_start_main + 245\n6    tmpqnno8x4i                        0x0000557d13b13059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpguey_neb/tmpguey_neb.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ce716cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ce6e63b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ce6e63988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ce6e627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguey_neb                        0x0000562b64b10421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6ce7358460 __libc_start_main + 245\n6    tmpguey_neb                        0x0000562b64b10059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpn9ipjziw/tmpn9ipjziw.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaee6b20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaee6817b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaee6817988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaee68167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9ipjziw                        0x000055ab7afc5661 <unavailable> + 5729\n5    libc.so.6                          0x00002aaee6d0c460 __libc_start_main + 245\n6    tmpn9ipjziw                        0x000055ab7afc5299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if k < index {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmphqjebtm3/tmphqjebtm3.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1502e6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1502b65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1502b65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1502b647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphqjebtm3                        0x0000558fea49e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b150305a460 __libc_start_main + 245\n6    tmphqjebtm3                        0x0000558fea49e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpip_dn2v2/tmpip_dn2v2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002affba61dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002affba314b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002affba314988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002affba3137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpip_dn2v2                        0x00005622f6ed5421 <unavailable> + 5153\n5    libc.so.6                          0x00002affba809460 __libc_start_main + 245\n6    tmpip_dn2v2                        0x00005622f6ed5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpzq3bctxk/tmpzq3bctxk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4045c34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b404592bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b404592b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b404592a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzq3bctxk                        0x00005610ec0b8421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4045e20460 __libc_start_main + 245\n6    tmpzq3bctxk                        0x00005610ec0b8059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpztg13yup/tmpztg13yup.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51b9471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b51b9168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b51b9168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51b91677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztg13yup                        0x000056434f5665a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b51b965d460 __libc_start_main + 245\n6    tmpztg13yup                        0x000056434f5661d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k) + a[index])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp_q0xej9l/tmp_q0xej9l.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b83a1bccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b83a18c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b83a18c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b83a18c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_q0xej9l                        0x000055e9055915a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b83a1db8460 __libc_start_main + 245\n6    tmp_q0xej9l                        0x000055e9055911d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpx3igk_lb/tmpx3igk_lb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f9adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f97d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f97d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f97d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx3igk_lb                        0x000055a3e8c9a421 <unavailable> + 5153\n5    libc.so.6                          0x00002b00f9ccb460 __libc_start_main + 245\n6    tmpx3igk_lb                        0x000055a3e8c9a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    let including_k = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    let excluding_k = max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    return max(including_k, excluding_k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmps4sixa2c/tmps4sixa2c.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7b7fafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7b7ca6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7b7ca6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7b7ca57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps4sixa2c                        0x00005563355a4421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad7b819b460 __libc_start_main + 245\n6    tmps4sixa2c                        0x00005563355a4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpdp36m9qw/tmpdp36m9qw.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e6d5eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e6d2e1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e6d2e1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e6d2e07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdp36m9qw                        0x0000562c34622421 <unavailable> + 5153\n5    libc.so.6                          0x00002b9e6d7d6460 __libc_start_main + 245\n6    tmpdp36m9qw                        0x0000562c34622059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index] + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpx1hkirp0/tmpx1hkirp0.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12aa10bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12a9e02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12a9e02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12a9e017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx1hkirp0                        0x000055a2f5dfb661 <unavailable> + 5729\n5    libc.so.6                          0x00002b12aa2f7460 __libc_start_main + 245\n6    tmpx1hkirp0                        0x000055a2f5dfb299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == 0 {\n        return a[0]\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: index))\n        }\n    }\n    return max_sum + a[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpr74hi6tv/tmpr74hi6tv.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05f4313c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05f400ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05f400a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05f40097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr74hi6tv                        0x000055cfc04645a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b05f44ff460 __libc_start_main + 245\n6    tmpr74hi6tv                        0x000055cfc04641d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j])\n            }\n        }\n        dp[i] += a[i]\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmph0gj6owk/tmph0gj6owk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b526258cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5262283b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5262283988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52622827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph0gj6owk                        0x000055b43aa0a661 <unavailable> + 5729\n5    libc.so.6                          0x00002b5262778460 __libc_start_main + 245\n6    tmph0gj6owk                        0x000055b43aa0a299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp_xtxpqtp/tmp_xtxpqtp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b452c000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b452bcf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b452bcf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b452bcf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xtxpqtp                        0x0000557ac7949421 <unavailable> + 5153\n5    libc.so.6                          0x00002b452c1ec460 __libc_start_main + 245\n6    tmp_xtxpqtp                        0x0000557ac7949059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpviig_unl/tmpviig_unl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0b781aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0b77ea5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0b77ea5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0b77ea47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpviig_unl                        0x00005556f7cea5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b0b7839a460 __libc_start_main + 245\n6    tmpviig_unl                        0x00005556f7cea1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpovf76a_q/tmpovf76a_q.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad605bc6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6058bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6058bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6058bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpovf76a_q                        0x0000555834288421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad605db2460 __libc_start_main + 245\n6    tmpovf76a_q                        0x0000555834288059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123759,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return a[k] + sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmplv_vq8g6/tmplv_vq8g6.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a459dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a456d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a456d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a456d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplv_vq8g6                        0x000055f7520d85a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b6a45bc6460 __libc_start_main + 245\n6    tmplv_vq8g6                        0x000055f7520d81d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    // include kth element\n    var include = 0\n    if a[index] < a[k] {\n        include = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n    // exclude kth element\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpou7am2l2/tmpou7am2l2.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b825378ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8253485b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8253485988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b82534847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpou7am2l2                        0x000055e5f6fbc421 <unavailable> + 5153\n5    libc.so.6                          0x00002b825397a460 __libc_start_main + 245\n6    tmpou7am2l2                        0x000055e5f6fbc059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k) + a[i])\n        }\n    }\n    return max(sum, max_sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpogfw9d5w/tmpogfw9d5w.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad471dc1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad471ab8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad471ab8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad471ab77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogfw9d5w                        0x00005584a78c65a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad471fad460 __libc_start_main + 245\n6    tmpogfw9d5w                        0x00005584a78c61d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var result = 0\n    for i in index..<k {\n        result += a[i]\n    }\n    return max(dp[n-1], result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpi2gh38ql/tmpi2gh38ql.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d3e288c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d3df7fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d3df7f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d3df7e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi2gh38ql                        0x0000555c009e9661 <unavailable> + 5729\n5    libc.so.6                          0x00002b0d3e474460 __libc_start_main + 245\n6    tmpi2gh38ql                        0x0000555c009e9299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < n {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp0e2dlhya/tmp0e2dlhya.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c5bccfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c5b9c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c5b9c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c5b9c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0e2dlhya                        0x0000557a67c0b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4c5bebb460 __libc_start_main + 245\n6    tmp0e2dlhya                        0x0000557a67c0b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if k > index && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpwwmfepge/tmpwwmfepge.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0e79cddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0e799d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0e799d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0e799d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwwmfepge                        0x00005649dc97b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b0e79ec9460 __libc_start_main + 245\n6    tmpwwmfepge                        0x00005649dc97b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmptjacnmll/tmptjacnmll.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af3a6ab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af3a67a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af3a67a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3a67a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptjacnmll                        0x0000560dfcf715a1 <unavailable> + 5537\n5    libc.so.6                          0x00002af3a6c9c460 __libc_start_main + 245\n6    tmptjacnmll                        0x0000560dfcf711d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123760,
      "stdout": "",
      "stderr": "tmpuy6bfzzj/tmpuy6bfzzj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9eb2177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9eb1e6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9eb1e6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9eb1e6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuy6bfzzj                        0x0000562d0113e661 <unavailable> + 5729\n5    libc.so.6                          0x00002b9eb2363460 __libc_start_main + 245\n6    tmpuy6bfzzj                        0x0000562d0113e299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var ans2 = 0\n    if a[index] < a[k] {\n        ans2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(ans1, ans2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpo6s49mf8/tmpo6s49mf8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49b30d9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49b2dd0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49b2dd0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49b2dcf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo6s49mf8                        0x0000563fac03b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b49b32c5460 __libc_start_main + 245\n6    tmpo6s49mf8                        0x0000563fac03b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp90up4jmt/tmp90up4jmt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b58dce06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b58dcafdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b58dcafd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58dcafc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp90up4jmt                        0x000055ae9ad4e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b58dcff2460 __libc_start_main + 245\n6    tmp90up4jmt                        0x000055ae9ad4e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpip_dn2v2/tmpip_dn2v2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002affba61dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002affba314b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002affba314988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002affba3137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpip_dn2v2                        0x00005622f6ed5421 <unavailable> + 5153\n5    libc.so.6                          0x00002affba809460 __libc_start_main + 245\n6    tmpip_dn2v2                        0x00005622f6ed5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[j] + a[i] > dp[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpcdr3b81y/tmpcdr3b81y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab463316c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab46300db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab46300d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab46300c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcdr3b81y                        0x000055f27fe81661 <unavailable> + 5729\n5    libc.so.6                          0x00002ab463502460 __libc_start_main + 245\n6    tmpcdr3b81y                        0x000055f27fe81299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpgqavkc95/tmpgqavkc95.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4e72d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4e6fcbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4e6fcb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4e6fca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqavkc95                        0x000055e51667d755 <unavailable> + 5973\n5    libc.so.6                          0x00002ae4e74c0460 __libc_start_main + 245\n6    tmpgqavkc95                        0x000055e51667d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpkx6e57l6/tmpkx6e57l6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbde809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbde500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbde500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbde4ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkx6e57l6                        0x000055b88b76a421 <unavailable> + 5153\n5    libc.so.6                          0x00002adbde9f5460 __libc_start_main + 245\n6    tmpkx6e57l6                        0x000055b88b76a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpmiq9o_zj/tmpmiq9o_zj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b191e53ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b191e231b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b191e231988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b191e2307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmiq9o_zj                        0x000056436192c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b191e726460 __libc_start_main + 245\n6    tmpmiq9o_zj                        0x000056436192c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if index == k {\n        return a[index]\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    \n    return max_sum + a[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpanr9u53s/tmpanr9u53s.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96fd524c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96fd21bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96fd21b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96fd21a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpanr9u53s                        0x0000559aed722511 <unavailable> + 5393\n5    libc.so.6                          0x00002b96fd710460 __libc_start_main + 245\n6    tmpanr9u53s                        0x0000559aed722149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpo4koldbc/tmpo4koldbc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b434a8a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b434a597b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b434a597988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b434a5967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo4koldbc                        0x000055698245f421 <unavailable> + 5153\n5    libc.so.6                          0x00002b434aa8c460 __libc_start_main + 245\n6    tmpo4koldbc                        0x000055698245f059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpvo_qn0zo/tmpvo_qn0zo.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85cbd45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85cba3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85cba3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85cba3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvo_qn0zo                        0x0000561c1823b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b85cbf31460 __libc_start_main + 245\n6    tmpvo_qn0zo                        0x0000561c1823b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += a[i]\n    }\n    return max_sum + dp[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp7h7op_dr/tmp7h7op_dr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b325ff44c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b325fc3bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b325fc3b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b325fc3a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7h7op_dr                        0x0000557624c6c5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b3260130460 __libc_start_main + 245\n6    tmp7h7op_dr                        0x0000557624c6c209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = dp[index]\n    for i in index+1..<k {\n        max_sum += a[i]\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpt_03ibjl/tmpt_03ibjl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba4d96bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba4d662b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba4d662988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba4d6617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt_03ibjl                        0x0000559afffbc661 <unavailable> + 5729\n5    libc.so.6                          0x00002aba4db57460 __libc_start_main + 245\n6    tmpt_03ibjl                        0x0000559afffbc299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == 0 {\n        return a[0]\n    }\n    var max_sum = a[index]\n    for i in 0..<index {\n        if a[i] < a[index] && i < k {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i, k: k)\n            if sum + a[index] > max_sum {\n                max_sum = sum + a[index]\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp4ox9mr3z/tmp4ox9mr3z.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac5eb948c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac5eb63fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac5eb63f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac5eb63e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4ox9mr3z                        0x0000557c1ac06511 <unavailable> + 5393\n5    libc.so.6                          0x00002ac5ebb34460 __libc_start_main + 245\n6    tmp4ox9mr3z                        0x0000557c1ac06149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return a[k] + max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmppvq51lbm/tmppvq51lbm.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9237fedc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9237ce4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9237ce4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9237ce37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppvq51lbm                        0x0000563286c20511 <unavailable> + 5393\n5    libc.so.6                          0x00002b92381d9460 __libc_start_main + 245\n6    tmppvq51lbm                        0x0000563286c20149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmptjacnmll/tmptjacnmll.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af3a6ab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af3a67a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af3a67a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3a67a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptjacnmll                        0x0000560dfcf715a1 <unavailable> + 5537\n5    libc.so.6                          0x00002af3a6c9c460 __libc_start_main + 245\n6    tmptjacnmll                        0x0000560dfcf711d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmprutpqoeh/tmprutpqoeh.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfb5906c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfb55fdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfb55fd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfb55fc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprutpqoeh                        0x000056321d867421 <unavailable> + 5153\n5    libc.so.6                          0x00002adfb5af2460 __libc_start_main + 245\n6    tmprutpqoeh                        0x000056321d867059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    \n    if a[index] < a[k] {\n        max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    let sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    \n    return max(max_sum, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpaj1yp1hg/tmpaj1yp1hg.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b82ac3b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b82ac0b0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b82ac0b0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b82ac0af7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaj1yp1hg                        0x0000558664217421 <unavailable> + 5153\n5    libc.so.6                          0x00002b82ac5a5460 __libc_start_main + 245\n6    tmpaj1yp1hg                        0x0000558664217059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    var max_sum = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && j < k && i > k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmptm9dyvmx/tmptm9dyvmx.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b53079e1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b53076d8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b53076d8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b53076d77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptm9dyvmx                        0x0000560ed505e661 <unavailable> + 5729\n5    libc.so.6                          0x00002b5307bcd460 __libc_start_main + 245\n6    tmptm9dyvmx                        0x0000560ed505e299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if max_sum < dp[i] {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpd7crcl_z/tmpd7crcl_z.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbb7001c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbb6cf8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abbb6cf8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abbb6cf77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd7crcl_z                        0x000055a504e2c5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002abbb71ed460 __libc_start_main + 245\n6    tmpd7crcl_z                        0x000055a504e2c209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpsey16cu9/tmpsey16cu9.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac903f51c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac903c48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac903c48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac903c477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsey16cu9                        0x00005585e80175a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ac90413d460 __libc_start_main + 245\n6    tmpsey16cu9                        0x00005585e80171d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    for i in index + 1..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: i) + sum)\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpts7x7ue9/tmpts7x7ue9.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93527bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93524b3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93524b3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93524b27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpts7x7ue9                        0x000055e5f1d5e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b93529a8460 __libc_start_main + 245\n6    tmpts7x7ue9                        0x000055e5f1d5e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var include = a[index]\n    var exclude = 0\n    for i in index+1..<n {\n        if i == k {\n            include += a[i]\n        } else {\n            exclude = max(exclude, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpdci1iti4/tmpdci1iti4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b289cd45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b289ca3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b289ca3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b289ca3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdci1iti4                        0x0000559773b165a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b289cf31460 __libc_start_main + 245\n6    tmpdci1iti4                        0x0000559773b161d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt0i4o04a/tmpt0i4o04a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b037b89fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b037b596b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b037b596988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b037b5957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt0i4o04a                        0x000055a55fcae421 <unavailable> + 5153\n5    libc.so.6                          0x00002b037ba8b460 __libc_start_main + 245\n6    tmpt0i4o04a                        0x000055a55fcae059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp90up4jmt/tmp90up4jmt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b58dce06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b58dcafdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b58dcafd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58dcafc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp90up4jmt                        0x000055ae9ad4e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b58dcff2460 __libc_start_main + 245\n6    tmp90up4jmt                        0x000055ae9ad4e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpx3igk_lb/tmpx3igk_lb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f9adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f97d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f97d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f97d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx3igk_lb                        0x000055a3e8c9a421 <unavailable> + 5153\n5    libc.so.6                          0x00002b00f9ccb460 __libc_start_main + 245\n6    tmpx3igk_lb                        0x000055a3e8c9a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpovf76a_q/tmpovf76a_q.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad605bc6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6058bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6058bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6058bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpovf76a_q                        0x0000555834288421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad605db2460 __libc_start_main + 245\n6    tmpovf76a_q                        0x0000555834288059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    var max_sum = 0\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    for i in 0..<n {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp1uu0o73p/tmp1uu0o73p.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b33d34cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b33d31c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b33d31c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b33d31c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1uu0o73p                        0x0000556614497661 <unavailable> + 5729\n5    libc.so.6                          0x00002b33d36b7460 __libc_start_main + 245\n6    tmp1uu0o73p                        0x0000556614497299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum + sum1, sum + sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp0y3iitk6/tmp0y3iitk6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0ab5c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0ab2bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0ab2bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af0ab2bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0y3iitk6                        0x000055eaba460421 <unavailable> + 5153\n5    libc.so.6                          0x00002af0ab7b2460 __libc_start_main + 245\n6    tmp0y3iitk6                        0x000055eaba460059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp7u4jgwqb/tmp7u4jgwqb.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4435a96c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b443578db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b443578d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b443578c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7u4jgwqb                        0x0000556c6190a421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4435c82460 __libc_start_main + 245\n6    tmp7u4jgwqb                        0x0000556c6190a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp5628vxql/tmp5628vxql.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5471998c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b547168fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b547168f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b547168e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5628vxql                        0x000055e5ca186421 <unavailable> + 5153\n5    libc.so.6                          0x00002b5471b84460 __libc_start_main + 245\n6    tmp5628vxql                        0x000055e5ca186059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpq4b59c10/tmpq4b59c10.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba943eb0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba943ba7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba943ba7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba943ba67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq4b59c10                        0x00005651351ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002ba94409c460 __libc_start_main + 245\n6    tmpq4b59c10                        0x00005651351ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum1, sum + sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpqtolh6_6/tmpqtolh6_6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acefcc46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acefc93db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acefc93d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acefc93c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqtolh6_6                        0x000056138aa9a421 <unavailable> + 5153\n5    libc.so.6                          0x00002acefce32460 __libc_start_main + 245\n6    tmpqtolh6_6                        0x000056138aa9a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] {\n                dp[i] = dp[j]\n            }\n        }\n        dp[i] += a[i]\n    }\n    return dp[index] + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpfnyqohts/tmpfnyqohts.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e060a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e05d9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e05d9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e05d997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnyqohts                        0x000055ea3d1905d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b5e0628f460 __libc_start_main + 245\n6    tmpfnyqohts                        0x000055ea3d190209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpeowdwvz_/tmpeowdwvz_.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700186bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7001562b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7001562988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70015617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeowdwvz_                        0x0000562079695421 <unavailable> + 5153\n5    libc.so.6                          0x00002b7001a57460 __libc_start_main + 245\n6    tmpeowdwvz_                        0x0000562079695059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var result = 0\n    for i in 0...index {\n        result = max(result, dp[i])\n    }\n    result += a[k]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp7ner2jg6/tmp7ner2jg6.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9718084c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9717d7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9717d7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9717d7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ner2jg6                        0x00005575bd337751 <unavailable> + 5969\n5    libc.so.6                          0x00002b9718270460 __libc_start_main + 245\n6    tmp7ner2jg6                        0x00005575bd337389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpe842ybrh/tmpe842ybrh.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2dfe3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2dfb32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2dfb32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2dfb317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe842ybrh                        0x00005615f539b421 <unavailable> + 5153\n5    libc.so.6                          0x00002af2e0027460 __libc_start_main + 245\n6    tmpe842ybrh                        0x00005615f539b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpxizm4p3v/tmpxizm4p3v.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acb69080c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acb68d77b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acb68d77988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acb68d767b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxizm4p3v                        0x000055794abef5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002acb6926c460 __libc_start_main + 245\n6    tmpxizm4p3v                        0x000055794abef1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt0i4o04a/tmpt0i4o04a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b037b89fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b037b596b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b037b596988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b037b5957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt0i4o04a                        0x000055a55fcae421 <unavailable> + 5153\n5    libc.so.6                          0x00002b037ba8b460 __libc_start_main + 245\n6    tmpt0i4o04a                        0x000055a55fcae059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpdp36m9qw/tmpdp36m9qw.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e6d5eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e6d2e1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e6d2e1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e6d2e07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdp36m9qw                        0x0000562c34622421 <unavailable> + 5153\n5    libc.so.6                          0x00002b9e6d7d6460 __libc_start_main + 245\n6    tmpdp36m9qw                        0x0000562c34622059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var sum2 = 0\n    if k > index {\n        sum2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpbarqrzlk/tmpbarqrzlk.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1090c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb0d87b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb0d87988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb0d867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbarqrzlk                        0x000055d3441b3421 <unavailable> + 5153\n5    libc.so.6                          0x00002b8bb127c460 __libc_start_main + 245\n6    tmpbarqrzlk                        0x000055d3441b3059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var incl = 0\n    if k == index + 1 {\n        incl = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let excl = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(incl, excl)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp0ueq_hf_/tmp0ueq_hf_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba41e18bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba41de82b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba41de82988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba41de817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ueq_hf_                        0x000055b365ffd421 <unavailable> + 5153\n5    libc.so.6                          0x00002ba41e377460 __libc_start_main + 245\n6    tmp0ueq_hf_                        0x000055b365ffd059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    if k == index + 1 {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp74y2h6ht/tmp74y2h6ht.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd6b5cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd6b2c4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd6b2c4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd6b2c37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp74y2h6ht                        0x0000556ed4345421 <unavailable> + 5153\n5    libc.so.6                          0x00002abd6b7b9460 __libc_start_main + 245\n6    tmp74y2h6ht                        0x0000556ed4345059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpgqavkc95/tmpgqavkc95.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4e72d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4e6fcbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4e6fcb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4e6fca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqavkc95                        0x000055e51667d755 <unavailable> + 5973\n5    libc.so.6                          0x00002ae4e74c0460 __libc_start_main + 245\n6    tmpgqavkc95                        0x000055e51667d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp5m5d3v9a/tmp5m5d3v9a.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7357ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7354c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7354c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7354c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m5d3v9a                        0x000055edd8ead421 <unavailable> + 5153\n5    libc.so.6                          0x00002ab7359b8460 __libc_start_main + 245\n6    tmp5m5d3v9a                        0x000055edd8ead059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if index > k {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpzhhqf_xi/tmpzhhqf_xi.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af16c649c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af16c340b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af16c340988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af16c33f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzhhqf_xi                        0x0000560360615421 <unavailable> + 5153\n5    libc.so.6                          0x00002af16c835460 __libc_start_main + 245\n6    tmpzhhqf_xi                        0x0000560360615059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + a[index]\n    return max(sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmplpw7hwv4/tmplpw7hwv4.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64633b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64630abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b64630ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64630aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplpw7hwv4                        0x000055e63e0bd421 <unavailable> + 5153\n5    libc.so.6                          0x00002b64635a0460 __libc_start_main + 245\n6    tmplpw7hwv4                        0x000055e63e0bd059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] {\n                dp[i] = dp[j]\n            }\n        }\n        dp[i] += a[i]\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmpzb52yonh/tmpzb52yonh.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63418cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63415c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63415c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63415c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzb52yonh                        0x00005613a1a255d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b6341ab6460 __libc_start_main + 245\n6    tmpzb52yonh                        0x00005613a1a25209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp235csnt1/tmp235csnt1.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad776d8cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad776a83b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad776a83988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad776a827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp235csnt1                        0x0000559d0cfaa5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad776f78460 __libc_start_main + 245\n6    tmp235csnt1                        0x0000559d0cfaa1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j])\n            }\n        }\n        dp[i] += a[i]\n    }\n    var sum = 0\n    for i in 0..<index {\n        sum += a[i]\n    }\n    sum += dp[k]\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123761,
      "stdout": "",
      "stderr": "tmp9wmfsf9f/tmp9wmfsf9f.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05e15e6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05e12ddb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05e12dd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05e12dc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9wmfsf9f                        0x0000560d56e39661 <unavailable> + 5729\n5    libc.so.6                          0x00002b05e17d2460 __libc_start_main + 245\n6    tmp9wmfsf9f                        0x0000560d56e39299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmplqwlsv1z/tmplqwlsv1z.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab22d8dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab22d5d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab22d5d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab22d5d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqwlsv1z                        0x0000555c3c6d3421 <unavailable> + 5153\n5    libc.so.6                          0x00002ab22dac6460 __libc_start_main + 245\n6    tmplqwlsv1z                        0x0000555c3c6d3059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2ac5a6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2ac5762561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2ac5762286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2ac576213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2ac5761bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b2ac5561e83 <unavailable> + 188035\n6    tmp75jmfq3t                        0x000056294395d74e <unavailable> + 5966\n7    tmp75jmfq3t                        0x000056294395d71d <unavailable> + 5917\n8    tmp75jmfq3t                        0x000056294395d3a3 <unavailable> + 5027\n9    libc.so.6                          0x00002b2ac5c57460 __libc_start_main + 245\n10   tmp75jmfq3t                        0x000056294395d059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}