{
  "name": "mbpp_142_count_samepair",
  "language": "swift",
  "prompt": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list1[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, value) in list1.enumerated() {\n        if value == list2[index] && value == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, element) in list1.enumerated() {\n        if element == list2[index] && element == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if list2[index] == item && list3[index] == item {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, value) in list1.enumerated() {\n        if value == list2[index] && value == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, element) in list1.enumerated() {\n        if element == list2[index] && element == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, value) in list1.enumerated() {\n        if value == list2[index] && value == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, element) in list1.enumerated() {\n        if element == list2[index] && element == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, element) in list1.enumerated() {\n        if element == list2[index] && element == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list1[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, item) in list1.enumerated() {\n        if item == list2[index] && item == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, value) in list1.enumerated() {\n        if value == list2[index] && value == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for (index, _) in list1.enumerated() {\n        if list1[index] == list2[index] && list2[index] == list3[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)\nassert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)\nassert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)",
      "timestamp": 1665510308,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}