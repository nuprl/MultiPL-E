{
  "name": "mbpp_641_is_nonagonal",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth nonagonal number.\nfunc is_nonagonal(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_nonagonal(n: 10) == 325)\nassert(is_nonagonal(n: 15) == 750)\nassert(is_nonagonal(n: 18) == 1089)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    var i = 1\n    var sum = 0\n    while sum < n {\n        sum += i\n        i += 1\n    }\n    return sum",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (n + 1) * (n + 2)) / 6",
    "    return (n * (3 * n - 1)) / 2",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)"
  ]
}