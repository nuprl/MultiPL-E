{
  "name": "mbpp_578_interleave_lists",
  "language": "swift",
  "prompt": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleavedList = [Int]()\n    for i in 0..<list1.count {\n        interleavedList.append(list1[i])\n        interleavedList.append(list2[i])\n        interleavedList.append(list3[i])\n    }\n    return interleavedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved = [Int]()\n    for (index, _) in list1.enumerated() {\n        interleaved.append(list1[index])\n        interleaved.append(list2[index])\n        interleaved.append(list3[index])\n    }\n    return interleaved\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result += [list1[i], list2[i], list3[i]]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "tmpfiu1fy6u/tmpfiu1fy6u.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6263610c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6263307b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6263307988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62633067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfiu1fy6u                        0x0000560d345de557 <unavailable> + 5463\n5    libc.so.6                          0x00002b62637fc460 __libc_start_main + 245\n6    tmpfiu1fy6u                        0x0000560d345ddfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved: [Int] = []\n    for i in 0..<list1.count {\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    }\n    return interleaved\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved = [Int]()\n    for (index, _) in list1.enumerated() {\n        interleaved.append(list1[index])\n        interleaved.append(list2[index])\n        interleaved.append(list3[index])\n    }\n    return interleaved\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    let list1_length = list1.count\n    let list2_length = list2.count\n    let list3_length = list3.count\n    var interleaved_list = [Int]()\n    \n    if list1_length == list2_length && list2_length == list3_length {\n        for i in 0..<list1_length {\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        }\n    }\n    \n    return interleaved_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "tmpfiu1fy6u/tmpfiu1fy6u.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6263610c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6263307b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6263307988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62633067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfiu1fy6u                        0x0000560d345de557 <unavailable> + 5463\n5    libc.so.6                          0x00002b62637fc460 __libc_start_main + 245\n6    tmpfiu1fy6u                        0x0000560d345ddfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved_list: [Int] = []\n    for i in 0..<list1.count {\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    }\n    return interleaved_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerate() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "/tmp/tmpou1_63ea.swift:5:5: error: failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the project\n    for (index, _) in list1.enumerate() {\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerate() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "/tmp/tmpou1_63ea.swift:5:5: error: failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the project\n    for (index, _) in list1.enumerate() {\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "tmpfiu1fy6u/tmpfiu1fy6u.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6263610c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6263307b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6263307988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62633067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfiu1fy6u                        0x0000560d345de557 <unavailable> + 5463\n5    libc.so.6                          0x00002b62637fc460 __libc_start_main + 245\n6    tmpfiu1fy6u                        0x0000560d345ddfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    \n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "tmpfiu1fy6u/tmpfiu1fy6u.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6263610c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6263307b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6263307988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62633067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfiu1fy6u                        0x0000560d345de557 <unavailable> + 5463\n5    libc.so.6                          0x00002b62637fc460 __libc_start_main + 245\n6    tmpfiu1fy6u                        0x0000560d345ddfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved: [Int] = []\n    for i in 0..<list1.count {\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    }\n    return interleaved\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerate() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "/tmp/tmpou1_63ea.swift:5:5: error: failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the project\n    for (index, _) in list1.enumerate() {\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    let max_length = max(list1.count, list2.count, list3.count)\n    for i in 0..<max_length {\n        if i < list1.count {\n            result.append(list1[i])\n        }\n        if i < list2.count {\n            result.append(list2[i])\n        }\n        if i < list3.count {\n            result.append(list3[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved_list: [Int] = []\n    for i in 0..<list1.count {\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    }\n    return interleaved_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "tmpfiu1fy6u/tmpfiu1fy6u.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6263610c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6263307b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6263307988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62633067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfiu1fy6u                        0x0000560d345de557 <unavailable> + 5463\n5    libc.so.6                          0x00002b62637fc460 __libc_start_main + 245\n6    tmpfiu1fy6u                        0x0000560d345ddfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved: [Int] = []\n    for i in 0..<list1.count {\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    }\n    return interleaved\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerate() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "/tmp/tmpou1_63ea.swift:5:5: error: failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the project\n    for (index, _) in list1.enumerate() {\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, _) in list1.enumerated() {\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved: [Int] = []\n    for (index, _) in list1.enumerated() {\n        interleaved.append(list1[index])\n        interleaved.append(list2[index])\n        interleaved.append(list3[index])\n    }\n    return interleaved\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved_list: [Int] = []\n    for i in 0..<list1.count {\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    }\n    return interleaved_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var interleaved_list: [Int] = []\n    for i in 0..<list1.count {\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    }\n    return interleaved_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list1.count {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])\nassert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])\nassert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}