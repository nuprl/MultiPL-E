{
  "name": "mbpp_8_square_nums",
  "language": "swift",
  "prompt": "\n/// Write a function to find squares of individual elements in a list.\nfunc square_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares",
    "    var result: [Int] = []\n    for num in nums {\n        result.append(num * num)\n    }\n    return result",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares",
    "    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares",
    "    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    return nums.map { $0 * $0 }",
    "    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares",
    "    return nums.map { $0 * $0 }"
  ]
}