{
  "name": "mbpp_777_find_sum",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        if arr[i] == -1 {\n            continue\n        }\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                arr[j] = -1\n            }\n            j += 1\n        }\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for num in arr {\n        if seen[num] == nil {\n            sum += num\n        }\n        seen[num] = true\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmplz9yxkm6/tmplz9yxkm6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a20a97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a2078eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a2078e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a2078d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplz9yxkm6                        0x000056499ef1d4fe <unavailable> + 5374\n5    libc.so.6                          0x00002b6a20c83460 __libc_start_main + 245\n6    tmplz9yxkm6                        0x000056499ef1d139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for num in arr {\n        if seen[num] == nil {\n            sum += num\n            seen[num] = true\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        sum += arr[i]\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                sum -= arr[i]\n                arr.remove(at: j)\n                break\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cb4902c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cb45f9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1cb45f9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1cb45f913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1cb45f8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1cb43f8e83 <unavailable> + 188035\n6    tmpo8pq7spa                        0x00005623d99cc980 <unavailable> + 6528\n7    tmpo8pq7spa                        0x00005623d99cc540 <unavailable> + 5440\n8    libc.so.6                          0x00002b1cb4aee460 __libc_start_main + 245\n9    tmpo8pq7spa                        0x00005623d99cc1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                arr[i] = 0\n                arr[j] = 0\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpe78gvthw/tmpe78gvthw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adde8cedc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adde89e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adde89e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adde89e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe78gvthw                        0x0000563b7faa96b7 <unavailable> + 5815\n5    libc.so.6                          0x00002adde8ed9460 __libc_start_main + 245\n6    tmpe78gvthw                        0x0000563b7faa91f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set(arr)\n    for i in arr_set {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        if arr.contains(arr[i]) {\n            sum += arr[i]\n            arr.remove(at: i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d61b2bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d61822561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5d61822286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5d6182213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5d61821bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5d61621e83 <unavailable> + 188035\n6    tmpjlaixidm                        0x0000560aa85af9ef <unavailable> + 6639\n7    tmpjlaixidm                        0x0000560aa85af5b0 <unavailable> + 5552\n8    libc.so.6                          0x00002b5d61d17460 __libc_start_main + 245\n9    tmpjlaixidm                        0x0000560aa85af269 <unavailable> + 4713\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for num in arr {\n        if seen[num] == nil {\n            sum += num\n            seen[num] = true\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpouzxc4la/tmpouzxc4la.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6cca4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae6cc742b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae6cc742988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6cc7417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpouzxc4la                        0x0000557d8eca781e <unavailable> + 6174\n5    libc.so.6                          0x00002ae6ccc37460 __libc_start_main + 245\n6    tmpouzxc4la                        0x0000557d8eca7459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for num in arr {\n        if !arr.contains(num) {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpc05n_if1/tmpc05n_if1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeefb07fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeefad76b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeefad76988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeefad757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc05n_if1                        0x0000564bf365c4fe <unavailable> + 5374\n5    libc.so.6                          0x00002aeefb26b460 __libc_start_main + 245\n6    tmpc05n_if1                        0x0000564bf365c139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var j = 0\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                break\n            }\n        }\n        if j == arr.count {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpkpwmhur_/tmpkpwmhur_.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002accf7502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002accf71f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002accf71f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002accf71f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkpwmhur_                        0x0000561f4374d56e <unavailable> + 5486\n5    libc.so.6                          0x00002accf76ee460 __libc_start_main + 245\n6    tmpkpwmhur_                        0x0000561f4374d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count {\n        if i == 0 {\n            sum += arr[i]\n        } else if arr[i] != arr[i - 1] {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for item in arr {\n        if !arr_set.contains(item) {\n            sum += item\n            arr_set.insert(item)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for item in arr {\n        if !set.contains(item) {\n            sum += item\n            set.insert(item)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpmibyr8qe/tmpmibyr8qe.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59e4820c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59e4517b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59e4517988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59e45167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmibyr8qe                        0x000055bc41d8a7ce <unavailable> + 6094\n5    libc.so.6                          0x00002b59e4a0c460 __libc_start_main + 245\n6    tmpmibyr8qe                        0x000055bc41d8a409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for num in arr {\n        if let val = dict[num] {\n            dict[num] = val + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp3txc5p50/tmp3txc5p50.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b71379c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b71070b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b71070988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7106f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3txc5p50                        0x000055c1856af73e <unavailable> + 5950\n5    libc.so.6                          0x00002b2b71565460 __libc_start_main + 245\n6    tmp3txc5p50                        0x000055c1856af379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            sum += i\n        }\n        dict[i] = i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpmibyr8qe/tmpmibyr8qe.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59e4820c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59e4517b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59e4517988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59e45167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmibyr8qe                        0x000055bc41d8a7ce <unavailable> + 6094\n5    libc.so.6                          0x00002b59e4a0c460 __libc_start_main + 245\n6    tmpmibyr8qe                        0x000055bc41d8a409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for i in arr {\n        if !seen.contains(i) {\n            sum += i\n            seen.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = 0\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] && i != j {\n                flag = 1\n            }\n        }\n        if flag == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp3k3az5xe/tmp3k3az5xe.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa1dc44c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa1d93bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa1d93b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa1d93a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3k3az5xe                        0x000055ef4ed5456e <unavailable> + 5486\n5    libc.so.6                          0x00002afa1de30460 __libc_start_main + 245\n6    tmp3k3az5xe                        0x000055ef4ed541a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for i in arr {\n        if !seen.contains(i) {\n            sum += i\n            seen.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpoxh7s8dd/tmpoxh7s8dd.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afe7d0b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afe7cdacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afe7cdac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afe7cdab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoxh7s8dd                        0x000056427e83373e <unavailable> + 5950\n5    libc.so.6                          0x00002afe7d2a1460 __libc_start_main + 245\n6    tmpoxh7s8dd                        0x000056427e833379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        if arr[i] != -1 {\n            sum += arr[i]\n            for j in i+1..<arr.count {\n                if arr[i] == arr[j] {\n                    arr[j] = -1\n                }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpoxh7s8dd/tmpoxh7s8dd.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afe7d0b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afe7cdacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afe7cdac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afe7cdab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoxh7s8dd                        0x000056427e83373e <unavailable> + 5950\n5    libc.so.6                          0x00002afe7d2a1460 __libc_start_main + 245\n6    tmpoxh7s8dd                        0x000056427e833379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for num in arr {\n        if arr_set.contains(num) {\n            sum -= num\n        } else {\n            sum += num\n        }\n        arr_set.insert(num)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpm7uwsoq_/tmpm7uwsoq_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adaf0670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adaf0367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adaf0367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adaf03667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm7uwsoq_                        0x000055706ef0e5ee <unavailable> + 5614\n5    libc.so.6                          0x00002adaf085c460 __libc_start_main + 245\n6    tmpm7uwsoq_                        0x000055706ef0e229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if arr_set.contains(i) {\n            sum -= i\n        } else {\n            sum += i\n        }\n        arr_set.insert(i)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpdc7gth14/tmpdc7gth14.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b323180fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3231506b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3231506988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32315057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdc7gth14                        0x00005585a47145ee <unavailable> + 5614\n5    libc.so.6                          0x00002b32319fb460 __libc_start_main + 245\n6    tmpdc7gth14                        0x00005585a4714229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for num in arr {\n        if arr_set.contains(num) {\n            sum -= num\n        } else {\n            sum += num\n            arr_set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp4px5ayba/tmp4px5ayba.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc4c0d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc4bdc8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc4bdc8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc4bdc77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4px5ayba                        0x000056124afba5ee <unavailable> + 5614\n5    libc.so.6                          0x00002adc4c2bd460 __libc_start_main + 245\n6    tmp4px5ayba                        0x000056124afba229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmplz9yxkm6/tmplz9yxkm6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a20a97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a2078eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a2078e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a2078d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplz9yxkm6                        0x000056499ef1d4fe <unavailable> + 5374\n5    libc.so.6                          0x00002b6a20c83460 __libc_start_main + 245\n6    tmplz9yxkm6                        0x000056499ef1d139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set(arr)\n    for i in arr_set {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmplz9yxkm6/tmplz9yxkm6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a20a97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a2078eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a2078e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a2078d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplz9yxkm6                        0x000056499ef1d4fe <unavailable> + 5374\n5    libc.so.6                          0x00002b6a20c83460 __libc_start_main + 245\n6    tmplz9yxkm6                        0x000056499ef1d139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    \n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpmibyr8qe/tmpmibyr8qe.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59e4820c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59e4517b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59e4517988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59e45167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmibyr8qe                        0x000055bc41d8a7ce <unavailable> + 6094\n5    libc.so.6                          0x00002b59e4a0c460 __libc_start_main + 245\n6    tmpmibyr8qe                        0x000055bc41d8a409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for num in arr {\n        if seen[num] == nil {\n            sum += num\n            seen[num] = true\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            arr_set.insert(i)\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int:Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpbp0el16o/tmpbp0el16o.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af241be6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2418ddb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2418dd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2418dc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbp0el16o                        0x000056112dd5581e <unavailable> + 6174\n5    libc.so.6                          0x00002af241dd2460 __libc_start_main + 245\n6    tmpbp0el16o                        0x000056112dd55459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpmibyr8qe/tmpmibyr8qe.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59e4820c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59e4517b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59e4517988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59e45167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmibyr8qe                        0x000055bc41d8a7ce <unavailable> + 6094\n5    libc.so.6                          0x00002b59e4a0c460 __libc_start_main + 245\n6    tmpmibyr8qe                        0x000055bc41d8a409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let val = dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpoxh7s8dd/tmpoxh7s8dd.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afe7d0b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afe7cdacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afe7cdac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afe7cdab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoxh7s8dd                        0x000056427e83373e <unavailable> + 5950\n5    libc.so.6                          0x00002afe7d2a1460 __libc_start_main + 245\n6    tmpoxh7s8dd                        0x000056427e833379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        if arr.contains(arr[i]) {\n            sum += arr[i]\n            arr.remove(at: i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d61b2bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d61822561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5d61822286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5d6182213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5d61821bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5d61621e83 <unavailable> + 188035\n6    tmpjlaixidm                        0x0000560aa85af9ef <unavailable> + 6639\n7    tmpjlaixidm                        0x0000560aa85af5b0 <unavailable> + 5552\n8    libc.so.6                          0x00002b5d61d17460 __libc_start_main + 245\n9    tmpjlaixidm                        0x0000560aa85af269 <unavailable> + 4713\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if arr_set.contains(i) {\n            sum -= i\n        } else {\n            sum += i\n        }\n        arr_set.insert(i)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpdc7gth14/tmpdc7gth14.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b323180fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3231506b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3231506988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32315057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdc7gth14                        0x00005585a47145ee <unavailable> + 5614\n5    libc.so.6                          0x00002b32319fb460 __libc_start_main + 245\n6    tmpdc7gth14                        0x00005585a4714229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        if arr.contains(arr[i]) {\n            sum += arr[i]\n            arr.remove(at: arr.firstIndex(of: arr[i])!)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef8aaddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef8a7d4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aef8a7d4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aef8a7d413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aef8a7d3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002aef8a5d4e83 <unavailable> + 188035\n6    tmp3zmppn6h                        0x0000559303632a9f <unavailable> + 6815\n7    tmp3zmppn6h                        0x0000559303632660 <unavailable> + 5728\n8    libc.so.6                          0x00002aef8acc9460 __libc_start_main + 245\n9    tmp3zmppn6h                        0x0000559303632319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for num in arr {\n        if seen[num] == nil {\n            sum += num\n            seen[num] = true\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmplz9yxkm6/tmplz9yxkm6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a20a97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a2078eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a2078e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a2078d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplz9yxkm6                        0x000056499ef1d4fe <unavailable> + 5374\n5    libc.so.6                          0x00002b6a20c83460 __libc_start_main + 245\n6    tmplz9yxkm6                        0x000056499ef1d139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if arr_set.contains(i) {\n            sum -= i\n        } else {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpx98s6g_q/tmpx98s6g_q.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c88a3cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c88733b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c88733988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c887327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx98s6g_q                        0x0000556d6f6175ee <unavailable> + 5614\n5    libc.so.6                          0x00002b1c88c28460 __libc_start_main + 245\n6    tmpx98s6g_q                        0x0000556d6f617229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpmibyr8qe/tmpmibyr8qe.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59e4820c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59e4517b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59e4517988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59e45167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmibyr8qe                        0x000055bc41d8a7ce <unavailable> + 6094\n5    libc.so.6                          0x00002b59e4a0c460 __libc_start_main + 245\n6    tmpmibyr8qe                        0x000055bc41d8a409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for num in arr {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpfjl46ew4/tmpfjl46ew4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b602ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b5d25b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b5d25988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b5d247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfjl46ew4                        0x00005560480f87ce <unavailable> + 6094\n5    libc.so.6                          0x00002ac9b621a460 __libc_start_main + 245\n6    tmpfjl46ew4                        0x00005560480f8409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for item in arr {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpkkyi6qq2/tmpkkyi6qq2.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19be51ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19be215b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19be215988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19be2147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkyi6qq2                        0x000055b2d76f281e <unavailable> + 6174\n5    libc.so.6                          0x00002b19be70a460 __libc_start_main + 245\n6    tmpkkyi6qq2                        0x000055b2d76f2459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            arr_set.insert(i)\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for i in arr {\n        if !seen.contains(i) {\n            sum += i\n            seen.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            set.insert(i)\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for i in arr {\n        if seen[i] == nil {\n            sum += i\n            seen[i] = true\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpftelpm_d/tmpftelpm_d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac103fcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac103cc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac103cc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac103cc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpftelpm_d                        0x0000555862bfe49e <unavailable> + 5278\n5    libc.so.6                          0x00002ac1041b7460 __libc_start_main + 245\n6    tmpftelpm_d                        0x0000555862bfe0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp0ceqmovi/tmp0ceqmovi.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae595f0bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae595c02b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae595c02988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae595c017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ceqmovi                        0x00005579420f081e <unavailable> + 6174\n5    libc.so.6                          0x00002ae5960f7460 __libc_start_main + 245\n6    tmp0ceqmovi                        0x00005579420f0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for num in arr {\n        if dict[num] == nil {\n            dict[num] = 1\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp99vhb1bj/tmp99vhb1bj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18bbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba18b8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba18b8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba18b8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp99vhb1bj                        0x00005570e60ee7ce <unavailable> + 6094\n5    libc.so.6                          0x00002ba18bdac460 __libc_start_main + 245\n6    tmp99vhb1bj                        0x00005570e60ee409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpouzxc4la/tmpouzxc4la.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6cca4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae6cc742b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae6cc742988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6cc7417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpouzxc4la                        0x0000557d8eca781e <unavailable> + 6174\n5    libc.so.6                          0x00002ae6ccc37460 __libc_start_main + 245\n6    tmpouzxc4la                        0x0000557d8eca7459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for item in arr {\n        if !arr_set.contains(item) {\n            sum += item\n            arr_set.insert(item)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        if arr.contains(arr[i]) {\n            sum += arr[i]\n            arr.remove(at: arr.firstIndex(of: arr[i])!)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef8aaddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef8a7d4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aef8a7d4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aef8a7d413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aef8a7d3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002aef8a5d4e83 <unavailable> + 188035\n6    tmp3zmppn6h                        0x0000559303632a9f <unavailable> + 6815\n7    tmp3zmppn6h                        0x0000559303632660 <unavailable> + 5728\n8    libc.so.6                          0x00002aef8acc9460 __libc_start_main + 245\n9    tmp3zmppn6h                        0x0000559303632319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp60xsw4tc/tmp60xsw4tc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4be8526c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4be821db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4be821d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4be821c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60xsw4tc                        0x0000555a1be885be <unavailable> + 5566\n5    libc.so.6                          0x00002b4be8712460 __libc_start_main + 245\n6    tmp60xsw4tc                        0x0000555a1be881f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmprt83mg78/tmprt83mg78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad495dc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad495abcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad495abc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad495abb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprt83mg78                        0x0000557a0dc7d5be <unavailable> + 5566\n5    libc.so.6                          0x00002ad495fb1460 __libc_start_main + 245\n6    tmprt83mg78                        0x0000557a0dc7d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for num in arr {\n        if !seen.contains(num) {\n            sum += num\n            seen.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}