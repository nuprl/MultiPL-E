{
  "name": "mbpp_164_are_equivalent",
  "language": "swift",
  "prompt": "\n/// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1: Int, num2: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(are_equivalent(num1: 36, num2: 57) == false)\nassert(are_equivalent(num1: 2, num2: 4) == false)\nassert(are_equivalent(num1: 23, num2: 47) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_divisors(num: num1)\n    let sum2 = sum_divisors(num: num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num: num1) == sum_of_divisors(num: num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_divisors(num1)\n    let sum2 = sum_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = get_divisors(num1)\n    let divisors2 = get_divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = get_divisors(num: num1)\n    let divisors2 = get_divisors(num: num2)\n    return divisors1.reduce(0, +) == divisors2.reduce(0, +)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    var sum1 = 0\n    var sum2 = 0\n    for i in 1...num1 {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i in 1...num2 {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2",
    "    let divisors1 = get_divisors(num1)\n    let divisors2 = get_divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num: num1) == sum_of_divisors(num: num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num: num1) == sum_of_divisors(num: num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return divisors(num1) == divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return sum(divisors1) == sum(divisors2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num: num1)\n    let divisors2 = divisors(num: num2)\n    return divisors1.reduce(0, +) == divisors2.reduce(0, +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    let divisors1 = divisors(num: num1)\n    let divisors2 = divisors(num: num2)\n    return divisors1.reduce(0, +) == divisors2.reduce(0, +)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = get_divisors(num: num1)\n    let divisors2 = get_divisors(num: num2)\n    let sum1 = divisors1.reduce(0, +)\n    let sum2 = divisors2.reduce(0, +)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_divisors(num1)\n    let sum2 = sum_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_divisors(num1)\n    let sum2 = sum_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return sum(divisors1) == sum(divisors2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return divisors(num1) == divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = get_divisors(num: num1)\n    let divisors2 = get_divisors(num: num2)\n    return divisors1.reduce(0, +) == divisors2.reduce(0, +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num: num1) == sum_divisors(num: num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = get_divisors(num: num1)\n    let divisors2 = get_divisors(num: num2)\n    return divisors1.reduce(0, +) == divisors2.reduce(0, +)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num: num1) == sum_of_divisors(num: num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return divisors(num1) == divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = get_divisors(num1)\n    let divisors2 = get_divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    let divisors1 = divisors(num1)\n    let divisors2 = divisors(num2)\n    return divisors1.reduce(0, combine: +) == divisors2.reduce(0, combine: +)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    let sum1 = sum_of_divisors(num1)\n    let sum2 = sum_of_divisors(num2)\n    return sum1 == sum2",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)",
    "    return sum_divisors(num1) == sum_divisors(num2)",
    "    return divisors(num1) == divisors(num2)",
    "    return sum_of_divisors(num1) == sum_of_divisors(num2)"
  ]
}