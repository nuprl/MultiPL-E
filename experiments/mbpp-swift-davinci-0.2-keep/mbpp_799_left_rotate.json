{
  "name": "mbpp_799_left_rotate",
  "language": "swift",
  "prompt": "\n/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n: Int, d: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_rotate(n: 16, d: 2) == 64)\nassert(left_rotate(n: 10, d: 2) == 40)\nassert(left_rotate(n: 99, d: 3) == 792)\nassert(left_rotate(n: 99, d: 3) == 792)\nassert(left_rotate(n: 1, d: 3) == 8)\nassert(left_rotate(n: 5, d: 3) == 40)\nassert(left_rotate(n: 29, d: 3) == 232)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return (n << d) | (n >> (32 - d))",
    "    var n = n\n    var d = d\n    d = d % 32\n    return (n << d) | (n >> (32 - d))",
    "    var n = n\n    var d = d\n    if d > 32 {\n        d = d % 32\n    }\n    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    let mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    let mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d) & mask)",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))",
    "    return (n << d) | (n >> (32 - d))"
  ]
}