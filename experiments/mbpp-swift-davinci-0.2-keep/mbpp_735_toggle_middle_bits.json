{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "swift",
  "prompt": "\n/// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunc toggle_middle_bits(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_middle_bits(n: 9) == 15)\nassert(toggle_middle_bits(n: 10) == 12)\nassert(toggle_middle_bits(n: 11) == 13)\nassert(toggle_middle_bits(n: 65) == 127)\nassert(toggle_middle_bits(n: 77) == 115)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010101010101010101010101010",
    "    return n ^ 0b1010101010101010101010101010101010101010101010101010101010101010",
    "    return n ^ 0b11111110",
    "    var n = n\n    var mask = 0b11\n    var i = 1\n    while i < n.bitWidth - 1 {\n        mask = mask << 1\n        mask = mask | 0b1\n        n = n ^ (mask << i)\n        i += 1\n    }\n    return n",
    "    let mask = (1 << (n.count - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    let first_bit = n & 1\n    var last_bit = n & (1 << (n.bitWidth - 1))\n    last_bit = last_bit >> (n.bitWidth - 1)\n    n = n >> 1\n    n = n << 1\n    n = n | first_bit\n    n = n | last_bit\n    return n",
    "    return n ^ (1 << 1) ^ (1 << 2)",
    "    let mask = 0b11111111111111111111111111111100\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    num = num ^ (num >> 1)\n    num = num ^ (num >> 2)\n    num = num ^ (num >> 4)\n    num = num ^ (num >> 8)\n    num = num ^ (num >> 16)\n    return num",
    "    let mask = 0b11 << 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask ^ (1 << 1))",
    "    return n ^ 0b11111110111111101111111",
    "    let mask = 0b10101010101010101010101010101010\n    return n ^ mask",
    "    return n ^ 0b10101010",
    "    let mask = 0b111111111\n    return n ^ mask"
  ]
}