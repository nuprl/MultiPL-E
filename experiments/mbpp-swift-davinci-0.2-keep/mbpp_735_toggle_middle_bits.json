{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "swift",
  "prompt": "\n/// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunc toggle_middle_bits(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_middle_bits(n: 9) == 15)\nassert(toggle_middle_bits(n: 10) == 12)\nassert(toggle_middle_bits(n: 11) == 13)\nassert(toggle_middle_bits(n: 65) == 127)\nassert(toggle_middle_bits(n: 77) == 115)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010101010101010101010101010",
    "    return n ^ 0b1010101010101010101010101010101010101010101010101010101010101010",
    "    return n ^ 0b11111110",
    "    var n = n\n    var mask = 0b11\n    var i = 1\n    while i < n.bitWidth - 1 {\n        mask = mask << 1\n        mask = mask | 0b1\n        n = n ^ (mask << i)\n        i += 1\n    }\n    return n",
    "    let mask = (1 << (n.count - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    let first_bit = n & 1\n    var last_bit = n & (1 << (n.bitWidth - 1))\n    last_bit = last_bit >> (n.bitWidth - 1)\n    n = n >> 1\n    n = n << 1\n    n = n | first_bit\n    n = n | last_bit\n    return n",
    "    return n ^ (1 << 1) ^ (1 << 2)",
    "    let mask = 0b11111111111111111111111111111100\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    num = num ^ (num >> 1)\n    num = num ^ (num >> 2)\n    num = num ^ (num >> 4)\n    num = num ^ (num >> 8)\n    num = num ^ (num >> 16)\n    return num",
    "    let mask = 0b11 << 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask ^ (1 << 1))",
    "    return n ^ 0b11111110111111101111111",
    "    let mask = 0b10101010101010101010101010101010\n    return n ^ mask",
    "    return n ^ 0b10101010",
    "    let mask = 0b111111111\n    return n ^ mask",
    "    let mask = 0b1111111111111111111111111111111111111111111111111111111111111111\n    let first_bit = n & 0b1\n    let last_bit = n & (0b1 << 31)\n    let middle_bits = n & mask\n    let middle_bits_toggled = middle_bits ^ mask\n    return first_bit | middle_bits_toggled | last_bit",
    "    return n ^ 0b10101010",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b11111111111111111111111111111110\n    return n ^ mask",
    "    return n ^ 0b10101010101010101010101010101010",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask >> 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ (0b11111111111111111111111111111110)",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (sizeof(Int) * 8 - 1))\n    n = n >> 1\n    n = n << 1\n    n = n ^ ((1 << (sizeof(Int) * 8 - 2)) - 1)\n    n = n | first_bit\n    n = n | last_bit\n    return n",
    "    return n ^ 0b11111110",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    let first = num & 1\n    num = num >> 1\n    let last = num & 1\n    num = num >> 1\n    num = num ^ 0x55555555\n    num = num << 1\n    num = num | first\n    num = num << 1\n    num = num | last\n    return num",
    "    let mask = 0b10101010101010101010101010101010\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b11111111111111111111111111111110\n    return n ^ mask",
    "    let mask = 0b1111_1111_1111_1111_1111_1111_1111_1111\n    let first_bit = n & 0b1000_0000_0000_0000_0000_0000_0000_0000\n    let last_bit = n & 0b0000_0000_0000_0000_0000_0000_0000_0001\n    let middle_bits = n & 0b0111_1111_1111_1111_1111_1111_1111_1110\n    let toggled_middle_bits = middle_bits ^ mask\n    return first_bit | toggled_middle_bits | last_bit",
    "    return n ^ (0b1111111111111111111111111111111111111111111111111111111111111110)",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    var n = n\n    let mask = (1 << (n.bitWidth - 2)) - 1\n    n ^= mask\n    return n",
    "    return n ^ (0b11111111111111111111111111111110)",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    n = n >> 1\n    n = n << 1\n    n = n ^ (1 << (n.bitWidth - 2))\n    n = n >> 1\n    n = n << 1\n    n = n | first_bit\n    n = n | last_bit\n    return n",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    n = n ^ (n & (n - 1))\n    n = n | (first_bit << 1)\n    n = n | last_bit\n    return n",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask >> 1)",
    "    return n ^ 0b11111110",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (Int.bitWidth - 1))\n    n = n ^ (n & (n - 1))\n    n = n | (first_bit << 1)\n    n = n | last_bit\n    return n",
    "    return n ^ 0b10101010",
    "    return n ^ 0b10101010101010101010101010101010",
    "    let mask = 0b11111111111111111111111111111111\n    let first_bit = n & 0b1\n    let last_bit = n & (0b1 << 31)\n    let middle_bits = n & (mask ^ (first_bit | last_bit))\n    return first_bit | middle_bits | last_bit",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010101010101010101010101010",
    "    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let mask = (1 << (n.bitWidth - 2)) - 1\n    return (n ^ mask) | (first_bit << (n.bitWidth - 2)) | last_bit",
    "    var n = n\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return (n >> 1) ^ (n >> 2)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    let first_bit = num & 1\n    let last_bit = num & (1 << (sizeof(Int) * 8 - 1))\n    num = num ^ (num & (num - 1))\n    num = num | (first_bit << 1)\n    num = num | last_bit\n    return num",
    "    return n ^ ((1 << n.bitWidth - 2) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b011111110\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    var mask = 0b11\n    num = num & mask\n    mask = mask << 1\n    while mask < n {\n        num = num ^ mask\n        mask = mask << 1\n    }\n    return num",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    var left_most_set_bit_pos = 0\n    var right_most_set_bit_pos = 0\n    var i = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            left_most_set_bit_pos = i\n        }\n        num = num >> 1\n        i += 1\n    }\n    num = n\n    i = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            right_most_set_bit_pos = i\n        }\n        num = num >> 1\n        i += 1\n    }\n    var mask = 0\n    for i in left_most_set_bit_pos+1..<right_most_set_bit_pos {\n        mask = mask | (1 << i)\n    }\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b11111110",
    "    var n = n\n    let mask = (1 << n.nonzeroBitCount) - 1\n    n ^= mask\n    return n",
    "    let mask = 0b11_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let middle_bits = n & (mask ^ (first_bit | last_bit))\n    return first_bit | middle_bits.toggle() | last_bit",
    "    return n ^ 0b111111110",
    "    let mask = (1 << n.bitWidth) - 1\n    let mask_first_last = mask ^ (1 | (1 << (n.bitWidth - 1)))\n    return n ^ mask_first_last",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b1111111111111111111111111111111111111111111111111111111111111111\n    let first_bit = n & 0b1\n    let last_bit = n & (0b1 << 31)\n    let middle_bits = n & mask\n    let middle_bits_toggled = middle_bits ^ mask\n    return first_bit | middle_bits_toggled | last_bit",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = (n >> 1) & 1\n    n = n ^ (n >> 1)\n    n = n ^ (n << 1)\n    n = n | (first_bit << 1)\n    n = n | (last_bit)\n    return n",
    "    let mask = 0b11111111111111111111111111111111\n    let mask_first_last = 0b11111111111111111111111111111100\n    return n ^ mask_first_last",
    "    return n ^ (0b11111111111111111111111111111110)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    let mask = (1 << (n.bitWidth - 2)) - 1\n    n ^= mask\n    return n",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b111111110",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ (1 << (n.bitWidth - 2))",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b11111111111111111111111111111111\n    let first_bit = n & 0b1\n    let last_bit = n & 0b10000000000000000000000000000000\n    let middle_bits = n & mask\n    return first_bit | middle_bits | last_bit",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    var mask = 0b11\n    var result = 0\n    for _ in 0..<4 {\n        let bit = n & mask\n        result = result | bit\n        n = n >> 2\n    }\n    return result",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let middle_bits = n & (mask ^ (first_bit | last_bit))\n    return first_bit | last_bit | middle_bits.toggle()",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    let left = mask ^ ((1 << (n.bitWidth - 2)) - 1)\n    let right = mask ^ ((1 << 1) - 1)\n    let middle = left | right\n    return n ^ middle",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b11111111111111111111111111111110\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask >> 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = (n >> (n.bitWidth - 1)) & 1\n    let middle_bits = mask ^ ((1 << 1) | (1 << (n.bitWidth - 1)))\n    return (n & middle_bits) ^ middle_bits | (first_bit << (n.bitWidth - 1)) | (last_bit << 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return ((n >> 1) ^ (n << 1)) & ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask & (mask >> 1))",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let middle_bits = n & (mask ^ (first_bit | last_bit))\n    return first_bit | middle_bits.toggle() | last_bit",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = (n >> (n.bitWidth - 1)) & 1\n    let middle_bits = mask ^ (first_bit | last_bit)\n    return n ^ middle_bits",
    "    let mask = 0b1111_1111_1111_1111_1111_1111_1111_1111\n    let first_bit = n & 0b1000_0000_0000_0000_0000_0000_0000_0000\n    let last_bit = n & 0b0000_0000_0000_0000_0000_0000_0000_0001\n    let middle_bits = n & 0b0111_1111_1111_1111_1111_1111_1111_1110\n    let middle_bits_toggled = middle_bits ^ mask\n    return first_bit | middle_bits_toggled | last_bit",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    let mask = (1 << (n.bitWidth - 2)) - 1\n    n ^= mask\n    return n",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    return n ^ 0b10101010",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = 0b111111111\n    let result = n ^ mask\n    return result",
    "    let mask = 0b11111111111111111111111111111111\n    let mask_first_last = 0b11111111111111111111111111111100\n    let mask_first_last_bits = n & mask_first_last\n    let mask_middle_bits = n & mask_first_last\n    let mask_middle_bits_toggled = mask_middle_bits ^ mask\n    return mask_first_last_bits | mask_middle_bits_toggled",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010",
    "    return n ^ 0b11111111111111111111111111111110",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    return n ^ (0b11111111111111111111111111111110)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ (0b1111111111111111111111111111111111111111111111111111111111111110)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask >> 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let middle_bits = n & (mask ^ (1 | last_bit))\n    return first_bit | middle_bits | last_bit",
    "    var num = n\n    let first_bit = num & 1\n    let last_bit = num & (1 << (Int.bitWidth - 1))\n    num = num >> 1\n    num = num << 1\n    num = num ^ ((1 << (Int.bitWidth - 2)) - 1)\n    num = num | first_bit\n    num = num | last_bit\n    return num",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << n.bitWidth) - 1\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let middle_bits = n & (mask ^ (1 | last_bit))\n    return first_bit | middle_bits | last_bit",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var mask = 1\n    var count = 0\n    var temp = n\n    while temp > 0 {\n        temp = temp >> 1\n        count += 1\n    }\n    mask = mask << (count - 2)\n    mask = mask - 1\n    mask = mask << 1\n    return n ^ mask",
    "    return n ^ (1 << 1) ^ (1 << 2)",
    "    let mask = (1 << n.bitWidth) - 1\n    return n ^ (mask >> 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b01111110",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var num = n\n    var mask = 1\n    while mask < num {\n        num = num ^ mask\n        mask = mask << 1\n    }\n    return num",
    "    return n ^ (0b11111111111111111111111111111110)",
    "    let mask = 0b10101010101010101010101010101010\n    return n ^ mask",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    n = n ^ (n & ((1 << (n.bitWidth - 2)) - 1))\n    n = n | first_bit\n    n = n | last_bit\n    return n",
    "    let mask = 0b10101010101010101010101010101010\n    return n ^ mask",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    n = n >> 1\n    n = n << 1\n    n = n | first_bit\n    n = n >> 1\n    n = n << 1\n    n = n | last_bit\n    return n",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    var n = n\n    let first_bit = n & 1\n    let last_bit = n & (1 << (sizeof(Int) * 8 - 1))\n    n = n >> 1\n    n = n << 1\n    n = n ^ ((1 << (sizeof(Int) * 8 - 2)) - 1)\n    n = n >> 1\n    n = n << 1\n    n = n | first_bit\n    n = n | last_bit\n    return n",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    return n ^ 0b10101010101010101010101010101010",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let mask = (1 << n.bitWidth) - 1\n    let left_mask = mask << 1\n    let right_mask = mask >> 1\n    let middle_mask = left_mask & right_mask\n    return n ^ middle_mask",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask",
    "    let first_bit = n & 1\n    let last_bit = n & (1 << (n.bitWidth - 1))\n    let mask = (1 << (n.bitWidth - 2)) - 1\n    return (n ^ mask) | (first_bit << (n.bitWidth - 2)) | (last_bit >> (n.bitWidth - 2))",
    "    return n ^ ((1 << (n.bitWidth - 2)) - 1)",
    "    let mask = (1 << (n.bitWidth - 2)) - 1\n    return n ^ mask"
  ]
}