{
  "name": "mbpp_450_extract_string",
  "language": "swift",
  "prompt": "\n/// Write a function to extract specified size of strings from a given list of string values.\nfunc extract_string(str: [String], l: Int) -> [String] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 8) == [\"practice\", \"solution\"])\nassert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 6) == [\"Python\"])\nassert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 9) == [\"exercises\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result = [String]()\n    for i in 0..<str.count {\n        if str[i].count == l {\n            result.append(str[i])\n        }\n    }\n    return result",
    "    var result = [String]()\n    for s in str {\n        if s.characters.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    return str.filter { $0.count == l }",
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for s in str {\n        if s.characters.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result = [String]()\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result",
    "    return str.filter { $0.count == l }",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for i in str {\n        if i.count == l {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for s in str {\n        if s.count == l {\n            result.append(s)\n        }\n    }\n    return result"
  ]
}