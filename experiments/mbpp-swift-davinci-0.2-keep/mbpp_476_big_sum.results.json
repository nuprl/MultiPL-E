{
  "name": "mbpp_476_big_sum",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted[0] + sorted[sorted.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    let sorted_nums = nums.sorted()\n    sum += sorted_nums[0]\n    sum += sorted_nums[sorted_nums.count - 1]\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var smallest = nums[0]\n    var largest = nums[0]\n    for num in nums {\n        if num < smallest {\n            smallest = num\n        } else if num > largest {\n            largest = num\n        }\n    }\n    return smallest + largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let max = nums.max()!\n    let min = nums.min()!\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    sum = min + max\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    sum = min + max\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    sum = min + max\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.last! + sorted.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = Int.max\n    var max = Int.min\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let max = nums.max()!\n    let min = nums.min()!\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let max = nums.max()!\n    let min = nums.min()!\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for num in nums {\n        if num > largest {\n            largest = num\n        }\n        if num < smallest {\n            smallest = num\n        }\n    }\n    return largest + smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let max = nums.max()\n    let min = nums.min()\n    return max! + min!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var smallest = nums[0]\n    var largest = nums[0]\n    for num in nums {\n        if num < smallest {\n            smallest = num\n        }\n        if num > largest {\n            largest = num\n        }\n    }\n    sum = largest + smallest\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    sum = min + max\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for num in nums {\n        if num > largest {\n            largest = num\n        }\n        if num < smallest {\n            smallest = num\n        }\n    }\n    return largest + smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max_num = nums[0]\n    var min_num = nums[0]\n    for num in nums {\n        if num > max_num {\n            max_num = num\n        }\n        if num < min_num {\n            min_num = num\n        }\n    }\n    return max_num + min_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted_nums = nums.sorted()\n    return sorted_nums[0] + sorted_nums[sorted_nums.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var largest = 0\n    var smallest = 0\n    for num in nums {\n        if num > largest {\n            largest = num\n        }\n        if num < smallest {\n            smallest = num\n        }\n    }\n    sum = largest + smallest\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "tmps4pdhz3c/tmps4pdhz3c.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ac9209c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ac8f00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ac8f00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ac8eff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps4pdhz3c                        0x0000559b481b7472 <unavailable> + 5234\n5    libc.so.6                          0x00002b8ac93f5460 __libc_start_main + 245\n6    tmps4pdhz3c                        0x0000559b481b70d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for num in nums {\n        if num > largest {\n            largest = num\n        } else if num < smallest {\n            smallest = num\n        }\n    }\n    return largest + smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for num in nums {\n        if num > largest {\n            largest = num\n        }\n        if num < smallest {\n            smallest = num\n        }\n    }\n    return largest + smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted[0] + sorted[sorted.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    sum = min + max\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    let sorted = nums.sorted()\n    return sorted.first! + sorted.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return min + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for num in nums {\n        if num > largest {\n            largest = num\n        }\n        if num < smallest {\n            smallest = num\n        }\n    }\n    return largest + smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    var sum = 0\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    sum = max + min\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1666123989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the largest and smallest value in a given array.\nfunc big_sum(nums: [Int]) -> Int {\n    return nums.max()! + nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_sum(nums: [1, 2, 3]) == 4)\nassert(big_sum(nums: [-1, 2, 3, 4]) == 3)\nassert(big_sum(nums: [2, 3, 6]) == 8)",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}