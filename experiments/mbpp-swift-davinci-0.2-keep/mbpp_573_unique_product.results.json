{
  "name": "mbpp_573_unique_product",
  "language": "swift",
  "prompt": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for number in list_data {\n        if !unique_list.contains(number) {\n            unique_list.append(number)\n        }\n    }\n    for number in unique_list {\n        product *= number\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for num in list_data {\n        if !unique_list.contains(num) {\n            unique_list.append(num)\n        }\n    }\n    for num in unique_list {\n        product *= num\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for number in list_data {\n        if !unique_list.contains(number) {\n            unique_list.append(number)\n        }\n    }\n    for number in unique_list {\n        product *= number\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for num in list_data {\n        if !unique_list.contains(num) {\n            unique_list.append(num)\n        }\n    }\n    for num in unique_list {\n        product *= num\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_numbers = Set<Int>()\n    for number in list_data {\n        if !unique_numbers.contains(number) {\n            unique_numbers.insert(number)\n            product *= number\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var result = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        result *= item\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = Set<Int>()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.insert(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for num in list_data {\n        if !unique_list.contains(num) {\n            unique_list.append(num)\n        }\n    }\n    for num in unique_list {\n        product *= num\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product: Int = 1\n    var unique_list: [Int] = []\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = Set<Int>()\n    for item in list_data {\n        unique_list.insert(item)\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product = product * i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    for i in list_data {\n        if !list_data.contains(i) {\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "tmpz5r6wn9o/tmpz5r6wn9o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad965655c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad96534cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad96534c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad96534b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz5r6wn9o                        0x0000555b3604f500 <unavailable> + 5376\n5    libc.so.6                          0x00002ad965841460 __libc_start_main + 245\n6    tmpz5r6wn9o                        0x0000555b3604f139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    var product = 1\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_data = [Int]()\n    for item in list_data {\n        if !unique_data.contains(item) {\n            unique_data.append(item)\n        }\n    }\n    for item in unique_data {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = Set<Int>()\n    for i in list_data {\n        unique_list.insert(i)\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var result = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        result *= item\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    \n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    \n    for item in unique_list {\n        product *= item\n    }\n    \n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product: Int = 1\n    var unique_list: [Int] = []\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n            product *= item\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n            product *= item\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list: [Int] = []\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    for i in list_data {\n        if !list_data.contains(i) {\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "tmpz5r6wn9o/tmpz5r6wn9o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad965655c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad96534cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad96534c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad96534b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz5r6wn9o                        0x0000555b3604f500 <unavailable> + 5376\n5    libc.so.6                          0x00002ad965841460 __libc_start_main + 245\n6    tmpz5r6wn9o                        0x0000555b3604f139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 0\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "tmp7a7v9f3m/tmp7a7v9f3m.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5548b8bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5548882b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5548882988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b55488817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7a7v9f3m                        0x000055f17895e5c0 <unavailable> + 5568\n5    libc.so.6                          0x00002b5548d77460 __libc_start_main + 245\n6    tmp7a7v9f3m                        0x000055f17895e1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_numbers = Set<Int>()\n    for number in list_data {\n        if !unique_numbers.contains(number) {\n            product *= number\n            unique_numbers.insert(number)\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for number in list_data {\n        if !unique_list.contains(number) {\n            unique_list.append(number)\n        }\n    }\n    for number in unique_list {\n        product *= number\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    \n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    \n    for item in unique_list {\n        product *= item\n    }\n    \n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_numbers = Set<Int>()\n    for number in list_data {\n        if !unique_numbers.contains(number) {\n            unique_numbers.insert(number)\n            product *= number\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    let unique_list = Array(Set(list_data))\n    var product = 1\n    for num in unique_list {\n        product *= num\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    var product = 1\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_data = Set<Int>()\n    for item in list_data {\n        unique_data.insert(item)\n    }\n    for item in unique_data {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = Array(Set(list_data))\n    var product = 1\n    for i in unique_list {\n        product *= i\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_numbers = Set<Int>()\n    for num in list_data {\n        if !unique_numbers.contains(num) {\n            product *= num\n            unique_numbers.insert(num)\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n            product *= i\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}