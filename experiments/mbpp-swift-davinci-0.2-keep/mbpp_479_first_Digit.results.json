{
  "name": "mbpp_479_first_Digit",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var m = n\n    while m >= 10 {\n        m /= 10\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    let str = String(n)\n    for char in str {\n        if char.isNumber {\n            return Int(String(char))!\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).prefix(1))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return n / 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "tmpwo8k1ueh/tmpwo8k1ueh.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab2cd2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab2ccff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab2ccff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab2ccff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwo8k1ueh                        0x000055dcb5417245 <unavailable> + 4677\n5    libc.so.6                          0x00002ab2cd4eb460 __libc_start_main + 245\n6    tmpwo8k1ueh                        0x000055dcb5416ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    let str = String(n)\n    for i in str {\n        if i.isNumber {\n            return Int(String(i))!\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    return Int(String(n).first!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510691,
      "stdout": "",
      "stderr": "/tmp/tmpdil726eg.swift:4:31: error: cannot convert value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n    return Int(String(n).first!)!\n                              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    let str = String(n)\n    let first = str.first\n    return Int(String(first!))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n > 9 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num > 9 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var n = n\n    while n >= 10 {\n        n /= 10\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first digit of a given number.\nfunc first_Digit(n: Int) -> Int {\n    var num = n\n    while num >= 10 {\n        num /= 10\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_Digit(n: 123) == 1)\nassert(first_Digit(n: 456) == 4)\nassert(first_Digit(n: 12) == 1)",
      "timestamp": 1665510692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}