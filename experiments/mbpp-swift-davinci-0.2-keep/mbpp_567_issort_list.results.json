{
  "name": "mbpp_567_issort_list",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 - i {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var isSorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            isSorted = false\n            break\n        }\n    }\n    return isSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - i - 1 {\n            if list[j] > list[j+1] {\n                let temp = list[j]\n                list[j] = list[j+1]\n                list[j+1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - i - 1 {\n            if list[j] > list[j + 1] {\n                list.swapAt(j, j + 1)\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j+1] {\n                let temp = list[j]\n                list[j] = list[j+1]\n                list[j+1] = temp\n                sorted = false\n            }\n        }\n        if sorted {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    if list == list1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var list2 = list1\n    list.sort()\n    if list == list2 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                list.swapAt(i, j)\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 - i {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                list.swapAt(j, j + 1)\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 - i {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    if list == list1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 1..<list.count {\n        if list[i] < list[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    if list1.count <= 1 {\n        return true\n    }\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    let list2 = list1.sorted()\n    if list1 == list2 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                list.swapAt(i, j)\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - i - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    var i = 0\n    while sorted && i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n        }\n        i += 1\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - i - 1 {\n            if list[j] > list[j+1] {\n                let temp = list[j]\n                list[j] = list[j+1]\n                list[j+1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list2 = list1\n    list2.sort()\n    return list1 == list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var is_sort = true\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            is_sort = false\n            break\n        }\n    }\n    return is_sort\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                list.swapAt(i, j)\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var i = 0\n    while i < list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 - i {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    while i < list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - i - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count {\n            if list[i] < list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var sorted = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    if list1.count == 0 {\n        return true\n    }\n    for i in 1..<list1.count {\n        if list1[i] < list1[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var i = 0\n    var j = 0\n    var temp = 0\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    print(list)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "tmpeo9bo2wv/tmpeo9bo2wv.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1fb9de5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1fb9adcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1fb9adc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1fb9adb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeo9bo2wv                        0x000055faa98e0861 <unavailable> + 6241\n5    libc.so.6                          0x00002b1fb9fd1460 __libc_start_main + 245\n6    tmpeo9bo2wv                        0x000055faa98e0399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    var sorted = true\n    for i in 0..<list.count-1 {\n        if list[i] > list[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 1..<list.count {\n        if list[i] < list[i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                let temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    for i in 0..<list1.count - 1 {\n        if list1[i] > list1[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in 0..<list.count - 1 {\n            if list[j] > list[j + 1] {\n                let temp = list[j]\n                list[j] = list[j + 1]\n                list[j + 1] = temp\n            }\n        }\n    }\n    return list == list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    if list.count == 0 || list.count == 1 {\n        return true\n    }\n    for i in 0..<list.count - 1 {\n        if list[i] > list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1: [Int]) -> Bool {\n    var list = list1\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n            if list[i] > list[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)\nassert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}