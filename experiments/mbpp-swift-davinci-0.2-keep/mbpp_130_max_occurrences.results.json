{
  "name": "mbpp_130_max_occurrences",
  "language": "swift",
  "prompt": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpm5yqje4f/tmpm5yqje4f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34531dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3452ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3452ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3452ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5yqje4f                        0x000055639e3fd7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b34533c8460 __libc_start_main + 245\n6    tmpm5yqje4f                        0x000055639e3fd399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpklv0a1ae/tmpklv0a1ae.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f7db36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f7d82db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f7d82d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f7d82c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpklv0a1ae                        0x00005621b28b87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b3f7dd22460 __libc_start_main + 245\n6    tmpklv0a1ae                        0x00005621b28b8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (num, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpf25fahdg/tmpf25fahdg.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64af221c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64aef18b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b64aef18988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64aef177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf25fahdg                        0x0000563eff9097b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b64af40d460 __libc_start_main + 245\n6    tmpf25fahdg                        0x0000563eff909379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_occurrences = 0\n    var max_occurrences_item = 0\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if occurrences[num] == nil {\n            occurrences[num] = 1\n        } else {\n            occurrences[num]! += 1\n        }\n        if occurrences[num]! > max_occurrences {\n            max_occurrences = occurrences[num]!\n            max_occurrences_item = num\n        }\n    }\n    return max_occurrences_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    var max_occurrences = 0\n    for (_, count) in occurrences {\n        max_occurrences = max(max_occurrences, count)\n    }\n    return max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpl2xsn94d/tmpl2xsn94d.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad43dc62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad43d959b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad43d959988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad43d9587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2xsn94d                        0x0000559c74c27845 <unavailable> + 6213\n5    libc.so.6                          0x00002ad43de4e460 __libc_start_main + 245\n6    tmpl2xsn94d                        0x0000559c74c27409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmptu5t3l72/tmptu5t3l72.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e5fe64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e5fb5bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e5fb5b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e5fb5a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptu5t3l72                        0x00005592942467d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b5e60050460 __libc_start_main + 245\n6    tmptu5t3l72                        0x0000559294246399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmptjs1d3v5/tmptjs1d3v5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8319dfbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8319af2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8319af2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8319af17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptjs1d3v5                        0x000055f776a347b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b8319fe7460 __libc_start_main + 245\n6    tmptjs1d3v5                        0x000055f776a34379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.max { a, b in a.value < b.value }!.value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpgohfa4iw/tmpgohfa4iw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b371349fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3713196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3713196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37131957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgohfa4iw                        0x000055c452dc8785 <unavailable> + 6021\n5    libc.so.6                          0x00002b371368b460 __libc_start_main + 245\n6    tmpgohfa4iw                        0x000055c452dc8349 <unavailable> + 4937\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpsmy6kuax/tmpsmy6kuax.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba02a381c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02a078b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02a078988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02a0777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsmy6kuax                        0x000055ffba6c86d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ba02a56d460 __libc_start_main + 245\n6    tmpsmy6kuax                        0x000055ffba6c8299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    let max_count = occurrences.values.max()\n    for (key, value) in occurrences {\n        if value == max_count {\n            return key\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpnsl3xo0t/tmpnsl3xo0t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52116a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5211397b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5211397988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52113967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnsl3xo0t                        0x000055899f32d7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b521188c460 __libc_start_main + 245\n6    tmpnsl3xo0t                        0x000055899f32d399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_dxf5fdj/tmp_dxf5fdj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dxf5fdj                        0x0000564132fe3855 <unavailable> + 6229\n5    libc.so.6                          0x00002b14755c6460 __libc_start_main + 245\n6    tmp_dxf5fdj                        0x0000564132fe3419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_item = 0\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max_count {\n            max_count = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpm5yqje4f/tmpm5yqje4f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34531dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3452ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3452ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3452ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5yqje4f                        0x000055639e3fd7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b34533c8460 __libc_start_main + 245\n6    tmpm5yqje4f                        0x000055639e3fd399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpbgajll4m/tmpbgajll4m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cb4f1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cb4c14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cb4c14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cb4c137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbgajll4m                        0x000055aef9edb7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1cb5109460 __libc_start_main + 245\n6    tmpbgajll4m                        0x000055aef9edb389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (key, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpc40t2rt8/tmpc40t2rt8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4d9569c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba4d9260b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba4d9260988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba4d925f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc40t2rt8                        0x000055a07fa9f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ba4d9755460 __libc_start_main + 245\n6    tmpc40t2rt8                        0x000055a07fa9f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpvk46lmb5/tmpvk46lmb5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49d33dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49d30d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49d30d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49d30d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvk46lmb5                        0x0000559fffcd97d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b49d35c8460 __libc_start_main + 245\n6    tmpvk46lmb5                        0x0000559fffcd9399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpsmy6kuax/tmpsmy6kuax.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba02a381c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02a078b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02a078988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02a0777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsmy6kuax                        0x000055ffba6c86d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ba02a56d460 __libc_start_main + 245\n6    tmpsmy6kuax                        0x000055ffba6c8299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpbgajll4m/tmpbgajll4m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cb4f1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cb4c14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cb4c14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cb4c137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbgajll4m                        0x000055aef9edb7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1cb5109460 __libc_start_main + 245\n6    tmpbgajll4m                        0x000055aef9edb389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var freq = [Int: Int]()\n    for num in nums {\n        if let count = freq[num] {\n            freq[num] = count + 1\n        } else {\n            freq[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in freq {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp60hlm0p8/tmp60hlm0p8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab663c8cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab663983b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab663983988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6639827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60hlm0p8                        0x000055c0690177b5 <unavailable> + 6069\n5    libc.so.6                          0x00002ab663e78460 __libc_start_main + 245\n6    tmp60hlm0p8                        0x000055c069017379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_jb_twd9/tmp_jb_twd9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c7daefc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c7d7e6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c7d7e6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c7d7e57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_jb_twd9                        0x000055ac012747d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b4c7dcdb460 __libc_start_main + 245\n6    tmp_jb_twd9                        0x000055ac01274399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int:Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpqpu918ur/tmpqpu918ur.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae873f9cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae873c93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae873c93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae873c927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqpu918ur                        0x0000556541a5b7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ae874188460 __libc_start_main + 245\n6    tmpqpu918ur                        0x0000556541a5b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_dxf5fdj/tmp_dxf5fdj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dxf5fdj                        0x0000564132fe3855 <unavailable> + 6229\n5    libc.so.6                          0x00002b14755c6460 __libc_start_main + 245\n6    tmp_dxf5fdj                        0x0000564132fe3419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp66f2uu98/tmp66f2uu98.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac06783ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac067531b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac067531988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0675307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp66f2uu98                        0x000055b8e740f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ac067a26460 __libc_start_main + 245\n6    tmp66f2uu98                        0x000055b8e740f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdpbbeguo/tmpdpbbeguo.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0496311c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0496008b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0496008988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04960077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdpbbeguo                        0x000055a92a0937e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b04964fd460 __libc_start_main + 245\n6    tmpdpbbeguo                        0x000055a92a0933a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpwg0proab/tmpwg0proab.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5b456cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5b4263b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5b4263988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5b42627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg0proab                        0x0000556c79698875 <unavailable> + 6261\n5    libc.so.6                          0x00002ab5b4758460 __libc_start_main + 245\n6    tmpwg0proab                        0x0000556c79698439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    \n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdne6xgc7/tmpdne6xgc7.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cd8f2fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cd8c26b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cd8c26988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cd8c257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdne6xgc7                        0x0000557ab4d4d7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7cd911b460 __libc_start_main + 245\n6    tmpdne6xgc7                        0x0000557ab4d4d379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpzb0p4bzk/tmpzb0p4bzk.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d51179c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d50e70b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d50e70988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d50e6f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzb0p4bzk                        0x000055d43b6667c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1d51365460 __libc_start_main + 245\n6    tmpzb0p4bzk                        0x000055d43b666389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in dict {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmppt8y533a/tmppt8y533a.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae84d4a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae84d19eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae84d19e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae84d19d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8y533a                        0x0000562b0eb737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002ae84d693460 __libc_start_main + 245\n6    tmppt8y533a                        0x0000562b0eb73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpvk46lmb5/tmpvk46lmb5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49d33dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49d30d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49d30d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49d30d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvk46lmb5                        0x0000559fffcd97d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b49d35c8460 __libc_start_main + 245\n6    tmpvk46lmb5                        0x0000559fffcd9399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpklv0a1ae/tmpklv0a1ae.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f7db36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f7d82db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f7d82d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f7d82c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpklv0a1ae                        0x00005621b28b87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b3f7dd22460 __libc_start_main + 245\n6    tmpklv0a1ae                        0x00005621b28b8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_dxf5fdj/tmp_dxf5fdj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dxf5fdj                        0x0000564132fe3855 <unavailable> + 6229\n5    libc.so.6                          0x00002b14755c6460 __libc_start_main + 245\n6    tmp_dxf5fdj                        0x0000564132fe3419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmprtwh0srh/tmprtwh0srh.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acce1387c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acce107eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acce107e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acce107d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprtwh0srh                        0x0000556688af17c5 <unavailable> + 6085\n5    libc.so.6                          0x00002acce1573460 __libc_start_main + 245\n6    tmprtwh0srh                        0x0000556688af1389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let value = dict[num] {\n            dict[num] = value + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpugh9tnzk/tmpugh9tnzk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b445ed60c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b445ea57b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b445ea57988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b445ea567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpugh9tnzk                        0x0000561c7d2f77b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b445ef4c460 __libc_start_main + 245\n6    tmpugh9tnzk                        0x0000561c7d2f7379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpbgajll4m/tmpbgajll4m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cb4f1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cb4c14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cb4c14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cb4c137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbgajll4m                        0x000055aef9edb7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1cb5109460 __libc_start_main + 245\n6    tmpbgajll4m                        0x000055aef9edb389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_7hxyy7i/tmp_7hxyy7i.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3b63b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3b60acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3b60ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3b60ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7hxyy7i                        0x00005564708977e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ac3b65a1460 __libc_start_main + 245\n6    tmp_7hxyy7i                        0x00005564708973a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmprvecykk4/tmprvecykk4.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abb0c3b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abb0c0a8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abb0c0a8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abb0c0a77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprvecykk4                        0x0000556694c9b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002abb0c59d460 __libc_start_main + 245\n6    tmprvecykk4                        0x0000556694c9b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp8ufumlk9/tmp8ufumlk9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b221da8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b221d786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b221d786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b221d7857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8ufumlk9                        0x00005596d94497b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b221dc7b460 __libc_start_main + 245\n6    tmp8ufumlk9                        0x00005596d9449379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpusdtf1cw/tmpusdtf1cw.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c27f6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c27c62b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c27c62988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c27c617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpusdtf1cw                        0x0000555bb55dd7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b6c28157460 __libc_start_main + 245\n6    tmpusdtf1cw                        0x0000555bb55dd389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var count = 0\n    var dict = [Int: Int]()\n    for num in nums {\n        if let val = dict[num] {\n            dict[num] = val + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for (key, val) in dict {\n        if val > count {\n            count = val\n            max = key\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpyh5mtzvg/tmpyh5mtzvg.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acac0dcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acac0ac2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acac0ac2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acac0ac17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyh5mtzvg                        0x0000559d8be538e6 <unavailable> + 6374\n5    libc.so.6                          0x00002acac0fb7460 __libc_start_main + 245\n6    tmpyh5mtzvg                        0x0000559d8be53379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (key, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpc40t2rt8/tmpc40t2rt8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4d9569c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba4d9260b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba4d9260988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba4d925f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc40t2rt8                        0x000055a07fa9f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ba4d9755460 __libc_start_main + 245\n6    tmpc40t2rt8                        0x000055a07fa9f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    var max_count = 0\n    var max_item = 0\n    \n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        \n        if counts[num]! > max_count {\n            max_count = counts[num]!\n            max_item = num\n        }\n    }\n    \n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkjjmib3c/tmpkjjmib3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac386409c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac386100b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac386100988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3860ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjmib3c                        0x00005619fe79e7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ac3865f5460 __libc_start_main + 245\n6    tmpkjjmib3c                        0x00005619fe79e389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdpbbeguo/tmpdpbbeguo.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0496311c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0496008b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0496008988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04960077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdpbbeguo                        0x000055a92a0937e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b04964fd460 __libc_start_main + 245\n6    tmpdpbbeguo                        0x000055a92a0933a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpnsl3xo0t/tmpnsl3xo0t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52116a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5211397b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5211397988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52113967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnsl3xo0t                        0x000055899f32d7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b521188c460 __libc_start_main + 245\n6    tmpnsl3xo0t                        0x000055899f32d399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    let max = dict.values.max()\n    return max!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmprmbrk4vk/tmprmbrk4vk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8f0e86c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8f0b7db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8f0b7d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8f0b7c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprmbrk4vk                        0x00005613dc6a7855 <unavailable> + 6229\n5    libc.so.6                          0x00002ae8f1072460 __libc_start_main + 245\n6    tmprmbrk4vk                        0x00005613dc6a7419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpklv0a1ae/tmpklv0a1ae.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f7db36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f7d82db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f7d82d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f7d82c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpklv0a1ae                        0x00005621b28b87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b3f7dd22460 __libc_start_main + 245\n6    tmpklv0a1ae                        0x00005621b28b8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.max { $0.1 < $1.1 }!.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpafw5w_27/tmpafw5w_27.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1479a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b147976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b147976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b147976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpafw5w_27                        0x00005638d1b6c8b6 <unavailable> + 6326\n5    libc.so.6                          0x00002b1479c63460 __libc_start_main + 245\n6    tmpafw5w_27                        0x00005638d1b6c349 <unavailable> + 4937\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpklv0a1ae/tmpklv0a1ae.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f7db36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f7d82db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f7d82d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f7d82c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpklv0a1ae                        0x00005621b28b87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b3f7dd22460 __libc_start_main + 245\n6    tmpklv0a1ae                        0x00005621b28b8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpzb0p4bzk/tmpzb0p4bzk.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d51179c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d50e70b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d50e70988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d50e6f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzb0p4bzk                        0x000055d43b6667c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1d51365460 __libc_start_main + 245\n6    tmpzb0p4bzk                        0x000055d43b666389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpbgajll4m/tmpbgajll4m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cb4f1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cb4c14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cb4c14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cb4c137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbgajll4m                        0x000055aef9edb7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1cb5109460 __libc_start_main + 245\n6    tmpbgajll4m                        0x000055aef9edb389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpof41dfnb/tmpof41dfnb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae34e046c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae34dd3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae34dd3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae34dd3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpof41dfnb                        0x00005642290d67b5 <unavailable> + 6069\n5    libc.so.6                          0x00002ae34e232460 __libc_start_main + 245\n6    tmpof41dfnb                        0x00005642290d6379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkjjmib3c/tmpkjjmib3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac386409c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac386100b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac386100988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3860ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjmib3c                        0x00005619fe79e7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ac3865f5460 __libc_start_main + 245\n6    tmpkjjmib3c                        0x00005619fe79e389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var maxCount = 0\n    var maxNum = 0\n    for (num, count) in dict {\n        if count > maxCount {\n            maxCount = count\n            maxNum = num\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpe0v7vdyw/tmpe0v7vdyw.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aebff112c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aebfee09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aebfee09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aebfee087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe0v7vdyw                        0x000055a0be58a8e6 <unavailable> + 6374\n5    libc.so.6                          0x00002aebff2fe460 __libc_start_main + 245\n6    tmpe0v7vdyw                        0x000055a0be58a379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpzb0p4bzk/tmpzb0p4bzk.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d51179c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d50e70b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d50e70988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d50e6f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzb0p4bzk                        0x000055d43b6667c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1d51365460 __libc_start_main + 245\n6    tmpzb0p4bzk                        0x000055d43b666389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdpbbeguo/tmpdpbbeguo.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0496311c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0496008b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0496008988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04960077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdpbbeguo                        0x000055a92a0937e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b04964fd460 __libc_start_main + 245\n6    tmpdpbbeguo                        0x000055a92a0933a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpsmy6kuax/tmpsmy6kuax.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba02a381c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02a078b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02a078988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02a0777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsmy6kuax                        0x000055ffba6c86d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ba02a56d460 __libc_start_main + 245\n6    tmpsmy6kuax                        0x000055ffba6c8299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkjjmib3c/tmpkjjmib3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac386409c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac386100b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac386100988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3860ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjmib3c                        0x00005619fe79e7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ac3865f5460 __libc_start_main + 245\n6    tmpkjjmib3c                        0x00005619fe79e389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    \n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdne6xgc7/tmpdne6xgc7.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cd8f2fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cd8c26b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cd8c26988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cd8c257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdne6xgc7                        0x0000557ab4d4d7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7cd911b460 __libc_start_main + 245\n6    tmpdne6xgc7                        0x0000557ab4d4d379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        max = max > value ? max : value\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkduwm07p/tmpkduwm07p.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14c7ce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14c79dcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14c79dc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14c79db7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkduwm07p                        0x000055f562c0a7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b14c7ed1460 __libc_start_main + 245\n6    tmpkduwm07p                        0x000055f562c0a379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmprtwh0srh/tmprtwh0srh.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acce1387c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acce107eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acce107e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acce107d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprtwh0srh                        0x0000556688af17c5 <unavailable> + 6085\n5    libc.so.6                          0x00002acce1573460 __libc_start_main + 245\n6    tmprtwh0srh                        0x0000556688af1389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    let max = dict.values.max()\n    return max ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmputqa2tt6/tmputqa2tt6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1575776c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b157546db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b157546d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b157546c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmputqa2tt6                        0x000055f2e74107c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1575962460 __libc_start_main + 245\n6    tmputqa2tt6                        0x000055f2e7410389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpon55qumz/tmpon55qumz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79bddc1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79bdab8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79bdab8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79bdab77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpon55qumz                        0x00005585c8b3b7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b79bdfad460 __libc_start_main + 245\n6    tmpon55qumz                        0x00005585c8b3b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkjjmib3c/tmpkjjmib3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac386409c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac386100b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac386100988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3860ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjmib3c                        0x00005619fe79e7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ac3865f5460 __libc_start_main + 245\n6    tmpkjjmib3c                        0x00005619fe79e389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmprtwh0srh/tmprtwh0srh.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acce1387c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acce107eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acce107e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acce107d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprtwh0srh                        0x0000556688af17c5 <unavailable> + 6085\n5    libc.so.6                          0x00002acce1573460 __libc_start_main + 245\n6    tmprtwh0srh                        0x0000556688af1389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpnsl3xo0t/tmpnsl3xo0t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52116a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5211397b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5211397988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52113967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnsl3xo0t                        0x000055899f32d7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b521188c460 __libc_start_main + 245\n6    tmpnsl3xo0t                        0x000055899f32d399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n            if count + 1 > max {\n                max = count + 1\n            }\n        } else {\n            dict[num] = 1\n            if 1 > max {\n                max = 1\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpqxhi3l9u/tmpqxhi3l9u.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8377117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8376e0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8376e0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8376e0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxhi3l9u                        0x0000560295d08645 <unavailable> + 5701\n5    libc.so.6                          0x00002b8377303460 __libc_start_main + 245\n6    tmpqxhi3l9u                        0x0000560295d08209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        max = max > count ? max : count\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpfmlhwrrb/tmpfmlhwrrb.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adb10a70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adb10767b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adb10767988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adb107667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfmlhwrrb                        0x0000555cbf2777b5 <unavailable> + 6069\n5    libc.so.6                          0x00002adb10c5c460 __libc_start_main + 245\n6    tmpfmlhwrrb                        0x0000555cbf277379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpklv0a1ae/tmpklv0a1ae.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f7db36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f7d82db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f7d82d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f7d82c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpklv0a1ae                        0x00005621b28b87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b3f7dd22460 __libc_start_main + 245\n6    tmpklv0a1ae                        0x00005621b28b8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num, default: 0] += 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmps9li06hr/tmps9li06hr.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79532b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7952fa7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7952fa7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7952fa67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps9li06hr                        0x00005632746b9875 <unavailable> + 6261\n5    libc.so.6                          0x00002b795349c460 __libc_start_main + 245\n6    tmps9li06hr                        0x00005632746b9439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp8ufumlk9/tmp8ufumlk9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b221da8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b221d786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b221d786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b221d7857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8ufumlk9                        0x00005596d94497b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b221dc7b460 __libc_start_main + 245\n6    tmp8ufumlk9                        0x00005596d9449379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (num, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpf25fahdg/tmpf25fahdg.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64af221c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64aef18b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b64aef18988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64aef177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf25fahdg                        0x0000563eff9097b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b64af40d460 __libc_start_main + 245\n6    tmpf25fahdg                        0x0000563eff909379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_dxf5fdj/tmp_dxf5fdj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dxf5fdj                        0x0000564132fe3855 <unavailable> + 6229\n5    libc.so.6                          0x00002b14755c6460 __libc_start_main + 245\n6    tmp_dxf5fdj                        0x0000564132fe3419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpsmy6kuax/tmpsmy6kuax.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba02a381c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02a078b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02a078988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02a0777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsmy6kuax                        0x000055ffba6c86d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ba02a56d460 __libc_start_main + 245\n6    tmpsmy6kuax                        0x000055ffba6c8299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let value = dict[num] {\n            dict[num] = value + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpfta_9n3t/tmpfta_9n3t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6321f42c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6321c39b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6321c39988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6321c387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfta_9n3t                        0x0000565236be07b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b632212e460 __libc_start_main + 245\n6    tmpfta_9n3t                        0x0000565236be0379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpwg0proab/tmpwg0proab.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5b456cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5b4263b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5b4263988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5b42627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg0proab                        0x0000556c79698875 <unavailable> + 6261\n5    libc.so.6                          0x00002ab5b4758460 __libc_start_main + 245\n6    tmpwg0proab                        0x0000556c79698439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpwg0proab/tmpwg0proab.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5b456cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5b4263b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5b4263988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5b42627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg0proab                        0x0000556c79698875 <unavailable> + 6261\n5    libc.so.6                          0x00002ab5b4758460 __libc_start_main + 245\n6    tmpwg0proab                        0x0000556c79698439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp66f2uu98/tmp66f2uu98.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac06783ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac067531b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac067531988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0675307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp66f2uu98                        0x000055b8e740f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ac067a26460 __libc_start_main + 245\n6    tmp66f2uu98                        0x000055b8e740f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_item = 0\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max_count {\n            max_count = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    return occurrences.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpokfgpcbo/tmpokfgpcbo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46d0851c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46d0548b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46d0548988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46d05477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpokfgpcbo                        0x000055adccb40875 <unavailable> + 6261\n5    libc.so.6                          0x00002b46d0a3d460 __libc_start_main + 245\n6    tmpokfgpcbo                        0x000055adccb40439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = dict[num, default: 0] + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpblusji3n/tmpblusji3n.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afff4f1bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afff4c12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afff4c12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afff4c117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpblusji3n                        0x0000564ee5b8f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002afff5107460 __libc_start_main + 245\n6    tmpblusji3n                        0x0000564ee5b8f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpwg0proab/tmpwg0proab.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5b456cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5b4263b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5b4263988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5b42627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg0proab                        0x0000556c79698875 <unavailable> + 6261\n5    libc.so.6                          0x00002ab5b4758460 __libc_start_main + 245\n6    tmpwg0proab                        0x0000556c79698439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpusdtf1cw/tmpusdtf1cw.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c27f6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c27c62b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c27c62988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c27c617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpusdtf1cw                        0x0000555bb55dd7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b6c28157460 __libc_start_main + 245\n6    tmpusdtf1cw                        0x0000555bb55dd389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdpbbeguo/tmpdpbbeguo.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0496311c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0496008b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0496008988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04960077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdpbbeguo                        0x000055a92a0937e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b04964fd460 __libc_start_main + 245\n6    tmpdpbbeguo                        0x000055a92a0933a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpspd18vuj/tmpspd18vuj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada611edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada60ee4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada60ee4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada60ee37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpspd18vuj                        0x000055bc6cdd9875 <unavailable> + 6261\n5    libc.so.6                          0x00002ada613d9460 __libc_start_main + 245\n6    tmpspd18vuj                        0x000055bc6cdd9439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in dict {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpzlvky9cp/tmpzlvky9cp.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad17a4a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad17a19bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad17a19b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad17a19a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzlvky9cp                        0x00005647e5f8c8e6 <unavailable> + 6374\n5    libc.so.6                          0x00002ad17a690460 __libc_start_main + 245\n6    tmpzlvky9cp                        0x00005647e5f8c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpvk46lmb5/tmpvk46lmb5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49d33dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49d30d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49d30d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49d30d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvk46lmb5                        0x0000559fffcd97d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b49d35c8460 __libc_start_main + 245\n6    tmpvk46lmb5                        0x0000559fffcd9399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var freq = [Int: Int]()\n    for num in nums {\n        if let count = freq[num] {\n            freq[num] = count + 1\n        } else {\n            freq[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in freq {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmph7lpr2ey/tmph7lpr2ey.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b29877adc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b29874a4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b29874a4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29874a37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph7lpr2ey                        0x000055b66d7eb7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b2987999460 __libc_start_main + 245\n6    tmph7lpr2ey                        0x000055b66d7eb379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpnsl3xo0t/tmpnsl3xo0t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52116a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5211397b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5211397988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52113967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnsl3xo0t                        0x000055899f32d7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b521188c460 __libc_start_main + 245\n6    tmpnsl3xo0t                        0x000055899f32d399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int:Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpjcs2tb4g/tmpjcs2tb4g.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b026d710c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b026d407b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b026d407988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b026d4067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjcs2tb4g                        0x000055c974fbe7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b026d8fc460 __libc_start_main + 245\n6    tmpjcs2tb4g                        0x000055c974fbe379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in dict {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmppt8y533a/tmppt8y533a.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae84d4a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae84d19eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae84d19e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae84d19d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8y533a                        0x0000562b0eb737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002ae84d693460 __libc_start_main + 245\n6    tmppt8y533a                        0x0000562b0eb73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_dxf5fdj/tmp_dxf5fdj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dxf5fdj                        0x0000564132fe3855 <unavailable> + 6229\n5    libc.so.6                          0x00002b14755c6460 __libc_start_main + 245\n6    tmp_dxf5fdj                        0x0000564132fe3419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpsmy6kuax/tmpsmy6kuax.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba02a381c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02a078b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02a078988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02a0777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsmy6kuax                        0x000055ffba6c86d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ba02a56d460 __libc_start_main + 245\n6    tmpsmy6kuax                        0x000055ffba6c8299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkjjmib3c/tmpkjjmib3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac386409c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac386100b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac386100988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3860ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjmib3c                        0x00005619fe79e7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ac3865f5460 __libc_start_main + 245\n6    tmpkjjmib3c                        0x00005619fe79e389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in dict {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmppt8y533a/tmppt8y533a.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae84d4a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae84d19eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae84d19e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae84d19d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8y533a                        0x0000562b0eb737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002ae84d693460 __libc_start_main + 245\n6    tmppt8y533a                        0x0000562b0eb73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var max_num = 0\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpusdtf1cw/tmpusdtf1cw.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c27f6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c27c62b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c27c62988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c27c617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpusdtf1cw                        0x0000555bb55dd7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b6c28157460 __libc_start_main + 245\n6    tmpusdtf1cw                        0x0000555bb55dd389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpbgajll4m/tmpbgajll4m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cb4f1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cb4c14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cb4c14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cb4c137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbgajll4m                        0x000055aef9edb7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b1cb5109460 __libc_start_main + 245\n6    tmpbgajll4m                        0x000055aef9edb389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpspd18vuj/tmpspd18vuj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada611edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada60ee4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada60ee4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada60ee37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpspd18vuj                        0x000055bc6cdd9875 <unavailable> + 6261\n5    libc.so.6                          0x00002ada613d9460 __libc_start_main + 245\n6    tmpspd18vuj                        0x000055bc6cdd9439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var freq = [Int: Int]()\n    for num in nums {\n        if let count = freq[num] {\n            freq[num] = count + 1\n        } else {\n            freq[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in freq {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmph7lpr2ey/tmph7lpr2ey.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b29877adc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b29874a4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b29874a4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29874a37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph7lpr2ey                        0x000055b66d7eb7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b2987999460 __libc_start_main + 245\n6    tmph7lpr2ey                        0x000055b66d7eb379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    let max = dict.values.max()\n    return max!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmprmbrk4vk/tmprmbrk4vk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8f0e86c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8f0b7db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8f0b7d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8f0b7c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprmbrk4vk                        0x00005613dc6a7855 <unavailable> + 6229\n5    libc.so.6                          0x00002ae8f1072460 __libc_start_main + 245\n6    tmprmbrk4vk                        0x00005613dc6a7419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpkjjmib3c/tmpkjjmib3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac386409c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac386100b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac386100988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3860ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjmib3c                        0x00005619fe79e7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ac3865f5460 __libc_start_main + 245\n6    tmpkjjmib3c                        0x00005619fe79e389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpdpbbeguo/tmpdpbbeguo.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0496311c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0496008b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0496008988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04960077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdpbbeguo                        0x000055a92a0937e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b04964fd460 __libc_start_main + 245\n6    tmpdpbbeguo                        0x000055a92a0933a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_dxf5fdj/tmp_dxf5fdj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_dxf5fdj                        0x0000564132fe3855 <unavailable> + 6229\n5    libc.so.6                          0x00002b14755c6460 __libc_start_main + 245\n6    tmp_dxf5fdj                        0x0000564132fe3419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in occurrences {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpbnscbi_9/tmpbnscbi_9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2ea9429c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2ea9120b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2ea9120988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2ea911f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbnscbi_9                        0x000055de842fb7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b2ea9615460 __libc_start_main + 245\n6    tmpbnscbi_9                        0x000055de842fb379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpwg0proab/tmpwg0proab.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5b456cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5b4263b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5b4263988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5b42627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg0proab                        0x0000556c79698875 <unavailable> + 6261\n5    libc.so.6                          0x00002ab5b4758460 __libc_start_main + 245\n6    tmpwg0proab                        0x0000556c79698439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmptjs1d3v5/tmptjs1d3v5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8319dfbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8319af2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8319af2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8319af17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptjs1d3v5                        0x000055f776a347b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b8319fe7460 __libc_start_main + 245\n6    tmptjs1d3v5                        0x000055f776a34379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.max { a, b in a.value < b.value }!.key\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmppa9wn07b/tmppa9wn07b.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c69743c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c6943ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c6943a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c694397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppa9wn07b                        0x00005607839078d6 <unavailable> + 6358\n5    libc.so.6                          0x00002b1c6992f460 __libc_start_main + 245\n6    tmppa9wn07b                        0x0000560783907369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in dict {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpzlvky9cp/tmpzlvky9cp.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad17a4a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad17a19bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad17a19b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad17a19a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzlvky9cp                        0x00005647e5f8c8e6 <unavailable> + 6374\n5    libc.so.6                          0x00002ad17a690460 __libc_start_main + 245\n6    tmpzlvky9cp                        0x00005647e5f8c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpnah3oora/tmpnah3oora.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab52832ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab528025b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab528025988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5280247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnah3oora                        0x000055bbf44157e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab52851a460 __libc_start_main + 245\n6    tmpnah3oora                        0x000055bbf44153a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmptjs1d3v5/tmptjs1d3v5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8319dfbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8319af2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8319af2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8319af17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptjs1d3v5                        0x000055f776a347b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b8319fe7460 __libc_start_main + 245\n6    tmptjs1d3v5                        0x000055f776a34379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpcydym25z/tmpcydym25z.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d64502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d641f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d641f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d641f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcydym25z                        0x000056129ba737b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4d646ee460 __libc_start_main + 245\n6    tmpcydym25z                        0x000056129ba73379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmp_7hxyy7i/tmp_7hxyy7i.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3b63b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3b60acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3b60ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3b60ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7hxyy7i                        0x00005564708977e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ac3b65a1460 __libc_start_main + 245\n6    tmp_7hxyy7i                        0x00005564708973a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp419ls_iq/tmp419ls_iq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7dc344ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7dc3145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7dc3145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7dc31447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp419ls_iq                        0x000055ae919a27b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b7dc363a460 __libc_start_main + 245\n6    tmp419ls_iq                        0x000055ae919a2379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "tmprhza9fcn/tmprhza9fcn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9957613c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b995730ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b995730a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99573097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprhza9fcn                        0x0000559d0928a6f5 <unavailable> + 5877\n5    libc.so.6                          0x00002b99577ff460 __libc_start_main + 245\n6    tmprhza9fcn                        0x0000559d0928a2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "tmpnsl3xo0t/tmpnsl3xo0t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52116a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5211397b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5211397988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52113967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnsl3xo0t                        0x000055899f32d7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b521188c460 __libc_start_main + 245\n6    tmpnsl3xo0t                        0x000055899f32d399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if occurrences[num] == nil {\n            occurrences[num] = 1\n        } else {\n            occurrences[num]! += 1\n        }\n    }\n    return occurrences.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "tmpblu38xsw/tmpblu38xsw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ce59fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ce56f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ce56f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ce56f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpblu38xsw                        0x00005562fbc468b5 <unavailable> + 6325\n5    libc.so.6                          0x00002b9ce5be6460 __libc_start_main + 245\n6    tmpblu38xsw                        0x00005562fbc46479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}