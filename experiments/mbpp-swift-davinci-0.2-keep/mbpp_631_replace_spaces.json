{
  "name": "mbpp_631_replace_spaces",
  "language": "swift",
  "prompt": "\n/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(replace_spaces(text: \"Jumanji The Jungle\") == \"Jumanji_The_Jungle\")\nassert(replace_spaces(text: \"The_Avengers\") == \"The Avengers\")\nassert(replace_spaces(text: \"Fast and Furious\") == \"Fast_and_Furious\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    var new_text = \"\"\n    for char in text {\n        if char == \" \" {\n            new_text += \"_\"\n        } else if char == \"_\" {\n            new_text += \" \"\n        } else {\n            new_text += String(char)\n        }\n    }\n    return new_text",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    var result = \"\"\n    for char in text {\n        if char == \" \" {\n            result += \"_\"\n        } else if char == \"_\" {\n            result += \" \"\n        } else {\n            result += String(char)\n        }\n    }\n    return result",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    var result = \"\"\n    for char in text {\n        if char == \" \" {\n            result += \"_\"\n        } else if char == \"_\" {\n            result += \" \"\n        } else {\n            result += String(char)\n        }\n    }\n    return result",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    var result = \"\"\n    for char in text {\n        if char == \" \" {\n            result += \"_\"\n        } else if char == \"_\" {\n            result += \" \"\n        } else {\n            result += String(char)\n        }\n    }\n    return result",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")",
    "    return text.replacingOccurrences(of: \" \", with: \"_\")"
  ]
}