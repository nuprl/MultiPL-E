{
  "name": "mbpp_17_square_perimeter",
  "language": "swift",
  "prompt": "\n/// Write a function that returns the perimeter of a square given its side length as input.\nfunc square_perimeter(a: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_perimeter(a: 10) == 40)\nassert(square_perimeter(a: 5) == 20)\nassert(square_perimeter(a: 4) == 16)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return 4 * a",
    "    return a * 4",
    "    return 4 * a",
    "    return 4 * a",
    "    return 4 * a",
    "    return 4 * a",
    "    return 4 * a",
    "    return 4 * a",
    "    return a * 4",
    "    return a * 4",
    "    return a * 4",
    "    return 4 * a",
    "    return 4 * a",
    "    return 4 * a",
    "    return a * 4",
    "    return a * 4",
    "    return a * 4",
    "    return a * 4",
    "    return a * 4",
    "    return a * 4"
  ]
}