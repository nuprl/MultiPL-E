{
  "name": "mbpp_572_two_unique_nums",
  "language": "swift",
  "prompt": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var nums = nums\n    var uniqueNums = [Int]()\n    for i in 0..<nums.count {\n        if nums.contains(nums[i]) {\n            uniqueNums.append(nums[i])\n            nums.remove(at: i)\n        }\n    }\n    return uniqueNums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    \n    for (key, value) in dict {\n        if value == 1 {\n            result.append(key)\n        }\n    }\n    \n    return result",
    "    var nums = nums\n    var result = [Int]()\n    for num in nums {\n        if nums.filter({$0 == num}).count == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique = [Int]()\n    for num in nums {\n        if !unique.contains(num) {\n            unique.append(num)\n        }\n    }\n    return unique",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    var nums_count: [Int: Int] = [:]\n    \n    for num in nums {\n        if nums_count[num] == nil {\n            nums_count[num] = 1\n        } else {\n            nums_count[num]! += 1\n        }\n    }\n    \n    for num in nums_count.keys {\n        if nums_count[num] == 1 {\n            unique_nums.append(num)\n        }\n    }\n    \n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums"
  ]
}