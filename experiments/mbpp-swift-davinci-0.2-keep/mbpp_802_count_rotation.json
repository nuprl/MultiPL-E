{
  "name": "mbpp_802_count_rotation",
  "language": "swift",
  "prompt": "\n/// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_rotation(arr: [3, 2, 1]) == 1)\nassert(count_rotation(arr: [4, 5, 1, 2, 3]) == 2)\nassert(count_rotation(arr: [7, 8, 9, 1, 2, 3]) == 3)\nassert(count_rotation(arr: [1, 2, 3]) == 0)\nassert(count_rotation(arr: [1, 3, 2]) == 2)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = (low + high) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = low + (high - low)/2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var count = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count",
    "    var low = 0\n    var high = arr.count - 1\n    while low < high {\n        let mid = low + (high - low) / 2\n        if arr[mid] < arr[high] {\n            high = mid\n        } else if arr[mid] > arr[high] {\n            low = mid + 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = low + (high - low) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid - 1 + arr.count) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low < high {\n        mid = (low + high) / 2\n        if arr[mid] > arr[high] {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    return low",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n        mid = (low + high) / 2\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = low + (high - low) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = low + (high - low) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = low + (high - low)/2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        let mid = low + (high - low) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        let mid = low + (high - low) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var count = 0\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n        i += 1\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count",
    "    var low = 0\n    var high = arr.count - 1\n    while low < high {\n        let mid = low + (high - low) / 2\n        if arr[mid] > arr[high] {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    return low",
    "    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid = (low + high) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1",
    "    var count = 0\n    for i in 0..<arr.count {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count",
    "    var low = 0\n    var high = arr.count - 1\n    while low < high {\n        let mid = (low + high) / 2\n        if arr[mid] > arr[high] {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    return low",
    "    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        let mid = (low + high) / 2\n        let next = (mid + 1) % arr.count\n        let prev = (mid + arr.count - 1) % arr.count\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1"
  ]
}