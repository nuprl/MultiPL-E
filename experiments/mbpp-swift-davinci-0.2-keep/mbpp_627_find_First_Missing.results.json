{
  "name": "mbpp_627_find_First_Missing",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in array {\n        if i == missing {\n            missing += 1\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp9o8dlj86/tmp9o8dlj86.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16d0c23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16d091ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16d091a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16d09197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9o8dlj86                        0x00005571a089462f <unavailable> + 5679\n5    libc.so.6                          0x00002b16d0e0f460 __libc_start_main + 245\n6    tmp9o8dlj86                        0x00005571a08940d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in 0..<array.count {\n        if array[i] == missing {\n            missing += 1\n        } else {\n            return missing\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpdu1c5bv9/tmpdu1c5bv9.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b08000b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07ffdaab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07ffdaa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07ffda97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdu1c5bv9                        0x000055e09ad9d54a <unavailable> + 5450\n5    libc.so.6                          0x00002b080029f460 __libc_start_main + 245\n6    tmpdu1c5bv9                        0x000055e09ad9d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp032f63xs/tmp032f63xs.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b832a1dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8329ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8329ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8329ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp032f63xs                        0x000056231dec43ba <unavailable> + 5050\n5    libc.so.6                          0x00002b832a3c8460 __libc_start_main + 245\n6    tmp032f63xs                        0x000056231dec4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 1\n    for i in 0..<array.count {\n        if array[i] == min {\n            min += 1\n        } else {\n            return min\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpwkr6_k_b/tmpwkr6_k_b.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b58afa7ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b58af771b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b58af771988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58af7707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwkr6_k_b                        0x000055bf86c4a54a <unavailable> + 5450\n5    libc.so.6                          0x00002b58afc66460 __libc_start_main + 245\n6    tmpwkr6_k_b                        0x000055bf86c4a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 0\n    for i in array {\n        if i == min {\n            min += 1\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var index = 0\n    while index < array.count {\n        if array[index] != index + 1 {\n            return index + 1\n        }\n        index += 1\n    }\n    return index + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp6gnvs41l/tmp6gnvs41l.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade749d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade746ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade746ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade746cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6gnvs41l                        0x000055f6394953ba <unavailable> + 5050\n5    libc.so.6                          0x00002ade74bc3460 __libc_start_main + 245\n6    tmp6gnvs41l                        0x000055f639495019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp032f63xs/tmp032f63xs.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b832a1dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8329ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8329ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8329ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp032f63xs                        0x000056231dec43ba <unavailable> + 5050\n5    libc.so.6                          0x00002b832a3c8460 __libc_start_main + 245\n6    tmp032f63xs                        0x000056231dec4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 0\n    for i in 0..<array.count {\n        if array[i] != i {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpgf6ftu03/tmpgf6ftu03.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d6522cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d64f23b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d64f23988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d64f227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgf6ftu03                        0x0000564caf4dc54a <unavailable> + 5450\n5    libc.so.6                          0x00002b2d65418460 __libc_start_main + 245\n6    tmpgf6ftu03                        0x0000564caf4dc1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    array.sort()\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in array {\n        if i == missing {\n            missing += 1\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp9o8dlj86/tmp9o8dlj86.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16d0c23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16d091ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16d091a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16d09197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9o8dlj86                        0x00005571a089462f <unavailable> + 5679\n5    libc.so.6                          0x00002b16d0e0f460 __libc_start_main + 245\n6    tmp9o8dlj86                        0x00005571a08940d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var index = 0\n    while index < array.count {\n        if array[index] != index + 1 {\n            return index + 1\n        }\n        index += 1\n    }\n    return index + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp6gnvs41l/tmp6gnvs41l.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade749d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade746ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade746ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade746cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6gnvs41l                        0x000055f6394953ba <unavailable> + 5050\n5    libc.so.6                          0x00002ade74bc3460 __libc_start_main + 245\n6    tmp6gnvs41l                        0x000055f639495019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 0\n    for i in 0..<array.count {\n        if array[i] != i {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpgf6ftu03/tmpgf6ftu03.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d6522cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d64f23b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d64f23988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d64f227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgf6ftu03                        0x0000564caf4dc54a <unavailable> + 5450\n5    libc.so.6                          0x00002b2d65418460 __libc_start_main + 245\n6    tmpgf6ftu03                        0x0000564caf4dc1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] <= i {\n            i += 1\n        } else if array[i] == i + 1 {\n            i += 1\n        } else if array[array[i] - 1] != array[i] {\n            swap(&array, i, array[i] - 1)\n        } else {\n            i += 1\n        }\n    }\n    i = 0\n    while i < array.count && array[i] == i + 1 {\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "/tmp/tmpoozs8xep.swift:12:38: error: extra argument in call\n            swap(&array, i, array[i] - 1)\n                ~~~~~~~~~~~~~~~~~~~~~^~~~\n/tmp/tmpoozs8xep.swift:12:26: error: cannot convert value of type 'Int' to expected argument type '[Int]'\n            swap(&array, i, array[i] - 1)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 1\n    for i in array {\n        if i == result {\n            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpwd461zds/tmpwd461zds.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b244dec1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b244dbb8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b244dbb8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b244dbb77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwd461zds                        0x000055806ff9362f <unavailable> + 5679\n5    libc.so.6                          0x00002b244e0ad460 __libc_start_main + 245\n6    tmpwd461zds                        0x000055806ff930d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in 0..<array.count {\n        if array[i] == missing {\n            missing += 1\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpz5a91348/tmpz5a91348.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf95f95c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf95c8cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf95c8c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf95c8b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz5a91348                        0x000055a24ca1b6ff <unavailable> + 5887\n5    libc.so.6                          0x00002acf96181460 __libc_start_main + 245\n6    tmpz5a91348                        0x000055a24ca1b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] <= 0 {\n            array.remove(at: i)\n        } else {\n            i += 1\n        }\n    }\n    if array.count == 0 {\n        return 1\n    }\n    for i in 0..<array.count {\n        if abs(array[i]) - 1 < array.count && array[abs(array[i]) - 1] > 0 {\n            array[abs(array[i]) - 1] = -array[abs(array[i]) - 1]\n        }\n    }\n    for i in 0..<array.count {\n        if array[i] > 0 {\n            return i + 1\n        }\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp9uz_yitv/tmp9uz_yitv.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf9cb78c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf9c86fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf9c86f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf9c86e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9uz_yitv                        0x0000559dfb65188f <unavailable> + 6287\n5    libc.so.6                          0x00002aaf9cd64460 __libc_start_main + 245\n6    tmp9uz_yitv                        0x0000559dfb651339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 0\n    var max = array.count - 1\n    while min <= max {\n        let mid = (min + max) / 2\n        if array[mid] == mid {\n            min = mid + 1\n        } else {\n            max = mid - 1\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    var j = 1\n    while i < array.count {\n        if array[i] != j {\n            return j\n        }\n        i += 1\n        j += 1\n    }\n    return j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpx1_7gu60/tmpx1_7gu60.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3283aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3280a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3280a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3280a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx1_7gu60                        0x00005571d54323ba <unavailable> + 5050\n5    libc.so.6                          0x00002ac328596460 __libc_start_main + 245\n6    tmpx1_7gu60                        0x00005571d5432019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 1\n    for i in array {\n        if i == min {\n            min += 1\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpf4qqvfip/tmpf4qqvfip.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af30f0e8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af30eddfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af30eddf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af30edde7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf4qqvfip                        0x000056177a10a62f <unavailable> + 5679\n5    libc.so.6                          0x00002af30f2d4460 __libc_start_main + 245\n6    tmpf4qqvfip                        0x000056177a10a0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp032f63xs/tmp032f63xs.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b832a1dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8329ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8329ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8329ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp032f63xs                        0x000056231dec43ba <unavailable> + 5050\n5    libc.so.6                          0x00002b832a3c8460 __libc_start_main + 245\n6    tmp032f63xs                        0x000056231dec4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] < 0 {\n            array.remove(at: i)\n        } else {\n            i += 1\n        }\n    }\n    if array.count == 0 {\n        return 1\n    }\n    for i in 0..<array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpbvzwskmh/tmpbvzwskmh.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dc2332c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dc2029b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dc2029988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dc20287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbvzwskmh                        0x000056139092c59a <unavailable> + 5530\n5    libc.so.6                          0x00002b9dc251e460 __libc_start_main + 245\n6    tmpbvzwskmh                        0x000056139092c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    var j = 1\n    while i < array.count {\n        if array[i] != j {\n            return j\n        }\n        i += 1\n        j += 1\n    }\n    return j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpx1_7gu60/tmpx1_7gu60.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3283aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3280a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3280a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3280a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx1_7gu60                        0x00005571d54323ba <unavailable> + 5050\n5    libc.so.6                          0x00002ac328596460 __libc_start_main + 245\n6    tmpx1_7gu60                        0x00005571d5432019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            result = i\n            break\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmprdcrui5g/tmprdcrui5g.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b88fbed4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b88fbbcbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b88fbbcb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b88fbbca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprdcrui5g                        0x0000558d3ab793ba <unavailable> + 5050\n5    libc.so.6                          0x00002b88fc0c0460 __libc_start_main + 245\n6    tmprdcrui5g                        0x0000558d3ab79019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 1\n    for i in 0..<array.count {\n        if array[i] == result {\n            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpmgjiyukc/tmpmgjiyukc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8008e57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8008b4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8008b4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8008b4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmgjiyukc                        0x00005643c05426ff <unavailable> + 5887\n5    libc.so.6                          0x00002b8009043460 __libc_start_main + 245\n6    tmpmgjiyukc                        0x00005643c05421a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in 0..<array.count {\n        if array[i] == missing {\n            missing += 1\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpz5a91348/tmpz5a91348.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf95f95c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf95c8cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf95c8c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf95c8b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz5a91348                        0x000055a24ca1b6ff <unavailable> + 5887\n5    libc.so.6                          0x00002acf96181460 __libc_start_main + 245\n6    tmpz5a91348                        0x000055a24ca1b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 0\n    for i in 0..<array.count {\n        if array[i] != i {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpgf6ftu03/tmpgf6ftu03.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d6522cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d64f23b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d64f23988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d64f227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgf6ftu03                        0x0000564caf4dc54a <unavailable> + 5450\n5    libc.so.6                          0x00002b2d65418460 __libc_start_main + 245\n6    tmpgf6ftu03                        0x0000564caf4dc1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 0\n    for i in 0..<array.count {\n        if array[i] != i+1 {\n            missing = i+1\n            break\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpq8f7sek9/tmpq8f7sek9.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b526ccccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b526c9c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b526c9c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b526c9c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq8f7sek9                        0x0000561d9a3b054a <unavailable> + 5450\n5    libc.so.6                          0x00002b526ceb8460 __libc_start_main + 245\n6    tmpq8f7sek9                        0x0000561d9a3b01a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp032f63xs/tmp032f63xs.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b832a1dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8329ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8329ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8329ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp032f63xs                        0x000056231dec43ba <unavailable> + 5050\n5    libc.so.6                          0x00002b832a3c8460 __libc_start_main + 245\n6    tmp032f63xs                        0x000056231dec4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] < 0 {\n            array.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    if array.count == 0 {\n        return 1\n    }\n    var j = 0\n    while j < array.count {\n        if array[j] - 1 < array.count && array[array[j] - 1] > 0 {\n            array[array[j] - 1] = -array[array[j] - 1]\n        }\n        j += 1\n    }\n    var k = 0\n    while k < array.count {\n        if array[k] > 0 {\n            return k + 1\n        }\n        k += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dc51f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dc4ee9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9dc4ee9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9dc4ee913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9dc4ee8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9dc4cebe83 <unavailable> + 188035\n6    tmpjhk9l59x                        0x000055eab00518fe <unavailable> + 6398\n7    tmpjhk9l59x                        0x000055eab00513ec <unavailable> + 5100\n8    libc.so.6                          0x00002b9dc53de460 __libc_start_main + 245\n9    tmpjhk9l59x                        0x000055eab00510c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpfnwzcirc/tmpfnwzcirc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af190177c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af18fe6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af18fe6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af18fe6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfnwzcirc                        0x00005623d53253ba <unavailable> + 5050\n5    libc.so.6                          0x00002af190363460 __libc_start_main + 245\n6    tmpfnwzcirc                        0x00005623d5325019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpnj2gin60/tmpnj2gin60.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b663d14bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b663ce42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b663ce42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b663ce417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnj2gin60                        0x00005575068633ba <unavailable> + 5050\n5    libc.so.6                          0x00002b663d337460 __libc_start_main + 245\n6    tmpnj2gin60                        0x0000557506863019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpcpiybk78/tmpcpiybk78.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2688578c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b268826fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b268826f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b268826e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcpiybk78                        0x00005617bbb0b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b2688764460 __libc_start_main + 245\n6    tmpcpiybk78                        0x00005617bbb0b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp032f63xs/tmp032f63xs.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b832a1dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8329ed3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8329ed3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8329ed27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp032f63xs                        0x000056231dec43ba <unavailable> + 5050\n5    libc.so.6                          0x00002b832a3c8460 __libc_start_main + 245\n6    tmp032f63xs                        0x000056231dec4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpccz7w04f/tmpccz7w04f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9abaac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9a8a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba9a8a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba9a8a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpccz7w04f                        0x0000562e1d8493ba <unavailable> + 5050\n5    libc.so.6                          0x00002aba9ad96460 __libc_start_main + 245\n6    tmpccz7w04f                        0x0000562e1d849019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}