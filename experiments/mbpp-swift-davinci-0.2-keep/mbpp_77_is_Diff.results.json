{
  "name": "mbpp_77_is_Diff",
  "language": "swift",
  "prompt": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num != 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var count = 0\n    var temp = n\n    while temp > 0 {\n        let rem = temp % 10\n        if count % 2 == 0 {\n            even_sum += rem\n        } else {\n            odd_sum += rem\n        }\n        temp /= 10\n        count += 1\n    }\n    return abs(even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        let digit = num % 10\n        if count % 2 == 0 {\n            even_sum += digit\n        } else {\n            odd_sum += digit\n        }\n        count += 1\n        num /= 10\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n != 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpl4q7n6g_.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n != 0 {\n        let digit = n % 10\n        if i % 2 == 0 {\n            sum_even += digit\n        } else {\n            sum_odd += digit\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum_odd - sum_even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp7xn13k13.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var count = 0\n    var temp = n\n    while (temp != 0) {\n        let rem = temp % 10\n        if count % 2 == 0 {\n            evenSum += rem\n        } else {\n            oddSum += rem\n        }\n        count += 1\n        temp /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var temp = n\n    var isOdd = true\n    while temp > 0 {\n        let lastDigit = temp % 10\n        if isOdd {\n            oddSum += lastDigit\n        } else {\n            evenSum += lastDigit\n        }\n        isOdd = !isOdd\n        temp /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpemwbngjn.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum2 += num % 10\n        } else {\n            sum1 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpcbdiau0e.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var n = n\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            evenSum += n % 10\n        } else {\n            oddSum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        let rem = num % 10\n        if count % 2 == 0 {\n            even_sum += rem\n        } else {\n            odd_sum += rem\n        }\n        num /= 10\n        count += 1\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var count = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if count % 2 == 0 {\n            even_sum += digit\n        } else {\n            odd_sum += digit\n        }\n        count += 1\n        num = num / 10\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var num = n\n    while num > 0 {\n        sum_even += num % 10\n        num /= 10\n        sum_odd += num % 10\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return even_sum - odd_sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpanvvpi0a.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            evenSum += n % 10\n        } else {\n            oddSum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return evenSum - oddSum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpn5xu1_sr.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpckra25qn.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var temp = n\n    while temp != 0 {\n        even += temp % 10\n        temp /= 10\n        odd += temp % 10\n        temp /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if digit % 2 == 0 {\n            even += digit\n        } else {\n            odd += digit\n        }\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmpm6x26o43/tmpm6x26o43.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17c9a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17c9741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17c9741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17c97407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm6x26o43                        0x000055df62abb2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b17c9c36460 __libc_start_main + 245\n6    tmpm6x26o43                        0x000055df62abaef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even == sum_odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmprupqni80.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        i += 1\n        temp /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return even_sum - odd_sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpanvvpi0a.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var isOdd = true\n    var n = n\n    while n > 0 {\n        if isOdd {\n            sumOdd += n % 10\n        } else {\n            sumEven += n % 10\n        }\n        isOdd = !isOdd\n        n /= 10\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmp8xmq7uvd.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even = even + num % 10\n        num = num / 10\n        odd = odd + num % 10\n        num = num / 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum1 - sum2 == 11 || sum1 - sum2 == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var s: Int = 0\n    var t: Int = n\n    while t > 0 {\n        s += t % 10\n        t /= 10\n    }\n    if s % 11 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmp9sbetseq/tmp9sbetseq.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b25b7e0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b25b7b05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b25b7b05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25b7b047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sbetseq                        0x000055bdd0ec62b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b25b7ffa460 __libc_start_main + 245\n6    tmp9sbetseq                        0x000055bdd0ec5ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var odd_sum = 0\n    var even_sum = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            even_sum += temp % 10\n        } else {\n            odd_sum += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sumEven += n % 10\n        } else {\n            sumOdd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpn34jinzj.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0 || sum_even - sum_odd == 11 || sum_even - sum_odd == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpftl72ulq.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            even_sum += num % 10\n        } else {\n            odd_sum += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return abs(even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        let rem = num % 10\n        if i % 2 == 0 {\n            even_sum += rem\n        } else {\n            odd_sum += rem\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpfu2aam06.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var n = n\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            evenSum += n % 10\n        } else {\n            oddSum += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpifrk458g.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            even_sum += num % 10\n        } else {\n            odd_sum += num % 10\n        }\n        count += 1\n        num /= 10\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        let rem = num % 10\n        if count % 2 == 0 {\n            evenSum += rem\n        } else {\n            oddSum += rem\n        }\n        num /= 10\n        count += 1\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var odd = 0\n    var even = 0\n    while n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum_odd - sum_even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmphd2fftxs.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1: Int = 0\n    var sum2: Int = 0\n    var num: Int = n\n    var i: Int = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            evenSum += num % 10\n        } else {\n            oddSum += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var s = String(n)\n    var sum1 = 0\n    var sum2 = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if i % 2 == 0 {\n            sum1 += Int(String(s[index]))!\n        } else {\n            sum2 += Int(String(s[index]))!\n        }\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        let rem = n % 10\n        if i % 2 == 0 {\n            evenSum += rem\n        } else {\n            oddSum += rem\n        }\n        i += 1\n        n /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        let rem = temp % 10\n        if i % 2 == 0 {\n            sumEven += rem\n        } else {\n            sumOdd += rem\n        }\n        i += 1\n        temp = temp / 10\n    }\n    if abs(sumEven - sumOdd) % 11 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd == sum_even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n    }\n    temp = n\n    while temp > 0 {\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmpkrslv45g/tmpkrslv45g.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1a923e7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1a920deb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1a920de988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1a920dd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkrslv45g                        0x00005572437a3240 <unavailable> + 4672\n5    libc.so.6                          0x00002b1a925d3460 __libc_start_main + 245\n6    tmpkrslv45g                        0x00005572437a2ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var count = 0\n    while num != 0 {\n        if count % 2 == 0 {\n            sum += num % 10\n        } else {\n            sum -= num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpbko986z9.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpbko986z9.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var odd_sum = 0\n    var even_sum = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            even_sum += temp % 10\n        } else {\n            odd_sum += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(odd_sum - even_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum1 - sum2 == 11 || sum1 - sum2 == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var isNegative = false\n    if num < 0 {\n        isNegative = true\n        num = -num\n    }\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n    }\n    if isNegative {\n        sum = -sum\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmp38t9r6a0/tmp38t9r6a0.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4565859c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4565550b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4565550988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b456554f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp38t9r6a0                        0x000055610067a2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b4565a45460 __libc_start_main + 245\n6    tmp38t9r6a0                        0x0000556100679ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            evenSum += num % 10\n        } else {\n            oddSum += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        let rem = num % 10\n        if rem % 2 == 0 {\n            even += rem\n        } else {\n            odd += rem\n        }\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmp4trf5z36/tmp4trf5z36.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff9b471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff9b168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff9b168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff9b1677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4trf5z36                        0x000055b398efa2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002aff9b65d460 __libc_start_main + 245\n6    tmp4trf5z36                        0x000055b398ef9ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sumEven += n % 10\n        } else {\n            sumOdd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sumEven - sumOdd == 0 || sumEven - sumOdd == 11 || sumEven - sumOdd == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpuhj8r3lv.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var n = n\n    while n > 0 {\n        sum_even += n % 10\n        n /= 10\n        sum_odd += n % 10\n        n /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var n = n\n    var isEven = true\n    while n > 0 {\n        let digit = n % 10\n        if isEven {\n            evenSum += digit\n        } else {\n            oddSum += digit\n        }\n        isEven = !isEven\n        n /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if digit % 2 == 0 {\n            even += digit\n        } else {\n            odd += digit\n        }\n        num /= 10\n    }\n    return abs(even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmpov2dle29/tmpov2dle29.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae140812c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae140509b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae140509988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae1405087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpov2dle29                        0x000055cc4b3a03a4 <unavailable> + 5028\n5    libc.so.6                          0x00002ae1409fe460 __libc_start_main + 245\n6    tmpov2dle29                        0x000055cc4b39ffe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmpecvbjt2f/tmpecvbjt2f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9413d28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9413a1fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9413a1f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9413a1e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpecvbjt2f                        0x000055c2ccfcd2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b9413f14460 __libc_start_main + 245\n6    tmpecvbjt2f                        0x000055c2ccfccef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            even_sum += num % 10\n        } else {\n            odd_sum += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return even_sum - odd_sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var n = n\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            even_sum += num % 10\n        } else {\n            odd_sum += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return even_sum == odd_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var odd = 0\n    var even = 0\n    var num = n\n    while num > 0 {\n        odd += num % 10\n        num /= 10\n        even += num % 10\n        num /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            even_sum += num % 10\n        } else {\n            odd_sum += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return even_sum - odd_sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var odd = 0\n    var even = 0\n    var num = n\n    while num > 0 {\n        odd += num % 10\n        num /= 10\n        even += num % 10\n        num /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var n = n\n    var isEven = true\n    while n > 0 {\n        let digit = n % 10\n        if isEven {\n            evenSum += digit\n        } else {\n            oddSum += digit\n        }\n        isEven = !isEven\n        n /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var evenSum = 0\n    var oddSum = 0\n    var isEven = true\n    while n > 0 {\n        let digit = n % 10\n        if isEven {\n            evenSum += digit\n        } else {\n            oddSum += digit\n        }\n        isEven = !isEven\n        n /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmp8eizttgq.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var n = n\n    while n > 0 {\n        let last_digit = n % 10\n        if last_digit % 2 == 0 {\n            sum_even += last_digit\n        } else {\n            sum_odd += last_digit\n        }\n        n = n / 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmp_9a23eq2/tmp_9a23eq2.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68fe715c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68fe40cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68fe40c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68fe40b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9a23eq2                        0x0000565413d7c2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b68fe901460 __libc_start_main + 245\n6    tmp_9a23eq2                        0x0000565413d7bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var even_sum = 0\n    var odd_sum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return even_sum - odd_sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            evenSum += n % 10\n        } else {\n            oddSum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var temp = n\n    var isEven = true\n    while temp > 0 {\n        let digit = temp % 10\n        if isEven {\n            evenSum += digit\n        } else {\n            oddSum += digit\n        }\n        isEven = !isEven\n        temp /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var odd = 0\n    var even = 0\n    var num = n\n    while num > 0 {\n        odd += num % 10\n        num /= 10\n        even += num % 10\n        num /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp = temp / 10\n        i += 1\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpfzhr95_d.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var temp = n\n    while temp > 0 {\n        even += temp % 10\n        temp /= 10\n        odd += temp % 10\n        temp /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        if digit % 2 == 0 {\n            even += digit\n        } else {\n            odd += digit\n        }\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmp3rks60o3/tmp3rks60o3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f43dacc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f43aa3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f43aa3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f43aa27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3rks60o3                        0x000056107bb0a2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b6f43f98460 __libc_start_main + 245\n6    tmp3rks60o3                        0x000056107bb09ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n != 0 {\n        let rem = n % 10\n        if i % 2 == 0 {\n            sum_even += rem\n        } else {\n            sum_odd += rem\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpmfivfq11.swift:14:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return even - odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            even_sum += num % 10\n        } else {\n            odd_sum += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        let digit = num % 10\n        if count % 2 == 0 {\n            evenSum += digit\n        } else {\n            oddSum += digit\n        }\n        num /= 10\n        count += 1\n    }\n    return evenSum - oddSum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        let digit = num % 10\n        if count % 2 == 0 {\n            even_sum += digit\n        } else {\n            odd_sum += digit\n        }\n        num /= 10\n        count += 1\n    }\n    return abs(even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpcbdiau0e.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n != 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmp840tq0ae.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var odd = 0\n    var even = 0\n    while n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return even - odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var n = n\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return even - odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var even = 0\n    var odd = 0\n    while n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpxqjpi3xp.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        let rem = n % 10\n        if i % 2 == 0 {\n            sum_even += rem\n        } else {\n            sum_odd += rem\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpjsxu__uu.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            evenSum += num % 10\n        } else {\n            oddSum += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var num = n\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        if digit % 2 == 0 {\n            sum_even += digit\n        } else {\n            sum_odd += digit\n        }\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmpb7teheq1/tmpb7teheq1.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac3259ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac32295b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac32295988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac322947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb7teheq1                        0x000055bbd09c72b4 <unavailable> + 4788\n5    libc.so.6                          0x00002aac3278a460 __libc_start_main + 245\n6    tmpb7teheq1                        0x000055bbd09c6ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var count = 0\n    var temp = n\n    while temp > 0 {\n        if count % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp /= 10\n        count += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var odd_sum = 0\n    var even_sum = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (odd_sum - even_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var n = n\n    while n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var flag = true\n    while num > 0 {\n        if flag {\n            sum += num % 10\n            flag = false\n        } else {\n            sum -= num % 10\n            flag = true\n        }\n        num /= 10\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpbko986z9.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        let digit = num % 10\n        if i % 2 == 0 {\n            sum_even += digit\n        } else {\n            sum_odd += digit\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmp8xmq7uvd.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n != 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpm9p87jy5.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var flag = 1\n    while num > 0 {\n        sum += flag * (num % 10)\n        flag *= -1\n        num /= 10\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var diff = 0\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmpp8ad5n0v/tmpp8ad5n0v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81d639bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81d6092b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81d6092988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81d60917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp8ad5n0v                        0x00005617eb7672b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b81d6587460 __libc_start_main + 245\n6    tmpp8ad5n0v                        0x00005617eb766ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    var i = 0\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var odd = 0\n    var even = 0\n    while n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return even_sum - odd_sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpzq6o9h2g.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            evenSum += n % 10\n        } else {\n            oddSum += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmp2eq1oeos.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return even - odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var isNegative = false\n    if n < 0 {\n        isNegative = true\n        num = -n\n    }\n    while num > 0 {\n        sum += num % 10\n        num = num / 10\n    }\n    if isNegative {\n        sum = -sum\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "tmpdi0zgrrx/tmpdi0zgrrx.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b61626c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b6131db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b6131d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b6131c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdi0zgrrx                        0x00005652f090f2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b5b61812460 __libc_start_main + 245\n6    tmpdi0zgrrx                        0x00005652f090eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even_sum = 0\n    var odd_sum = 0\n    var n = n\n    var count = 0\n    while n > 0 {\n        if count % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n        count += 1\n    }\n    return abs(even_sum - odd_sum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmppz93n0ud.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var j = 1\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    while num > 0 {\n        even += num % 10\n        num /= 10\n        odd += num % 10\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var n = n\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return abs(sum_odd - sum_even) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var alt = true\n    while num > 0 {\n        if alt {\n            sum += num % 10\n        } else {\n            sum -= num % 10\n        }\n        num /= 10\n        alt = !alt\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var temp = n\n    while temp > 0 {\n        even += temp % 10\n        temp /= 10\n        odd += temp % 10\n        temp /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var n = n\n    while n != 0 {\n        let r = n % 10\n        if i % 2 == 0 {\n            sum_even += r\n        } else {\n            sum_odd += r\n        }\n        i += 1\n        n = n / 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmprupqni80.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpbko986z9.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmp0orcmzq1.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpfu2aam06.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum_even - sum_odd % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var num = n\n    var rem = 0\n    var i = 1\n    while num != 0 {\n        rem = num % 10\n        if i % 2 == 0 {\n            sum_even += rem\n        } else {\n            sum_odd += rem\n        }\n        i += 1\n        num = num / 10\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}