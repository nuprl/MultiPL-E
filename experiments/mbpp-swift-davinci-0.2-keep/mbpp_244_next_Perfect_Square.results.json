{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var n = N\n    while n * n < N {\n        n += 1\n    }\n    return n * n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmp76ryg3xl/tmp76ryg3xl.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b82d9f8dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b82d9c84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b82d9c84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b82d9c837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ryg3xl                        0x000056483a47d1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b82da179460 __libc_start_main + 245\n6    tmp76ryg3xl                        0x000056483a47ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_Perfect_Square = 0\n    var i = 1\n    while i < N {\n        i += 1\n        if i * i > N {\n            next_Perfect_Square = i * i\n            break\n        }\n    }\n    return next_Perfect_Square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_Perfect_Square = N\n    while true {\n        next_Perfect_Square += 1\n        if next_Perfect_Square.squareRoot().rounded() == next_Perfect_Square.squareRoot() {\n            return next_Perfect_Square\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "/tmp/tmplun_to6z.swift:7:32: error: value of type 'Int' has no member 'squareRoot'\n        if next_Perfect_Square.squareRoot().rounded() == next_Perfect_Square.squareRoot() {\n           ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmplun_to6z.swift:7:78: error: value of type 'Int' has no member 'squareRoot'\n        if next_Perfect_Square.squareRoot().rounded() == next_Perfect_Square.squareRoot() {\n                                                         ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_perfect_square = 0\n    var i = 1\n    while i <= N {\n        if i * i == N {\n            next_perfect_square = (i + 1) * (i + 1)\n            break\n        }\n        i += 1\n    }\n    return next_perfect_square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmph9405d9m/tmph9405d9m.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6e84fe1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6e84cd8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6e84cd8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6e84cd77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph9405d9m                        0x00005624a88a61b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6e851cd460 __libc_start_main + 245\n6    tmph9405d9m                        0x00005624a88a5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var num = N\n    while true {\n        if num % 2 == 0 {\n            num += 1\n        }\n        else {\n            num += 2\n        }\n        if is_Perfect_Square(num) {\n            return num\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmppssqo_m7.swift:12:12: error: cannot find 'is_Perfect_Square' in scope\n        if is_Perfect_Square(num) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var n = N\n    while n % 2 == 0 {\n        n /= 2\n    }\n    while n % 3 == 0 {\n        n /= 3\n    }\n    while n % 5 == 0 {\n        n /= 5\n    }\n    if n == 1 {\n        return N\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmp_ya2q0gm/tmp_ya2q0gm.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a0dd3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a0da32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a0da32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a0da317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_ya2q0gm                        0x0000559cdce3e245 <unavailable> + 4677\n5    libc.so.6                          0x00002b2a0df27460 __libc_start_main + 245\n6    tmp_ya2q0gm                        0x0000559cdce3def9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i) < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmppnb6upws/tmppnb6upws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac54d2cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac54cfc5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac54cfc5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac54cfc47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppnb6upws                        0x000055c1cf1b02b3 <unavailable> + 4787\n5    libc.so.6                          0x00002ac54d4ba460 __libc_start_main + 245\n6    tmppnb6upws                        0x000055c1cf1afe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_Perfect_Square = N\n    while !isPerfectSquare(N: next_Perfect_Square) {\n        next_Perfect_Square += 1\n    }\n    return next_Perfect_Square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp364ebll5.swift:5:12: error: cannot find 'isPerfectSquare' in scope\n    while !isPerfectSquare(N: next_Perfect_Square) {\n           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var num = N\n    while true {\n        let sqrt = Int(sqrt(Double(num)))\n        if sqrt * sqrt == num {\n            return num\n        }\n        num += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmpageophb3.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(num)))\n                       ^\n/tmp/tmpageophb3.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(num)))\n            ^\n/tmp/tmpageophb3.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == num {\n           ~~~~~~~~~~~ ^  ~~~\n/tmp/tmpageophb3.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == num {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmpgu18t_a3/tmpgu18t_a3.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8b598bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8b5682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8b5682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8b56817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgu18t_a3                        0x000055736493e1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ba8b5b77460 __libc_start_main + 245\n6    tmpgu18t_a3                        0x000055736493de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var num = N\n    while true {\n        if num < 0 {\n            return -1\n        }\n        if num == 0 {\n            return 1\n        }\n        let sqrt = Int(sqrt(Double(num)))\n        if sqrt * sqrt == num {\n            return (sqrt + 1) * (sqrt + 1)\n        }\n        num += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmplhg2lr91.swift:12:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(num)))\n                       ^\n/tmp/tmplhg2lr91.swift:12:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(num)))\n            ^\n/tmp/tmplhg2lr91.swift:13:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == num {\n           ~~~~~~~~~~~ ^  ~~~\n/tmp/tmplhg2lr91.swift:13:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == num {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        let square = i * i\n        if square > N {\n            return square\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmpgu18t_a3/tmpgu18t_a3.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8b598bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8b5682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8b5682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8b56817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgu18t_a3                        0x000055736493e1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ba8b5b77460 __libc_start_main + 245\n6    tmpgu18t_a3                        0x000055736493de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var n = N\n    while n % 2 == 0 {\n        n /= 2\n    }\n    while n % 3 == 0 {\n        n /= 3\n    }\n    while n % 5 == 0 {\n        n /= 5\n    }\n    if n == 1 {\n        return N\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmp_ya2q0gm/tmp_ya2q0gm.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a0dd3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a0da32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a0da32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a0da317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_ya2q0gm                        0x0000559cdce3e245 <unavailable> + 4677\n5    libc.so.6                          0x00002b2a0df27460 __libc_start_main + 245\n6    tmp_ya2q0gm                        0x0000559cdce3def9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmpgu18t_a3/tmpgu18t_a3.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8b598bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8b5682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8b5682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8b56817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgu18t_a3                        0x000055736493e1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ba8b5b77460 __libc_start_main + 245\n6    tmpgu18t_a3                        0x000055736493de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        let square = i * i\n        if square > N {\n            return square\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmpgu18t_a3/tmpgu18t_a3.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8b598bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8b5682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8b5682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8b56817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgu18t_a3                        0x000055736493e1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ba8b5b77460 __libc_start_main + 245\n6    tmpgu18t_a3                        0x000055736493de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        let square = i * i\n        if square > N {\n            return square\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var num = N\n    var i = 1\n    while i*i <= num {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_square = 1\n    while next_square < N {\n        next_square += 1\n    }\n    return next_square * next_square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmpodfy4n3c/tmpodfy4n3c.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acd864b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acd861acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acd861ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acd861ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpodfy4n3c                        0x0000557d783e11b5 <unavailable> + 4533\n5    libc.so.6                          0x00002acd866a1460 __libc_start_main + 245\n6    tmpodfy4n3c                        0x0000557d783e0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var n = N\n    while n % 2 == 0 {\n        n /= 2\n    }\n    while n % 3 == 0 {\n        n /= 3\n    }\n    while n % 5 == 0 {\n        n /= 5\n    }\n    if n == 1 {\n        return N\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmplhozr5ob/tmplhozr5ob.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba18928bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba188f82b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba188f82988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba188f817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplhozr5ob                        0x000055e81babd245 <unavailable> + 4677\n5    libc.so.6                          0x00002ba189477460 __libc_start_main + 245\n6    tmplhozr5ob                        0x000055e81babcef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_Perfect_Square = 0\n    var i = 1\n    while i < N {\n        i += 1\n        if i * i > N {\n            next_Perfect_Square = i * i\n            break\n        }\n    }\n    return next_Perfect_Square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_Perfect_Square = N\n    while true {\n        let sqrt_next_Perfect_Square = sqrt(Double(next_Perfect_Square))\n        if sqrt_next_Perfect_Square.truncatingRemainder(dividingBy: 1) == 0 {\n            return next_Perfect_Square\n        }\n        next_Perfect_Square += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp_ankifr_.swift:6:40: error: cannot find 'sqrt' in scope\n        let sqrt_next_Perfect_Square = sqrt(Double(next_Perfect_Square))\n                                       ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var num = N\n    while true {\n        if isPerfectSquare(num) {\n            return num\n        }\n        num += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "/tmp/tmp0u0866y7.swift:6:12: error: cannot find 'isPerfectSquare' in scope\n        if isPerfectSquare(num) {\n           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    var square = 1\n    while square <= N {\n        square = i * i\n        i += 1\n    }\n    return square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var next_Perfect_Square = N\n    while true {\n        let sqrt_N = Int(sqrt(Double(next_Perfect_Square)))\n        if sqrt_N * sqrt_N == next_Perfect_Square {\n            return next_Perfect_Square\n        }\n        next_Perfect_Square += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "/tmp/tmpjtdw__i5.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_N = Int(sqrt(Double(next_Perfect_Square)))\n                         ^~~~\n/tmp/tmpjtdw__i5.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_N * sqrt_N == next_Perfect_Square {\n           ~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjtdw__i5.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_N * sqrt_N == next_Perfect_Square {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpkkeqa9b7/tmpkkeqa9b7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871db0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d805b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d805988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d8047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkkeqa9b7                        0x0000560f4f5182b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b871dcfa460 __libc_start_main + 245\n6    tmpkkeqa9b7                        0x0000560f4f517e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "tmpbf3as384/tmpbf3as384.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2254cbec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22549b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22549b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22549b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbf3as384                        0x000055ead50812b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b2254eaa460 __libc_start_main + 245\n6    tmpbf3as384                        0x000055ead5080e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "tmpgu18t_a3/tmpgu18t_a3.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8b598bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8b5682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8b5682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8b56817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgu18t_a3                        0x000055736493e1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ba8b5b77460 __libc_start_main + 245\n6    tmpgu18t_a3                        0x000055736493de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}