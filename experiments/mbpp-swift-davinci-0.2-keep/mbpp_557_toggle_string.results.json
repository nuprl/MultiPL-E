{
  "name": "mbpp_557_toggle_string",
  "language": "swift",
  "prompt": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpz0_52ufc.swift:6:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz0_52ufc.swift:4:9: warning: variable 'string' was never mutated; consider changing to 'let' constant\n    var string = string\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_lbxaid4.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle_char: (Character) -> Character = { char in\n        if char.isUppercase {\n            return char.lowercased().first!\n        } else {\n            return char.uppercased().first!\n        }\n    }\n    return String(string.map(toggle_char))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "/tmp/tmpt7r3n6fo.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpt7r3n6fo.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpt7r3n6fo.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string += char.lowercased()\n        } else {\n            new_string += char.uppercased()\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercaseString)\n        } else {\n            newString.append(char.uppercaseString)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpnw8ajdto.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnw8ajdto.swift:7:35: error: value of type 'Character' has no member 'lowercaseString'\n            newString.append(char.lowercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnw8ajdto.swift:9:35: error: value of type 'Character' has no member 'uppercaseString'\n            newString.append(char.uppercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggledString.append(char.lowercased())\n        } else {\n            toggledString.append(char.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpqz92w8ru.swift:4:19: error: 'characters' is unavailable: Please use String directly\n    return string.characters.map {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "/tmp/tmpt7r3n6fo.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpt7r3n6fo.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpt7r3n6fo.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpceasc86g.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    for i in 0..<string.count {\n        let index = string.index(string.startIndex, offsetBy: i)\n        let character = string[index]\n        if character.isUppercase {\n            string.replaceSubrange(index...index, with: String(character).lowercased())\n        } else {\n            string.replaceSubrange(index...index, with: String(character).uppercased())\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "/tmp/tmpt7r3n6fo.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpt7r3n6fo.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpt7r3n6fo.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isLowercase {\n            newString.append(char.uppercaseString)\n        } else if char.isUppercase {\n            newString.append(char.lowercaseString)\n        } else {\n            newString.append(char)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpyogz5sin.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyogz5sin.swift:7:35: error: value of type 'Character' has no member 'uppercaseString'\n            newString.append(char.uppercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpyogz5sin.swift:9:35: error: value of type 'Character' has no member 'lowercaseString'\n            newString.append(char.lowercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for character in string {\n        if character.isUppercase {\n            newString.append(character.lowercased())\n        } else {\n            newString.append(character.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggledString.append(char.lowercased())\n        } else {\n            toggledString.append(char.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw4anr8_.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map {\n           ~~~~~~~^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    for i in 0..<string.count {\n        let index = string.index(string.startIndex, offsetBy: i)\n        let char = string[index]\n        if char.isUppercase {\n            string.replaceSubrange(index...index, with: char.lowercased())\n        } else {\n            string.replaceSubrange(index...index, with: char.uppercased())\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle_char: (Character) -> Character = { char in\n        if char.isUppercase {\n            return char.lowercased().first!\n        } else {\n            return char.uppercased().first!\n        }\n    }\n    return String(string.map(toggle_char))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw4anr8_.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map {\n           ~~~~~~~^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle_char: (Character) -> Character = {\n        switch $0 {\n        case \"a\"...\"z\":\n            return Character(String($0).uppercased())\n        case \"A\"...\"Z\":\n            return Character(String($0).lowercased())\n        default:\n            return $0\n        }\n    }\n    return String(string.characters.map(toggle_char))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpn0zaqfxx.swift:14:26: error: 'characters' is unavailable: Please use String directly\n    return String(string.characters.map(toggle_char))\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_lbxaid4.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpceasc86g.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle_char: (Character) -> Character = {\n        switch $0 {\n        case \"a\"...\"z\":\n            return Character(String($0).uppercased())\n        case \"A\"...\"Z\":\n            return Character(String($0).lowercased())\n        default:\n            return $0\n        }\n    }\n    return String(string.map(toggle_char))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string += String(char).lowercased()\n        } else {\n            new_string += String(char).uppercased()\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string += char.lowercased()\n        } else {\n            new_string += char.uppercased()\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggled_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggled_string.append(char.lowercased())\n        } else {\n            toggled_string.append(char.uppercased())\n        }\n    }\n    return toggled_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else if char.isLowercase {\n            result += String(char).uppercased()\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpqz92w8ru.swift:4:19: error: 'characters' is unavailable: Please use String directly\n    return string.characters.map {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle = string.map { (char) -> Character in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n    return String(toggle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmplvykjaua.swift:6:25: error: cannot convert return expression of type 'String' to return type 'Character'\n            return char.lowercased()\n                   ~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpceasc86g.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "/tmp/tmpt7r3n6fo.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpt7r3n6fo.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpt7r3n6fo.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509731,
      "stdout": "",
      "stderr": "/tmp/tmpt7r3n6fo.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpt7r3n6fo.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpt7r3n6fo.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var temp = \"\"\n    for char in string {\n        if char.isUppercase {\n            temp.append(char.lowercased())\n        } else {\n            temp.append(char.uppercased())\n        }\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isLowercase {\n            newString.append(char.uppercaseString)\n        } else {\n            newString.append(char.lowercaseString)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpn7f5_ut1.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpn7f5_ut1.swift:7:35: error: value of type 'Character' has no member 'uppercaseString'\n            newString.append(char.uppercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpn7f5_ut1.swift:9:35: error: value of type 'Character' has no member 'lowercaseString'\n            newString.append(char.lowercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map { (char: Character) -> Character in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmp2i8j1e06.swift:4:19: error: no 'map' candidates produce the expected contextual result type 'String'\n    return string.map { (char: Character) -> Character in\n                  ^\nSwift.Collection:2:28: note: 'map' produces '[Character]', not the expected contextual result type 'String'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\nSwift.Sequence:2:28: note: 'map' produces '[Character]', not the expected contextual result type 'String'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercaseString\n        } else {\n            return $0.uppercaseString\n        }\n    }.reduce(\"\") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmp8xaasfls.swift:6:23: error: value of type 'String.Element' (aka 'Character') has no member 'lowercaseString'\n            return $0.lowercaseString\n                   ~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercaseString\n        } else {\n            return $0.uppercaseString\n        }\n    }.reduce(\"\", combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmp9crzf72o.swift:10:13: error: extraneous argument label 'combine:' in call\n    }.reduce(\"\", combine: +)\n            ^    ~~~~~~~~~\n                 \n/tmp/tmp9crzf72o.swift:6:23: error: value of type 'String.Element' (aka 'Character') has no member 'lowercaseString'\n            return $0.lowercaseString\n                   ~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle = string.map { (char) -> Character in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n    return String(toggle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmplvykjaua.swift:6:25: error: cannot convert return expression of type 'String' to return type 'Character'\n            return char.lowercased()\n                   ~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw4anr8_.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map {\n           ~~~~~~~^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else if char.isLowercase {\n            newString.append(char.uppercased())\n        } else {\n            newString.append(char)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        let lower = char.lowercased()\n        if lower == char {\n            result += char.uppercased()\n        } else {\n            result += lower\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpsjfvkq2_.swift:7:18: error: binary operator '==' cannot be applied to operands of type 'String' and 'Character'\n        if lower == char {\n           ~~~~~ ^  ~~~~\n/tmp/tmpsjfvkq2_.swift:7:18: note: overloads for '==' exist with these partially matching parameter lists: (Character, Character), (String, String)\n        if lower == char {\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for character in string {\n        if character.isUppercase {\n            newString.append(character.lowercased())\n        } else {\n            newString.append(character.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isLowercase {\n            result.append(char.uppercased())\n        } else {\n            result.append(char.lowercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggled_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggled_string += char.lowercased()\n        } else {\n            toggled_string += char.uppercased()\n        }\n    }\n    return toggled_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggledString.append(char.lowercased())\n        } else {\n            toggledString.append(char.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle_char: (Character) -> Character = {\n        switch $0 {\n        case \"a\"...\"z\":\n            return Character(String($0).uppercased())\n        case \"A\"...\"Z\":\n            return Character(String($0).lowercased())\n        default:\n            return $0\n        }\n    }\n    return String(string.characters.map(toggle_char))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "/tmp/tmpn0zaqfxx.swift:14:26: error: 'characters' is unavailable: Please use String directly\n    return String(string.characters.map(toggle_char))\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw4anr8_.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map {\n           ~~~~~~~^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpf1n0njrw.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isLowercase {\n            result.append(char.uppercased())\n        } else {\n            result.append(char.lowercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggledString.append(char.lowercased())\n        } else {\n            toggledString.append(char.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for character in string {\n        if character.isLetter {\n            if character.isUppercase {\n                result.append(character.lowercased())\n            } else {\n                result.append(character.uppercased())\n            }\n        } else {\n            result.append(character)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123857,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}