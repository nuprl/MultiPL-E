{
  "name": "mbpp_626_triangle_area",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunc triangle_area(r: Int) -> Int? {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(r: -1) == nil)\nassert(triangle_area(r: 0) == 0)\nassert(triangle_area(r: 2) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let s = r * 2\n    let a = s * s\n    let b = sqrt(Double(a))\n    let c = b / 2\n    let d = c * c\n    let e = sqrt(d)\n    let f = e * 2\n    let g = f * r\n    let h = g / 2\n    return Int(h)",
    "    let s = r * 2\n    let a = s * s\n    let b = Int(sqrt(Double(a - r * r)))\n    return b * r / 2",
    "    let area = (3.0 * sqrt(3.0) * pow(Double(r), 2.0)) / 4.0\n    return Int(area)",
    "    guard r > 0 else {\n        return nil\n    }\n    return Int(Double(r) * Double(r) * sqrt(3) / 4)",
    "    guard r > 0 else { return nil }\n    return Int(Double(r) * Double(r) * sqrt(3.0) / 4.0)",
    "    let s = r * 2\n    let a = s * s\n    let b = (s / 2) * (s / 2)\n    let c = a - b\n    let d = sqrt(Double(c))\n    let e = Int(d)\n    let f = e * e\n    let g = e * e * e\n    let h = g / 4\n    let i = Int(h)\n    return i",
    "    let s = r * 2\n    let a = s * s\n    let b = s * s\n    let c = s * s\n    let p = (a + b + c) / 2\n    let area = sqrt(p * (p - a) * (p - b) * (p - c))\n    return Int(area)",
    "    return nil",
    "    if r <= 0 {\n        return nil\n    }\n    return Int(Double(r) * Double(r) * Double.pi / 4.0)",
    "    let s = r * 2\n    let a = Int(sqrt(Double(s * (s - r) * (s - r) * (s - r))))\n    return a",
    "    let s = r * 2\n    let a = s * s\n    let b = a / 2\n    let c = sqrt(Double(b))\n    let d = Int(c)\n    return d",
    "    let area = (r * r * sqrt(3)) / 4\n    return Int(area)",
    "    let s = r * 2\n    let a = s * s\n    let b = Int(Double(a).squareRoot())\n    let c = b * b\n    let d = a - c\n    let e = Int(Double(d).squareRoot())\n    let f = e * e\n    let g = c + f\n    let h = Int(Double(g).squareRoot())\n    let i = h * h\n    let j = c + i\n    let k = Int(Double(j).squareRoot())\n    let l = k * k\n    let m = c + l\n    let n = Int(Double(m).squareRoot())\n    let o = n * n\n    let p = c + o\n    let q = Int(Double(p).squareRoot())\n    let s1 = q * q\n    let t = c + s1\n    let u = Int(Double(t).squareRoot())\n    let v = u * u\n    let w = c + v\n    let x = Int(Double(w).squareRoot())\n    let y = x * x\n    let z = c + y\n    let a1 = Int(Double(z).squareRoot())\n    let b1 = a1 * a1\n    let c1 = c + b1\n    let d1 = Int(Double(c1).squareRoot())\n    let e1 = d1 * d1\n    let f1 = c + e1\n    let g1 = Int(Double(f1).squareRoot())\n    let h1 = g1 * g1\n    let i1 = c + h1\n    let j1 = Int(Double(i1).squareRoot())\n    let k1 = j1 * j1\n    let l1 = c + k1\n    let m1 = Int(Double(l1).squareRoot())\n    let n1 = m1 * m1\n    let o1 = c + n1\n    let p1 = Int(Double(o1).squareRoot())\n    let q1 = p1 * p1\n    let r1 = c + q1\n    let s2 = Int(Double(r1).squareRoot())\n    let t1 = s2 * s2\n    let u1 =",
    "    let s = r * 2\n    let a = s * s\n    let b = a / 2\n    let c = sqrt(Double(b))\n    let d = Int(c)\n    let e = d * d\n    let f = e / 2\n    let g = Int(f)\n    return g",
    "    if r < 0 {\n        return nil\n    }\n    return Int(Double(r) * Double(r) * sqrt(3.0) / 4.0)",
    "    let s = r * 2\n    let a = s * s\n    let b = sqrt(Double(a))\n    let c = Int(b)\n    let d = c / 2\n    let e = d * d\n    let f = sqrt(Double(e))\n    let g = Int(f)\n    let h = g * 2\n    let i = h * r\n    let j = i / 2\n    return j",
    "    let s = r * 2\n    let a = s * s\n    let b = sqrt(Double(a))\n    let c = b / 2\n    let d = c * c\n    let e = a - d\n    let f = sqrt(e)\n    let g = f / 2\n    let h = g * c\n    return Int(h)",
    "    let s = r * 2\n    let area = Int(Double(s * s) * sqrt(3.0) / 4.0)\n    return area",
    "    let s = r * 2\n    let a = s * s\n    let b = a / 2\n    let c = sqrt(Double(b))\n    let d = Int(c)\n    return d",
    "    let s = r * 2\n    let a = s * s\n    let b = a / 2\n    let c = sqrt(Double(b))\n    let d = Int(c)\n    let e = d * d\n    let f = e / 2\n    let g = Int(f)\n    return g"
  ]
}