{
  "name": "mbpp_589_perfect_squares",
  "language": "swift",
  "prompt": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var squares: [Int] = []\n    for i in a...b {\n        if i == i * i {\n            squares.append(i)\n        }\n    }\n    return squares",
    "    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var squares = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares",
    "    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares",
    "    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares",
    "    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares",
    "    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = sqrt(Double(i))\n        if sqrt_i == floor(sqrt_i) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares"
  ]
}