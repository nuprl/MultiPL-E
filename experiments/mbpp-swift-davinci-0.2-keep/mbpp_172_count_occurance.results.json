{
  "name": "mbpp_172_count_occurance",
  "language": "swift",
  "prompt": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s.substring(from: i, to: i + 3) == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpbn3d6vuh.swift:6:14: error: value of type 'String' has no member 'substring'\n        if s.substring(from: i, to: i + 3) == \"std\" {\n           ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adcd1ca1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adcd1998561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adcd1998286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adcd199813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adcd1997bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002adcd1acbb0d <unavailable> + 2693901\n6    tmpxzzd0hd0                        0x0000564afea92b94 <unavailable> + 7060\n7    tmpxzzd0hd0                        0x0000564afea92626 <unavailable> + 5670\n8    libc.so.6                          0x00002adcd1e8d460 __libc_start_main + 245\n9    tmpxzzd0hd0                        0x0000564afea92329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1385279c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1384f70561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1384f70286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1384f7013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1384f6fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b13850a3b0d <unavailable> + 2693901\n6    tmpl9nn_1de                        0x000055f76d201ba4 <unavailable> + 7076\n7    tmpl9nn_1de                        0x000055f76d201626 <unavailable> + 5670\n8    libc.so.6                          0x00002b1385465460 __libc_start_main + 245\n9    tmpl9nn_1de                        0x000055f76d201329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmptsh1exhm.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var startIndex = s.startIndex\n    while startIndex < s.endIndex {\n        if s[startIndex] == \"s\" {\n            if s[startIndex.advancedBy(1)] == \"t\" {\n                if s[startIndex.advancedBy(2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        startIndex = startIndex.advancedBy(1)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpblyh202x.swift:8:29: error: value of type 'String.Index' has no member 'advancedBy'\n            if s[startIndex.advancedBy(1)] == \"t\" {\n                 ~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpblyh202x.swift:9:33: error: value of type 'String.Index' has no member 'advancedBy'\n                if s[startIndex.advancedBy(2)] == \"d\" {\n                     ~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpblyh202x.swift:14:33: error: value of type 'String.Index' has no member 'advancedBy'\n        startIndex = startIndex.advancedBy(1)\n                     ~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index1 = s.index(s.startIndex, offsetBy: i+1)\n            let index2 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index1] == \"t\" && s[index2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5fa9609c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5fa9300561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5fa9300286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5fa930013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5fa92ffbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b5fa9433b0d <unavailable> + 2693901\n6    tmp_1ucj8qw                        0x000056490465cc3b <unavailable> + 7227\n7    tmp_1ucj8qw                        0x000056490465c7cb <unavailable> + 6091\n8    libc.so.6                          0x00002b5fa97f5460 __libc_start_main + 245\n9    tmp_1ucj8qw                        0x000056490465c2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            if i + 2 < s.count {\n                let index2 = s.index(s.startIndex, offsetBy: i + 1)\n                let index3 = s.index(s.startIndex, offsetBy: i + 2)\n                if s[index2] == \"t\" && s[index3] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp2g307pn_.swift:5:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let pattern = \"std\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: s, options: [], range: NSRange(location: 0, length: s.utf16.count))\n    return matches.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmp8xx3myjz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp8xx3myjz.swift:6:60: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: s, options: [], range: NSRange(location: 0, length: s.utf16.count))\n                                                           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpenrhuarx.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpenrhuarx.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpenrhuarx.swift:6:46: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                                             ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var startIndex = s.startIndex\n    while startIndex < s.endIndex {\n        if let range = s.rangeOfString(\"std\", range: startIndex..<s.endIndex) {\n            count++\n            startIndex = range.endIndex\n        } else {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmppobacpqe.swift:7:26: error: value of type 'String' has no member 'rangeOfString'\n        if let range = s.rangeOfString(\"std\", range: startIndex..<s.endIndex) {\n                       ~ ^~~~~~~~~~~~~\n/tmp/tmppobacpqe.swift:8:18: error: cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n                 ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if i + 3 <= s.count {\n            if s[i..<i+3] == \"std\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpcicfwhva.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.\n            if s[i..<i+3] == \"std\" {\n               ^~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2bde015c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2bddd0c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2bddd0c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2bddd0c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2bddd0bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2bdde3fb0d <unavailable> + 2693901\n6    tmps6sx2oyh                        0x0000564aa0e719ca <unavailable> + 6602\n7    tmps6sx2oyh                        0x0000564aa0e71536 <unavailable> + 5430\n8    libc.so.6                          0x00002b2bde201460 __libc_start_main + 245\n9    tmps6sx2oyh                        0x0000564aa0e71239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if i+2 < s.count {\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpb236t5t1.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmptsh1exhm.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index1 = s.index(s.startIndex, offsetBy: i+1)\n            let index2 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index1] == \"t\" && s[index2] == \"d\" {\n                count += 1\n                i += 2\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad79f226c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad79ef1d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad79ef1d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad79ef1d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad79ef1cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ad79f050b0d <unavailable> + 2693901\n6    tmpiap9jf6w                        0x000055691321896e <unavailable> + 6510\n7    tmpiap9jf6w                        0x000055691321863b <unavailable> + 5691\n8    libc.so.6                          0x00002ad79f412460 __libc_start_main + 245\n9    tmpiap9jf6w                        0x0000556913218149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.characters.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpzmbwef7e.swift:6:17: error: 'characters' is unavailable: Please use String directly\n    while i < s.characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzmbwef7e.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzmbwef7e.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzmbwef7e.swift:8:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let pattern = \"std\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: s, options: [], range: NSRange(location: 0, length: s.utf16.count))\n    return matches.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmp8xx3myjz.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp8xx3myjz.swift:6:60: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: s, options: [], range: NSRange(location: 0, length: s.utf16.count))\n                                                           ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count - 2 {\n        if s[s.index(s.startIndex, offsetBy: i)] == \"s\" && s[s.index(s.startIndex, offsetBy: i + 1)] == \"t\" && s[s.index(s.startIndex, offsetBy: i + 2)] == \"d\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0edaff0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0edace7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0edace7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0edace713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0edace6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b0edae1ab0d <unavailable> + 2693901\n6    tmpscd7vt50                        0x000055f2e307dba4 <unavailable> + 7076\n7    tmpscd7vt50                        0x000055f2e307d626 <unavailable> + 5670\n8    libc.so.6                          0x00002b0edb1dc460 __libc_start_main + 245\n9    tmpscd7vt50                        0x000055f2e307d329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let words = s.components(separatedBy: \" \")\n    for word in words {\n        if word == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp4gm46im6.swift:5:19: error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy: \" \")\n                ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmptsh1exhm.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index1 = s.index(s.startIndex, offsetBy: i+1)\n            let index2 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index1] == \"t\" && s[index2] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff11613c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff1130a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aff1130a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aff1130a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aff11309bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002aff1143db0d <unavailable> + 2693901\n6    tmp17iv2zi6                        0x0000563419a5a96e <unavailable> + 6510\n7    tmp17iv2zi6                        0x0000563419a5a63b <unavailable> + 5691\n8    libc.so.6                          0x00002aff117ff460 __libc_start_main + 245\n9    tmp17iv2zi6                        0x0000563419a5a149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let str = s.lowercased()\n    for i in 0..<str.count {\n        if str[i] == \"s\" {\n            if str[i+1] == \"t\" && str[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmp2p59f0ap.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] == \"s\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2p59f0ap.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str[i+1] == \"t\" && str[i+2] == \"d\" {\n               ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2p59f0ap.swift:8:35: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str[i+1] == \"t\" && str[i+2] == \"d\" {\n                                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.characters.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index2 = s.index(s.startIndex, offsetBy: i+1)\n            let index3 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index2] == \"t\" && s[index3] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpmi_404xb.swift:6:17: error: 'characters' is unavailable: Please use String directly\n    while i < s.characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count - 2 {\n        if s[s.index(s.startIndex, offsetBy: i)] == \"s\" && s[s.index(s.startIndex, offsetBy: i + 1)] == \"t\" && s[s.index(s.startIndex, offsetBy: i + 2)] == \"d\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s.substring(from: i, to: i + 3) == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpbn3d6vuh.swift:6:14: error: value of type 'String' has no member 'substring'\n        if s.substring(from: i, to: i + 3) == \"std\" {\n           ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index2 = s.index(s.startIndex, offsetBy: i + 1)\n            if s[index2] == \"t\" {\n                let index3 = s.index(s.startIndex, offsetBy: i + 2)\n                if s[index3] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b128b2edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b128afe4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b128afe4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b128afe413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b128afe3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b128b117ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b128b0d0660 String.subscript.getter + 34\n7    tmpkivu2uwy                        0x000056291f1c692e <unavailable> + 6446\n8    tmpkivu2uwy                        0x000056291f1c663b <unavailable> + 5691\n9    libc.so.6                          0x00002b128b4d9460 __libc_start_main + 245\n10   tmpkivu2uwy                        0x000056291f1c6149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let words = s.components(separatedBy: \" \")\n    for word in words {\n        if word == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp4gm46im6.swift:5:19: error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy: \" \")\n                ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let words = s.components(separatedBy: \" \")\n    for word in words {\n        if word == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp4gm46im6.swift:5:19: error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy: \" \")\n                ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.characters.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index2 = s.index(s.startIndex, offsetBy: i+1)\n            let index3 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index2] == \"t\" && s[index3] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpcsik_gx8.swift:5:20: error: 'characters' is unavailable: Please use String directly\n    for i in 0..<s.characters.count {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count - 2 {\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpvfu7go9k.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvfu7go9k.swift:7:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvfu7go9k.swift:7:46: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                                             ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for char in s.characters {\n        if char == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmp29__a936.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let str = s.lowercased()\n    let count = str.components(separatedBy: \"std\").count - 1\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp86o6v2t8.swift:5:21: error: value of type 'String' has no member 'components'\n    let count = str.components(separatedBy: \"std\").count - 1\n                ~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp2g307pn_.swift:5:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if i+2 < s.count {\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpb236t5t1.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index1 = s.index(s.startIndex, offsetBy: i+1)\n            let index2 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index1] == \"t\" && s[index2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5fa9609c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5fa9300561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5fa9300286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5fa930013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5fa92ffbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b5fa9433b0d <unavailable> + 2693901\n6    tmp_1ucj8qw                        0x000056490465cc3b <unavailable> + 7227\n7    tmp_1ucj8qw                        0x000056490465c7cb <unavailable> + 6091\n8    libc.so.6                          0x00002b5fa97f5460 __libc_start_main + 245\n9    tmp_1ucj8qw                        0x000056490465c2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if i+2 < s.count {\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpb236t5t1.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1385279c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1384f70561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1384f70286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1384f7013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1384f6fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b13850a3b0d <unavailable> + 2693901\n6    tmpl9nn_1de                        0x000055f76d201ba4 <unavailable> + 7076\n7    tmpl9nn_1de                        0x000055f76d201626 <unavailable> + 5670\n8    libc.so.6                          0x00002b1385465460 __libc_start_main + 245\n9    tmpl9nn_1de                        0x000055f76d201329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if i+2 < s.count {\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpb236t5t1.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var index = s.startIndex\n    while index < s.endIndex {\n        let range = s.rangeOfString(\"std\", range: index..<s.endIndex)\n        if range != nil {\n            count++\n            index = range!.endIndex\n        } else {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpm0z3z0m7.swift:7:23: error: value of type 'String' has no member 'rangeOfString'\n        let range = s.rangeOfString(\"std\", range: index..<s.endIndex)\n                    ~ ^~~~~~~~~~~~~\n/tmp/tmpm0z3z0m7.swift:9:18: error: cannot find operator '++' in scope; did you mean '+= 1'?\n            count++\n                 ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s.prefix(i + 3) == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "tmpwu6xfgbj/tmpwu6xfgbj.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cfa5c8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cfa2bfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cfa2bf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cfa2be7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwu6xfgbj                        0x000055602c1f8624 <unavailable> + 5668\n5    libc.so.6                          0x00002b7cfa7b4460 __libc_start_main + 245\n6    tmpwu6xfgbj                        0x000055602c1f82a9 <unavailable> + 4777\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpnpz7cc4_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count: Int = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmphewdqw5y.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmphewdqw5y.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmphewdqw5y.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adcd1ca1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adcd1998561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adcd1998286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adcd199813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adcd1997bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002adcd1acbb0d <unavailable> + 2693901\n6    tmpxzzd0hd0                        0x0000564afea92b94 <unavailable> + 7060\n7    tmpxzzd0hd0                        0x0000564afea92626 <unavailable> + 5670\n8    libc.so.6                          0x00002adcd1e8d460 __libc_start_main + 245\n9    tmpxzzd0hd0                        0x0000564afea92329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp2g307pn_.swift:5:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s.substring(from: i, to: i+3) == \"std\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "/tmp/tmpyb24uu01.swift:7:14: error: value of type 'String' has no member 'substring'\n        if s.substring(from: i, to: i+3) == \"std\" {\n           ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var index = s.startIndex\n    while index != s.endIndex {\n        if s[index] == \"s\" {\n            if s[s.index(after: index)] == \"t\" {\n                if s[s.index(index, offsetBy: 2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        index = s.index(after: index)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba62476cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba624463561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba624463286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba62446313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba624462bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ba624596ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002ba62454f660 String.subscript.getter + 34\n7    tmp8ikcd5n5                        0x00005642d58be916 <unavailable> + 6422\n8    tmp8ikcd5n5                        0x00005642d58be69b <unavailable> + 5787\n9    libc.so.6                          0x00002ba624958460 __libc_start_main + 245\n10   tmp8ikcd5n5                        0x00005642d58be1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            if i < s.count - 2 {\n                let index2 = s.index(s.startIndex, offsetBy: i + 1)\n                let index3 = s.index(s.startIndex, offsetBy: i + 2)\n                if s[index2] == \"t\" && s[index3] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for char in s {\n        if char == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123627,
      "stdout": "",
      "stderr": "tmp7wkff1ao/tmp7wkff1ao.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b223e86dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b223e564b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b223e564988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b223e5637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7wkff1ao                        0x0000560965dc24bb <unavailable> + 5307\n5    libc.so.6                          0x00002b223ea59460 __libc_start_main + 245\n6    tmp7wkff1ao                        0x0000560965dc2099 <unavailable> + 4249\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmptsh1exhm.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptsh1exhm.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count-2 {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpj13wnz2g.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpj13wnz2g.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpj13wnz2g.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}