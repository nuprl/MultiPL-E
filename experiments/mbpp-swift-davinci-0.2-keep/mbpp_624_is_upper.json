{
  "name": "mbpp_624_is_upper",
  "language": "swift",
  "prompt": "\n/// Write a python function to convert a given string to uppercase.\nfunc is_upper(string: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_upper(string: \"person\") == \"PERSON\")\nassert(is_upper(string: \"final\") == \"FINAL\")\nassert(is_upper(string: \"Valid\") == \"VALID\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()",
    "    return string.uppercased()"
  ]
}