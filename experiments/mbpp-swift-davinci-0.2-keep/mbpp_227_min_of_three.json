{
  "name": "mbpp_227_min_of_three",
  "language": "swift",
  "prompt": "\n/// Write a function to find minimum of three numbers.\nfunc min_of_three(a: Int, b: Int, c: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_of_three(a: 10, b: 20, c: 0) == 0)\nassert(min_of_three(a: 19, b: 15, c: 18) == 15)\nassert(min_of_three(a: -10, b: -20, c: -30) == -30)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var min = a\n    if b < min {\n        min = b\n    }\n    if c < min {\n        min = c\n    }\n    return min",
    "    var min = a\n    if b < min {\n        min = b\n    }\n    if c < min {\n        min = c\n    }\n    return min",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(a, min(b, c))",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(a, min(b, c))",
    "    return min(a, min(b, c))",
    "    return min(a, min(b, c))",
    "    return min(min(a, b), c)",
    "    return min(min(a, b), c)",
    "    return min(a, min(b, c))",
    "    return min(min(a, b), c)",
    "    return min(a, min(b, c))"
  ]
}