{
  "name": "mbpp_584_find_adverbs",
  "language": "swift",
  "prompt": "\n/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunc find_adverbs(text: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_adverbs(text: \"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")\nassert(find_adverbs(text: \"Please handle the situation carefuly\") == \"28-36: carefuly\")\nassert(find_adverbs(text: \"Complete the task quickly\") == \"18-25: quickly\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and its position is \\(index + 1).\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)?.lowerBound.encodedOffset }\n    return \"Adverbs: \\(adverbs.joined(separator: \", \"))\\nPositions: \\(positions.map { String($0!) }.joined(separator: \", \"))\"",
    "    let pattern = \"\\\\b\\\\w+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"Adverb: \\(word) at position \\(index + 1)\\n\"\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb in the string is \\(word) and its position is \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    let result = zip(adverbs, positions).map { \"\\($0) at \\($1)\" }.joined(separator: \", \")\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"\\(word) at index \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"Index: \\(index), Word: \\(word)\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.components(separatedBy: \" \").firstIndex(of: $0)! + 1 }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let matchRange = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: matchRange.location)\n        let end = text.index(start, offsetBy: matchRange.length)\n        result += String(text[start..<end]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound.encodedOffset }\n    return \"Adverbs: \\(adverbs), positions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    var result = \"\"\n    let adverbs = text.components(separatedBy: \" \")\n    for adverb in adverbs {\n        if adverb.hasSuffix(\"ly\") {\n            result = adverb\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == adverb }\n    return \"\\(adverb) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.enumerated().map { \"\\($0.element) at position \\($0.offset)\" }.joined(separator: \", \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The adverb is \\(word) at position \\(index + 1)\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let result = adverbs.map { \"\\($0) - \\(text.range(of: $0)!)\" }.joined(separator: \"\\n\")\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return \"\\(adverbs)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and it is at position \\(index + 1) in the string.\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \" \\(text[range])\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) \\(positions.first!)\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"\\(word) at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs)\\nPositions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and it is at position \\(index + 1) in the text.\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = text.components(separatedBy: \" \").enumerated().filter { $0.element.hasSuffix(\"ly\") }\n    let result = adverbs.map { $0.appending(\" - \\(adverbs_positions.first(where: { $0.element == $0 })?.offset ?? 0)\") }\n    return result.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == adverb }\n    return \"The first adverb is \\(adverb) and its positions are \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter {\n        $0.hasSuffix(\"ly\")\n    }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        result += adverb + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"There are no adverbs in the text.\" : \"The first adverb is \\(adverbs[0]) and its position is \\(adverbs_positions[0]).\"",
    "    let pattern = \"\\\\b[a-zA-Z]*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(word) and its position is \\(index)\"\n            break\n        }\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at position \\(index) \"\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at index \\(index) \"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The adverb is \\(word) and its position is \\(index + 1)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) - \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let pattern = \"\\\\w+ly\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    if adverbs.count > 0 {\n        result = adverbs[0]\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.isEmpty ? \"There are no adverbs in the text.\" : \"The first adverb is \\(adverbs[0]).\"",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(text.startIndex, offsetBy: range.location + range.length)\n        result += String(text[start..<end]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .CaseInsensitive)\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.characters.count))\n    var result = \"\"\n    for match in matches {\n        let range = match.rangeAtIndex(0)\n        let start = text.startIndex.advancedBy(range.location)\n        let end = start.advancedBy(range.length)\n        result += text.substringWithRange(start..<end) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs.joined(separator: \", \"))\\nPositions: \\(adverbs_positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let pattern = \"\\\\b[a-zA-Z]+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and its position is \\(index + 1)\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.count > 0 ? adverbs[0] : \"No adverbs found\"",
    "    let adverbs = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        if adverb.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(adverb) and its position is \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(\"\\(word) at \\(index)\")\n        }\n    }\n    return adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)?.lowerBound.encodedOffset }\n    return \"Adverbs: \\(adverbs) \\nPositions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == adverb }.map { $0.offset }\n    return \"Adverb: \\(adverb), positions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"Adverbs: \\(adverbs), Positions: \\(positions)\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) \\(index) \"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\w+ly\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.count == 0 ? \"No adverbs found\" : \"\\(adverbs.first!) at position \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let result = adverbs.reduce(\"\") { $0 + \" \" + $1 }\n    return result",
    "    let pattern = \"\\\\b[a-zA-Z]+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += text[range] + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"Found \\(text[range]) at \\(range.lowerBound) to \\(range.upperBound)\\n\"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) - \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The adverb \\(word) is at position \\(index + 1) in the text.\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter{$0.hasSuffix(\"ly\")}\n    let positions = adverbs.map{text.range(of: $0)!.lowerBound}\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"Adverb: \\(word) at position \\(index)\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)?.lowerBound.encodedOffset }\n    return \"Adverbs: \\(adverbs), positions: \\(adverbs_positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"Adverbs: \\(adverbs), positions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let pattern = \"\\\\b\\\\w+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: .reportCompletion, range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(start, offsetBy: range.length)\n        result += String(text[start..<end]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let adverbs = text.components(separatedBy: \" \")\n    for adverb in adverbs {\n        if adverb.hasSuffix(\"ly\") {\n            result = adverb\n            break\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(start, offsetBy: range.length)\n        result += String(text[start..<end]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        let word = text[range]\n        result += \"\\(word) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and its position is \\(index + 1)\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .CaseInsensitive)\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matchesInString(text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        result += \"\\(match.range.location) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        if adverb.hasSuffix(\"ly\") {\n            result += \"Adverb: \\(adverb), position: \\(index + 1)\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        if adverb.hasSuffix(\"ly\") {\n            result = \"The adverb is \\(adverb) and its position is \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"\\(word) at \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.isEmpty ? \"No adverbs found\" : adverbs.joined(separator: \", \")",
    "    var result = \"\"\n    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    if adverbs.count > 0 {\n        result = adverbs[0]\n        for (index, word) in text.components(separatedBy: \" \").enumerated() {\n            if word == adverbs[0] {\n                result += \" \\(index)\"\n            }\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == adverb }.map { $0.offset }\n    return \"Adverb: \\(adverb), positions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    var result = \"\"\n    let words = text.components(separatedBy: .whitespacesAndNewlines)\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and its position is \\(index + 1)\\n\"\n            break\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [.caseInsensitive])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.enumerated().map { \"\\($0.element) at position \\($0.offset)\" }.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let pattern = \"\\\\b[a-zA-Z]+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        result += \"\\(adverb) - \\(index + 1) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    guard let first = adverbs.first else {\n        return \"No adverbs found\"\n    }\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == first }.map { $0.offset }\n    return \"First adverb: \\(first), positions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs)\\nPositions: \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"Adverbs: \\(adverbs)\\nPositions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let words = text.components(separatedBy: \" \")\n    for word in words {\n        if word.hasSuffix(\"ly\") {\n            return word\n        }\n    }\n    return \"No adverbs found\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and its position is \\(index + 1).\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb is \\(word) and its position is \\(index)\"\n            break\n        }\n    }\n    return result"
  ]
}