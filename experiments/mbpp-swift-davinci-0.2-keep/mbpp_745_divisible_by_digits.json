{
  "name": "mbpp_745_divisible_by_digits",
  "language": "swift",
  "prompt": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter({\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    })",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && ($1 != 0) && ($0 % $1 == 0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for j in i.digits {\n            if i % j != 0 {\n                flag = false\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 2 && $0 != 5 && $0 != 6 && $0 != 8 && $0 != 9\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && ($1 != 0 && $0 % $1 == 0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isDivisible(by: $0) }\n    }",
    "    return Array(startnum...endnum).filter { number in\n        Array(String(number)).map { Int(String($0))! }.reduce(true, { $0 && number % $1 == 0 })\n    }",
    "    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isDivisible(by: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num = num / 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = num.digits\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits = i.digits\n        var isDivisible = true\n        for j in digits {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter { number in\n        let digits = String(number).map { Int(String($0))! }\n        return digits.allSatisfy { number % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1.isMultiple(of: $0)\n        }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = String(i).compactMap{Int(String($0))}\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0 != 8 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 2 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 2 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 3 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 3 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 4 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 4 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 4 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 6 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 2 && $0 != 3 && $0 != 4 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 2 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 2 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 3 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 3 && $0 != 7 && $0 != 8 } &&",
    "    return Array(startnum...endnum).filter { num in\n        let digits = Array(String(num)).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter { (num) -> Bool in\n        return Array(String(num)).map { Int(String($0))! }.reduce(true, { (result, digit) -> Bool in\n            return result && num % digit == 0\n        })\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for digit in String(i) {\n            if i % Int(String(digit))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { $0.digits.allSatisfy { $0.isMultiple(of: $0) } }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter { num in\n        num.digits.allSatisfy { digit in\n            num % digit == 0\n        }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num = num / 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.reduce(true) { $0 && num % $1 == 0 }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter { num in\n        let digits = Array(String(num)).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in 1...9 {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = Array(String(i))\n        if digits.allSatisfy({ i % Int(String($0))! == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        let digits = i.digits\n        for digit in digits {\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.reduce(true) { $0 && num % $1 == 0 }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter { num in\n        let digits = Array(String(num)).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = digits_of_number(number: i)\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                flag = false\n                break\n            }\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }",
    "    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            if $0 % (num % 10) != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            let digit = num % 10\n            digits.append(digit)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter { number in\n        let digits = String(number).compactMap { Int(String($0)) }\n        return digits.allSatisfy { number % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { $0.digits.allSatisfy { $0.isMultiple(of: $0) } }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for num in startnum...endnum {\n        let digits = num.digits\n        if digits.allSatisfy({ num % $0 == 0 }) {\n            result.append(num)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var temp = i\n        while temp > 0 {\n            digits.append(temp % 10)\n            temp /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6 && $0 != 8 && $0 != 9 && $0 != 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true, { $0 && $1.isMultiple(of: $0) })\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6 && $0 != 8\n        }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    return (startnum...endnum).filter { (num) -> Bool in\n        let digits = num.digits\n        return digits.allSatisfy { (digit) -> Bool in\n            num % digit == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    let numbers = Array(startnum...endnum)\n    return numbers.filter { number in\n        let digits = String(number).map { Int(String($0))! }\n        return digits.allSatisfy { number % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var number = i\n        var is_divisible = true\n        while number > 0 {\n            let digit = number % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            number /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var number = i\n        while number > 0 {\n            digits.append(number % 10)\n            number /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                divisible = false\n                break\n            }\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in i.digits {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    return (startnum...endnum).filter({$0 % $0.digits.reduce(1, *) == 0})",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    let numbers = (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n    return numbers",
    "    return Array(startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && ($1 != 0 && $0 % $1 == 0)\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    let result = (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { number in\n        let digits = String(number).map { Int(String($0))! }\n        return digits.allSatisfy { number % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                flag = false\n                break\n            }\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n            num = num / 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0 != 2 && $0 != 5 && $0 != 6 && $0 != 8 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.reduce(true) { $0 && num % $1 == 0 }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }",
    "    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var temp = i\n        while temp > 0 {\n            digits.append(temp % 10)\n            temp /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num = num / 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result",
    "    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }",
    "    return Array(startnum...endnum).filter { (num) -> Bool in\n        let digits = Array(String(num))\n        return digits.allSatisfy { (digit) -> Bool in\n            num % Int(String(digit))! == 0\n        }\n    }",
    "    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }"
  ]
}