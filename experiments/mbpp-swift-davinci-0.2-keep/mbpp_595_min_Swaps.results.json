{
  "name": "mbpp_595_min_Swaps",
  "language": "swift",
  "prompt": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp41iwpggq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp41iwpggq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp41iwpggq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let arr1 = Array(str1)\n    let arr2 = Array(str2)\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpcnolw51p.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpcnolw51p.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcnolw51p.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    if str1.count != str2.count {\n        return -1\n    }\n    var count = 0\n    var i = 0\n    var j = str1.count - 1\n    while i < j {\n        while str1[i] != str2[i] {\n            i += 1\n        }\n        while str1[j] != str2[j] {\n            j -= 1\n        }\n        if i < j {\n            count += 1\n            i += 1\n            j -= 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp3s6nnfdu.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp3s6nnfdu.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3s6nnfdu.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3s6nnfdu.swift:11:15: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        while str1[i] != str2[i] {\n              ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3s6nnfdu.swift:11:26: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        while str1[i] != str2[i] {\n                         ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3s6nnfdu.swift:14:15: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        while str1[j] != str2[j] {\n              ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3s6nnfdu.swift:14:26: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        while str1[j] != str2[j] {\n                         ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) ->",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let arr1 = Array(str1)\n    let arr2 = Array(str2)\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpcnolw51p.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpcnolw51p.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcnolw51p.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwhl22sck.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwhl22sck.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwhl22sck.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpwvja1vah.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwvja1vah.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwvja1vah.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] == str2[j] {\n            i += 1\n            j += 1\n        } else {\n            if str1[i] == \"1\" {\n                count += 1\n            }\n            i += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpeoy82dmo.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpeoy82dmo.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeoy82dmo.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeoy82dmo.swift:10:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeoy82dmo.swift:10:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeoy82dmo.swift:14:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeoy82dmo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpeoy82dmo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            str1 = String(str1.prefix(i)) + String(str2[i]) + String(str1.suffix(str1.count - i - 1))\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122513,
      "stdout": "",
      "stderr": "/tmp/tmp7eikoeqj.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp7eikoeqj.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp7eikoeqj.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp7eikoeqj.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7eikoeqj.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7eikoeqj.swift:11:52: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str1 = String(str1.prefix(i)) + String(str2[i]) + String(str1.suffix(str1.count - i - 1))\n                                                   ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7eikoeqj.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[str1.index(str1.startIndex, offsetBy: i)] != str2[str2.index(str2.startIndex, offsetBy: i)] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpcc2m8w92.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpcc2m8w92.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcc2m8w92.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcc2m8w92.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpcc2m8w92.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] != str2[j] {\n            count += 1\n        }\n        i += 1\n        j += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpyswtb8a_.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpyswtb8a_.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpyswtb8a_.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpyswtb8a_.swift:10:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyswtb8a_.swift:10:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyswtb8a_.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpyswtb8a_.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpr0h2r72k.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpr0h2r72k.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr0h2r72k.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr0h2r72k.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr0h2r72k.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr0h2r72k.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpr0h2r72k.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpr0h2r72k.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpr0h2r72k.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr0h2r72k.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr0h2r72k.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr0h2r72k.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr0h2r72k.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpr0h2r72k.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1.replaceSubrange(i...i, with: \"0\")\n            } else {\n                str1.replaceSubrange(i...i, with: \"1\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp_86t6r_q.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp_86t6r_q.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp_86t6r_q.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp_86t6r_q.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_86t6r_q.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_86t6r_q.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_86t6r_q.swift:12:17: error: instance method 'replaceSubrange(_:with:)' requires the types 'String.Index' and 'Int' be equivalent\n                str1.replaceSubrange(i...i, with: \"0\")\n                ^\nSwift.RangeReplaceableCollection:2:37: note: where 'Self.Index' = 'String.Index', 'R.Bound' = 'Int'\n    @inlinable public m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp41iwpggq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp41iwpggq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp41iwpggq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    let len1 = str1.count\n    let len2 = str2.count\n    if len1 != len2 {\n        return -1\n    }\n    for i in 0..<len1 {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpk8qj1bpa.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpk8qj1bpa.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpk8qj1bpa.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpk8qj1bpa.swift:13:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpk8qj1bpa.swift:13:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpk8qj1bpa.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpk8qj1bpa.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp2swhy04b.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2swhy04b.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2swhy04b.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2swhy04b.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp2swhy04b.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmp2swhy04b.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmp2swhy04b.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1[i] = \"0\"\n            } else {\n                str1[i] = \"1\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpb03lh9ko.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpb03lh9ko.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpb03lh9ko.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpb03lh9ko.swift:12:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb03lh9ko.swift:12:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb03lh9ko.swift:14:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb03lh9ko.swift:15:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n/tmp/tmpb03lh9ko.swift:17:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwhl22sck.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwhl22sck.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwhl22sck.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    if str1 == str2 {\n        return 0\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpq6xnm_zj.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpq6xnm_zj.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpq6xnm_zj.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpq6xnm_zj.swift:14:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq6xnm_zj.swift:14:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq6xnm_zj.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpq6xnm_zj.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp41iwpggq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp41iwpggq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp41iwpggq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0 ..< str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpcfn_tap6.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpcfn_tap6.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcfn_tap6.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcfn_tap6.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcfn_tap6.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcfn_tap6.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpcfn_tap6.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwhl22sck.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwhl22sck.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwhl22sck.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var l1 = str1.count\n    var l2 = str2.count\n    if l1 != l2 {\n        return -1\n    }\n    for i in 0..<l1 {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp8rhk34gd.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rhk34gd.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rhk34gd.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rhk34gd.swift:13:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8rhk34gd.swift:13:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8rhk34gd.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp8rhk34gd.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmp8rhk34gd.swift:7:9: warning: variable 'l1' was never mutated; consider changing to 'let' constant\n    var l1 = str1.count\n    ~~~ ^\n    let\n/tmp/tmp8rhk34gd.swift:8:9: warning: variable 'l2' was never mutated; consider changing to 'let' constant\n    var l2 = str2.count\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp41iwpggq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp41iwpggq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp41iwpggq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] == str2[j] {\n            i += 1\n            j += 1\n        } else {\n            if str1[i] == \"1\" {\n                count += 1\n            } else {\n                count += 1\n            }\n            i += 1\n            j += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmprah7xs__.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmprah7xs__.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmprah7xs__.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmprah7xs__.swift:10:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprah7xs__.swift:10:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprah7xs__.swift:14:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmprah7xs__.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmprah7xs__.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    while str1 != str2 {\n        let index = str1.index(str1.startIndex, offsetBy: 1)\n        str1 = String(str1[index...]) + String(str1[..<index])\n        count += 1\n        if str1 == str2 {\n            return count\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpqxl9nncb.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpqxl9nncb.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpqxl9nncb.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpqxl9nncb.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            str1 = String(str1.prefix(i)) + String(str2[i]) + String(str1.suffix(str1.count - i - 1))\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122513,
      "stdout": "",
      "stderr": "/tmp/tmpu3go1bim.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpu3go1bim.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpu3go1bim.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpu3go1bim.swift:12:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu3go1bim.swift:12:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu3go1bim.swift:14:52: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str1 = String(str1.prefix(i)) + String(str2[i]) + String(str1.suffix(str1.count - i - 1))\n                                                   ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu3go1bim.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    if count == 2 {\n        return 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpys0x19oj.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpys0x19oj.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpys0x19oj.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpys0x19oj.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpys0x19oj.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpys0x19oj.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpys0x19oj.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpr0h2r72k.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpr0h2r72k.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr0h2r72k.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr0h2r72k.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr0h2r72k.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr0h2r72k.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpr0h2r72k.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1_arr = Array(str1)\n    let str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpeazscknc.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpeazscknc.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeazscknc.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = str1.map { String($0) }\n    var str2_arr = str2.map { String($0) }\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpfsfuiyty.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpfsfuiyty.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpfsfuiyty.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpfsfuiyty.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpfsfuiyty.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmpfsfuiyty.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = str1.map { String($0) }\n    ~~~ ^\n    let\n/tmp/tmpfsfuiyty.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = str2.map { String($0) }\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1[i] = \"0\"\n            } else {\n                str1[i] = \"1\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpttaqlz1q.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpttaqlz1q.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpttaqlz1q.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpttaqlz1q.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpttaqlz1q.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpttaqlz1q.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpttaqlz1q.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n/tmp/tmpttaqlz1q.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwhl22sck.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwhl22sck.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwhl22sck.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let arr1 = Array(str1)\n    let arr2 = Array(str2)\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpcnolw51p.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpcnolw51p.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcnolw51p.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwhl22sck.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwhl22sck.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwhl22sck.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] == str2[j] {\n            i += 1\n            j += 1\n        } else {\n            if str1[i] == \"1\" {\n                count += 1\n            }\n            i += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpeoy82dmo.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpeoy82dmo.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeoy82dmo.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeoy82dmo.swift:10:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeoy82dmo.swift:10:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeoy82dmo.swift:14:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeoy82dmo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpeoy82dmo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let s1 = Array(str1)\n    let s2 = Array(str2)\n    var count = 0\n    for i in 0..<s1.count {\n        if s1[i] != s2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp2wv3mhkr.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2wv3mhkr.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2wv3mhkr.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            str1 = str1.replacingOccurrences(of: \"\\(str1[i])\", with: \"\\(str2[i])\")\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpr8btscjc.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpr8btscjc.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr8btscjc.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpr8btscjc.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr8btscjc.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr8btscjc.swift:11:25: error: value of type 'String' has no member 'replacingOccurrences'\n            str1 = str1.replacingOccurrences(of: \"\\(str1[i])\", with: \"\\(str2[i])\")\n                   ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\", options: .literal, range: str1.startIndex..<str1.endIndex)\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\", options: .literal, range: str1.startIndex..<str1.endIndex)\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpu2_o240_.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpu2_o240_.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpu2_o240_.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpu2_o240_.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu2_o240_.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu2_o240_.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpu2_o240_.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\", options: .literal, range: str1.startIndex..<str1.endIndex)\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu2_o240_.swift:12:80: error: cannot infer contextual",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let arr1 = Array(str1)\n    let arr2 = Array(str2)\n    var count = 0\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpvj5zcfz0.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvj5zcfz0.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvj5zcfz0.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp3251snwk.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp3251snwk.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3251snwk.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3251snwk.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp3251snwk.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp3251snwk.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3251snwk.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3251snwk.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1_arr = Array(str1)\n    let str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpeazscknc.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpeazscknc.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeazscknc.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpoelmg7oa.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpoelmg7oa.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpoelmg7oa.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpoelmg7oa.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpoelmg7oa.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpoelmg7oa.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpoelmg7oa.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoelmg7oa.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1_arr = Array(str1)\n    let str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmprethezlh.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmprethezlh.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmprethezlh.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            var j = i + 1\n            while j < str1.count {\n                if str1[i] == str2[j] && str1[j] == str2[i] {\n                    str1.swapAt(i, j)\n                    count += 1\n                    break\n                }\n                j += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp214de5rz.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp214de5rz.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp214de5rz.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp214de5rz.swift:12:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp214de5rz.swift:12:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp214de5rz.swift:15:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if str1[i] == str2[j] && str1[j] == str2[i] {\n                   ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp214de5rz.swift:15:31: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if str1[i] == str2[j] && str1[j] == str2[i] {\n                              ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly mar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp3251snwk.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp3251snwk.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3251snwk.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3251snwk.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmp3251snwk.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    if str1.count != str2.count {\n        return -1\n    }\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpmjohd0gm.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpmjohd0gm.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpmjohd0gm.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpmjohd0gm.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmjohd0gm.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmjohd0gm.swift:8:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpmjohd0gm.swift:9:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwhl22sck.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwhl22sck.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwhl22sck.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhl22sck.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwhl22sck.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    var j = 0\n    var temp = 0\n    var n = str1.count\n    var m = str2.count\n    if n != m {\n        return -1\n    }\n    while i < n && str1[i] == str2[i] {\n        i += 1\n    }\n    while j < n && str1[n - 1 - j] == str2[n - 1 - j] {\n        j += 1\n    }\n    for k in i..<n - j {\n        if str1[k] != str2[k] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpv3g21zsd.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpv3g21zsd.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpv3g21zsd.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpv3g21zsd.swift:15:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i < n && str1[i] == str2[i] {\n                   ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpv3g21zsd.swift:15:31: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i < n && str1[i] == str2[i] {\n                              ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpv3g21zsd.swift:18:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while j < n && str1[n - 1 - j] == str2[n - 1 - j] {\n                   ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpv3g21zsd.swift:18:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while j < n && str1[n - 1 - j] == str2[n - 1 - j] {\n                                      ^~~~~~~~~~~~~~~\nSwift.String:3:12: n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp_zk_wau5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp_zk_wau5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp_zk_wau5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpwe7_am7a.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwe7_am7a.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwe7_am7a.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwe7_am7a.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwe7_am7a.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpbox3qpm8.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpbox3qpm8.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpbox3qpm8.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpbox3qpm8.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbox3qpm8.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbox3qpm8.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpbox3qpm8.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingCharacters(in: str1.index(str1.startIndex, offsetBy: i)..<str1.index(str1.startIndex, offsetBy: i + 1), with: \"0\")\n                str2 = str2.replacingCharacters(in: str2.index(str2.startIndex, offsetBy: i)..<str2.index(str2.startIndex, offsetBy: i + 1), with: \"1\")\n            } else {\n                str1 = str1.replacingCharacters(in: str1.index(str1.startIndex, offsetBy: i)..<str1.index(str1.startIndex, offsetBy: i + 1), with: \"1\")\n                str2 = str2.replacingCharacters(in: str2.index(str2.startIndex, offsetBy: i)..<str2.index(str2.startIndex, offsetBy: i + 1), with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpuiyunx7u.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpuiyunx7u.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuiyunx7u.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuiyunx7u.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyunx7u.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyunx7u.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuiyunx7u.swift:12:29: error: value of type 'String' has no member 'replacingCharacters'\n                str1 = str1.replacingCharacters(in: str1.index(str1.startIndex, offsetBy: i)..<str1.index(str1.startIndex, offsetBy: i + 1), with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuiyunx7u.swift:13:29: error: v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    while str1 != str2 {\n        let index = str1.index(str1.startIndex, offsetBy: 0)\n        str1.remove(at: index)\n        let index2 = str2.index(str2.startIndex, offsetBy: 0)\n        str2.remove(at: index2)\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp9jy1kmq2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9jy1kmq2.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9jy1kmq2.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var s1 = str1\n    var s2 = str2\n    if s1.count != s2.count {\n        return -1\n    }\n    for i in 0..<s1.count {\n        if s1[i] != s2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpq0ir9tc2.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpq0ir9tc2.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpq0ir9tc2.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpq0ir9tc2.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s1[i] != s2[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq0ir9tc2.swift:11:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s1[i] != s2[i] {\n                    ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq0ir9tc2.swift:5:9: warning: variable 's1' was never mutated; consider changing to 'let' constant\n    var s1 = str1\n    ~~~ ^\n    let\n/tmp/tmpq0ir9tc2.swift:6:9: warning: variable 's2' was never mutated; consider changing to 'let' constant\n    var s2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            str1 = str1.replacingOccurrences(of: String(str1[i]), with: String(str2[i]))\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp1bhx5spa.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp1bhx5spa.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp1bhx5spa.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp1bhx5spa.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1bhx5spa.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1bhx5spa.swift:11:25: error: value of type 'String' has no member 'replacingOccurrences'\n            str1 = str1.replacingOccurrences(of: String(str1[i]), with: String(str2[i]))\n                   ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] != str2[j] {\n            count += 1\n        }\n        i += 1\n        j += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp28satvb3.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp28satvb3.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp28satvb3.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp28satvb3.swift:10:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp28satvb3.swift:10:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp28satvb3.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp28satvb3.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] != str2[j] {\n            count += 1\n        }\n        i += 1\n        j += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp9o1cla2_.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9o1cla2_.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9o1cla2_.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9o1cla2_.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9o1cla2_.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp2swhy04b.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2swhy04b.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2swhy04b.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2swhy04b.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp2swhy04b.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmp2swhy04b.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmp2swhy04b.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var arr1 = Array(str1)\n    var arr2 = Array(str2)\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpesaxke2b.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpesaxke2b.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpesaxke2b.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpesaxke2b.swift:5:9: warning: variable 'arr1' was never mutated; consider changing to 'let' constant\n    var arr1 = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmpesaxke2b.swift:6:9: warning: variable 'arr2' was never mutated; consider changing to 'let' constant\n    var arr2 = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    let str1_arr = Array(str1)\n    let str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n            str1 = str1.replacingOccurrences(of: String(str1_arr[i]), with: String(str2_arr[i]))\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmpi7va491p.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpi7va491p.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpi7va491p.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpi7va491p.swift:12:25: error: value of type 'String' has no member 'replacingOccurrences'\n            str1 = str1.replacingOccurrences(of: String(str1_arr[i]), with: String(str2_arr[i]))\n                   ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp8rnpdl51.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp8rnpdl51.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp8rnpdl51.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122512,
      "stdout": "",
      "stderr": "/tmp/tmp72appuwa.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp72appuwa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp72appuwa.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp72appuwa.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiagbmi51.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiagbmi51.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiagbmi51.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiagbmi51.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiagbmi51.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}