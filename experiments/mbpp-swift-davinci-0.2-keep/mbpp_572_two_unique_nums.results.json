{
  "name": "mbpp_572_two_unique_nums",
  "language": "swift",
  "prompt": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var uniqueNums = [Int]()\n    for i in 0..<nums.count {\n        if nums.contains(nums[i]) {\n            uniqueNums.append(nums[i])\n            nums.remove(at: i)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae507592c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae507289561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae507289286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae50728913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae507288bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae507088e83 <unavailable> + 188035\n6    tmprqbk6ejd                        0x0000559795f60bf7 <unavailable> + 7159\n7    tmprqbk6ejd                        0x0000559795f606a4 <unavailable> + 5796\n8    libc.so.6                          0x00002ae50777e460 __libc_start_main + 245\n9    tmprqbk6ejd                        0x0000559795f60369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    \n    for (key, value) in dict {\n        if value == 1 {\n            result.append(key)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpd1_f99t0/tmpd1_f99t0.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2979db3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2979aaab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2979aaa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2979aa97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd1_f99t0                        0x000055f038df78a4 <unavailable> + 6308\n5    libc.so.6                          0x00002b2979f9f460 __libc_start_main + 245\n6    tmpd1_f99t0                        0x000055f038df7489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var result = [Int]()\n    for num in nums {\n        if nums.filter({$0 == num}).count == 1 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp48_m6wus/tmp48_m6wus.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fa2204c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fa1efbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fa1efb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fa1efa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp48_m6wus                        0x000056188ba2e664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7fa23f0460 __libc_start_main + 245\n6    tmp48_m6wus                        0x000056188ba2e249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique = [Int]()\n    for num in nums {\n        if !unique.contains(num) {\n            unique.append(num)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpkua5hi5n/tmpkua5hi5n.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d2c2bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d2bfb2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d2bfb2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d2bfb17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkua5hi5n                        0x000055800aa60664 <unavailable> + 5732\n5    libc.so.6                          0x00002b2d2c4a7460 __libc_start_main + 245\n6    tmpkua5hi5n                        0x000055800aa60249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    var nums_count: [Int: Int] = [:]\n    \n    for num in nums {\n        if nums_count[num] == nil {\n            nums_count[num] = 1\n        } else {\n            nums_count[num]! += 1\n        }\n    }\n    \n    for num in nums_count.keys {\n        if nums_count[num] == 1 {\n            unique_nums.append(num)\n        }\n    }\n    \n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp1aczj3h0/tmp1aczj3h0.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6fc0d34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6fc0a2bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6fc0a2b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6fc0a2a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1aczj3h0                        0x0000561752a0e9b4 <unavailable> + 6580\n5    libc.so.6                          0x00002b6fc0f20460 __libc_start_main + 245\n6    tmp1aczj3h0                        0x0000561752a0e599 <unavailable> + 5529\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp48_m6wus/tmp48_m6wus.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fa2204c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fa1efbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fa1efb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fa1efa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp48_m6wus                        0x000056188ba2e664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7fa23f0460 __libc_start_main + 245\n6    tmp48_m6wus                        0x000056188ba2e249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp6nazi3j8/tmp6nazi3j8.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae66fed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae66fbcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae66fbcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae66fbcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6nazi3j8                        0x0000559ce5eec664 <unavailable> + 5732\n5    libc.so.6                          0x00002ae6700c2460 __libc_start_main + 245\n6    tmp6nazi3j8                        0x0000559ce5eec249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var uniqueNums: [Int] = []\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpeiel4_d6/tmpeiel4_d6.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b55229b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b55226a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b55226a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b55226a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeiel4_d6                        0x0000561ac2d59614 <unavailable> + 5652\n5    libc.so.6                          0x00002b5522b9c460 __libc_start_main + 245\n6    tmpeiel4_d6                        0x0000561ac2d591f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var nums = nums\n    for i in 0..<nums.count {\n        for j in i+1..<nums.count {\n            if nums[i] == nums[j] {\n                nums.remove(at: j)\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acb573cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acb570c5561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002acb570c5286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002acb570c513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002acb570c4bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002acb56ec5e83 <unavailable> + 188035\n6    tmpu3nq01bt                        0x000055c05ce97caf <unavailable> + 7343\n7    tmpu3nq01bt                        0x000055c05ce975e4 <unavailable> + 5604\n8    libc.so.6                          0x00002acb575ba460 __libc_start_main + 245\n9    tmpu3nq01bt                        0x000055c05ce972a9 <unavailable> + 4777\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique = [Int]()\n    for num in nums {\n        if !unique.contains(num) {\n            unique.append(num)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpkua5hi5n/tmpkua5hi5n.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d2c2bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d2bfb2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d2bfb2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d2bfb17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkua5hi5n                        0x000055800aa60664 <unavailable> + 5732\n5    libc.so.6                          0x00002b2d2c4a7460 __libc_start_main + 245\n6    tmpkua5hi5n                        0x000055800aa60249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpvxlj8uw1/tmpvxlj8uw1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b322e4c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b322e1b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b322e1b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b322e1b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxlj8uw1                        0x000055652e70f614 <unavailable> + 5652\n5    libc.so.6                          0x00002b322e6ad460 __libc_start_main + 245\n6    tmpvxlj8uw1                        0x000055652e70f1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    var nums_count = [Int: Int]()\n    for num in nums {\n        if nums_count[num] == nil {\n            nums_count[num] = 1\n        } else {\n            nums_count[num]! += 1\n        }\n    }\n    for (num, count) in nums_count {\n        if count == 1 {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpbkm8afim/tmpbkm8afim.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e06e76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e06b6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e06b6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e06b6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbkm8afim                        0x000055f99ad1f984 <unavailable> + 6532\n5    libc.so.6                          0x00002b2e07062460 __libc_start_main + 245\n6    tmpbkm8afim                        0x000055f99ad1f569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp6nazi3j8/tmp6nazi3j8.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae66fed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae66fbcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae66fbcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae66fbcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6nazi3j8                        0x0000559ce5eec664 <unavailable> + 5732\n5    libc.so.6                          0x00002ae6700c2460 __libc_start_main + 245\n6    tmp6nazi3j8                        0x0000559ce5eec249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var seen = Set<Int>()\n    var unique = [Int]()\n    for num in nums {\n        if seen.contains(num) {\n            continue\n        }\n        seen.insert(num)\n        unique.append(num)\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmptt55tyfy/tmptt55tyfy.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b543d5d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b543d2ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b543d2cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b543d2cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt55tyfy                        0x000056368da65754 <unavailable> + 5972\n5    libc.so.6                          0x00002b543d7c1460 __libc_start_main + 245\n6    tmptt55tyfy                        0x000056368da65339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    var num_count: [Int: Int] = [:]\n    \n    for num in nums {\n        if num_count[num] == nil {\n            num_count[num] = 1\n        } else {\n            num_count[num]! += 1\n        }\n    }\n    \n    for (num, count) in num_count {\n        if count == 1 {\n            unique_nums.append(num)\n        }\n    }\n    \n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp0rqd44gn/tmp0rqd44gn.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc1ef3cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc1ec33b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc1ec33988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc1ec327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0rqd44gn                        0x000055acad28e954 <unavailable> + 6484\n5    libc.so.6                          0x00002adc1f128460 __libc_start_main + 245\n6    tmp0rqd44gn                        0x000055acad28e539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp48_m6wus/tmp48_m6wus.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fa2204c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fa1efbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fa1efb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fa1efa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp48_m6wus                        0x000056188ba2e664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7fa23f0460 __libc_start_main + 245\n6    tmp48_m6wus                        0x000056188ba2e249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for i in 0..<nums.count {\n        if !unique_nums.contains(nums[i]) {\n            unique_nums.append(nums[i])\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp5qah4h7u/tmp5qah4h7u.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6c73afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6c70a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6c70a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6c70a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5qah4h7u                        0x00005626b4ec56e4 <unavailable> + 5860\n5    libc.so.6                          0x00002af6c759b460 __libc_start_main + 245\n6    tmp5qah4h7u                        0x00005626b4ec52c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums: [Int] = []\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp9_tbq6cl/tmp9_tbq6cl.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5474424c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b547411bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b547411b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b547411a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9_tbq6cl                        0x0000564914807614 <unavailable> + 5652\n5    libc.so.6                          0x00002b5474610460 __libc_start_main + 245\n6    tmp9_tbq6cl                        0x00005649148071f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique = [Int]()\n    for num in nums {\n        if !unique.contains(num) {\n            unique.append(num)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpkua5hi5n/tmpkua5hi5n.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d2c2bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d2bfb2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d2bfb2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d2bfb17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkua5hi5n                        0x000055800aa60664 <unavailable> + 5732\n5    libc.so.6                          0x00002b2d2c4a7460 __libc_start_main + 245\n6    tmpkua5hi5n                        0x000055800aa60249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmprj82lrtc/tmprj82lrtc.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3675558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b367524fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b367524f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b367524e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprj82lrtc                        0x0000558094928754 <unavailable> + 5972\n5    libc.so.6                          0x00002b3675744460 __libc_start_main + 245\n6    tmprj82lrtc                        0x0000558094928339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpvxlj8uw1/tmpvxlj8uw1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b322e4c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b322e1b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b322e1b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b322e1b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxlj8uw1                        0x000055652e70f614 <unavailable> + 5652\n5    libc.so.6                          0x00002b322e6ad460 __libc_start_main + 245\n6    tmpvxlj8uw1                        0x000055652e70f1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp48_m6wus/tmp48_m6wus.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fa2204c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fa1efbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fa1efb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fa1efa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp48_m6wus                        0x000056188ba2e664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7fa23f0460 __libc_start_main + 245\n6    tmp48_m6wus                        0x000056188ba2e249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp6nazi3j8/tmp6nazi3j8.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae66fed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae66fbcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae66fbcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae66fbcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6nazi3j8                        0x0000559ce5eec664 <unavailable> + 5732\n5    libc.so.6                          0x00002ae6700c2460 __libc_start_main + 245\n6    tmp6nazi3j8                        0x0000559ce5eec249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for i in 0..<nums.count {\n        if !unique_nums.contains(nums[i]) {\n            unique_nums.append(nums[i])\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpg4c65yhp/tmpg4c65yhp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ad4fc2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ad4cb9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ad4cb9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ad4cb87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4c65yhp                        0x000055d0c65c5734 <unavailable> + 5940\n5    libc.so.6                          0x00002b8ad51ae460 __libc_start_main + 245\n6    tmpg4c65yhp                        0x000055d0c65c5319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if !nums_set.contains(num) {\n            nums_set.insert(num)\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpwt4m4_hy/tmpwt4m4_hy.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3124090c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3123d87b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3123d87988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3123d867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwt4m4_hy                        0x000055df226f1754 <unavailable> + 5972\n5    libc.so.6                          0x00002b312427c460 __libc_start_main + 245\n6    tmpwt4m4_hy                        0x000055df226f1339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    let set = Set(nums)\n    return Array(set)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp3qawcqew/tmp3qawcqew.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9a6e7dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9a6b74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9a6b74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9a6b737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3qawcqew                        0x000055b2828be544 <unavailable> + 5444\n5    libc.so.6                          0x00002ac9a7069460 __libc_start_main + 245\n6    tmp3qawcqew                        0x000055b2828be129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var unique_nums = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            unique_nums.append(num)\n        }\n        nums_set.insert(num)\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp72lyuozo/tmp72lyuozo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10e9645c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10e933cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10e933c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10e933b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp72lyuozo                        0x0000555913c52754 <unavailable> + 5972\n5    libc.so.6                          0x00002b10e9831460 __libc_start_main + 245\n6    tmp72lyuozo                        0x0000555913c52339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmprj82lrtc/tmprj82lrtc.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3675558c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b367524fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b367524f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b367524e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprj82lrtc                        0x0000558094928754 <unavailable> + 5972\n5    libc.so.6                          0x00002b3675744460 __libc_start_main + 245\n6    tmprj82lrtc                        0x0000558094928339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var result = [Int]()\n    var count = 0\n    for i in 0..<nums.count {\n        count = 0\n        for j in 0..<nums.count {\n            if nums[i] == nums[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            result.append(nums[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if unique_nums.contains(num) {\n            unique_nums.removeAll(where: {$0 == num})\n        } else {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    var numsDict = [Int: Int]()\n    for num in nums {\n        if numsDict[num] == nil {\n            numsDict[num] = 1\n        } else {\n            numsDict[num]! += 1\n        }\n    }\n    for (key, value) in numsDict {\n        if value == 1 {\n            uniqueNums.append(key)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpaa42xw66/tmpaa42xw66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf2ebffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf2e8f6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf2e8f6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf2e8f57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaa42xw66                        0x0000562170649984 <unavailable> + 6532\n5    libc.so.6                          0x00002acf2edeb460 __libc_start_main + 245\n6    tmpaa42xw66                        0x0000562170649569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var result = [Int]()\n    for num in nums {\n        if !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp0bzhe2ye/tmp0bzhe2ye.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9cee778c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9cee46fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9cee46f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9cee46e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0bzhe2ye                        0x0000555d8473b664 <unavailable> + 5732\n5    libc.so.6                          0x00002b9cee964460 __libc_start_main + 245\n6    tmp0bzhe2ye                        0x0000555d8473b249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for i in 0..<nums.count {\n        if nums[i] != nums[i+1] {\n            unique_nums.append(nums[i])\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b88e58dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b88e55d6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b88e55d6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b88e55d613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b88e55d5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b88e53d6e83 <unavailable> + 188035\n6    tmp_yhopgzd                        0x000055a2c53ebbb5 <unavailable> + 7093\n7    tmp_yhopgzd                        0x000055a2c53eb5f4 <unavailable> + 5620\n8    libc.so.6                          0x00002b88e5acb460 __libc_start_main + 245\n9    tmp_yhopgzd                        0x000055a2c53eb2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpvxlj8uw1/tmpvxlj8uw1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b322e4c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b322e1b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b322e1b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b322e1b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxlj8uw1                        0x000055652e70f614 <unavailable> + 5652\n5    libc.so.6                          0x00002b322e6ad460 __libc_start_main + 245\n6    tmpvxlj8uw1                        0x000055652e70f1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if unique_nums.contains(num) {\n            unique_nums.remove(at: unique_nums.firstIndex(of: num)!)\n        } else {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    var nums_set = Set<Int>()\n    \n    for num in nums {\n        if !nums_set.contains(num) {\n            nums_set.insert(num)\n            unique_nums.append(num)\n        }\n    }\n    \n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpl7a9fjub/tmpl7a9fjub.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6984f3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6984c35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6984c35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6984c347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl7a9fjub                        0x0000555c328c4754 <unavailable> + 5972\n5    libc.so.6                          0x00002b698512a460 __libc_start_main + 245\n6    tmpl7a9fjub                        0x0000555c328c4339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    while nums.count > 0 {\n        let num = nums.removeFirst()\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp7_ks3u7y/tmp7_ks3u7y.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac16a9cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac16a6c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac16a6c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac16a6c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7_ks3u7y                        0x00005565f98a45f4 <unavailable> + 5620\n5    libc.so.6                          0x00002ac16abb7460 __libc_start_main + 245\n6    tmp7_ks3u7y                        0x00005565f98a41d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = Set<Int>()\n    for num in nums {\n        unique_nums.insert(num)\n    }\n    return Array(unique_nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpbfpj3ec6/tmpbfpj3ec6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a8a39bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a8a092b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a8a092988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a8a0917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbfpj3ec6                        0x0000560d9b9fd6f4 <unavailable> + 5876\n5    libc.so.6                          0x00002b2a8a587460 __libc_start_main + 245\n6    tmpbfpj3ec6                        0x0000560d9b9fd2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums: [Int] = []\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp9_tbq6cl/tmp9_tbq6cl.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5474424c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b547411bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b547411b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b547411a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9_tbq6cl                        0x0000564914807614 <unavailable> + 5652\n5    libc.so.6                          0x00002b5474610460 __libc_start_main + 245\n6    tmp9_tbq6cl                        0x00005649148071f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    var num_count = [Int: Int]()\n    \n    for num in nums {\n        if num_count[num] == nil {\n            num_count[num] = 1\n        } else {\n            num_count[num]! += 1\n        }\n    }\n    \n    for (num, count) in num_count {\n        if count == 1 {\n            unique_nums.append(num)\n        }\n    }\n    \n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp4o96vhf4/tmp4o96vhf4.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b633b85fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b633b556b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b633b556988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b633b5557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4o96vhf4                        0x000056418e5a3984 <unavailable> + 6532\n5    libc.so.6                          0x00002b633ba4b460 __libc_start_main + 245\n6    tmp4o96vhf4                        0x000056418e5a3569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if unique_nums.contains(num) {\n            continue\n        } else {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmph53afvyg/tmph53afvyg.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b77f2effc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b77f2bf6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b77f2bf6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b77f2bf57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph53afvyg                        0x00005580e97b5614 <unavailable> + 5652\n5    libc.so.6                          0x00002b77f30eb460 __libc_start_main + 245\n6    tmph53afvyg                        0x00005580e97b51f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp48_m6wus/tmp48_m6wus.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fa2204c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fa1efbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fa1efb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fa1efa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp48_m6wus                        0x000056188ba2e664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7fa23f0460 __libc_start_main + 245\n6    tmp48_m6wus                        0x000056188ba2e249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var nums = nums\n    for i in 0..<nums.count {\n        var found = false\n        for j in 0..<nums.count {\n            if i != j && nums[i] == nums[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result.append(nums[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums: [Int] = []\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp9_tbq6cl/tmp9_tbq6cl.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5474424c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b547411bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b547411b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b547411a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9_tbq6cl                        0x0000564914807614 <unavailable> + 5652\n5    libc.so.6                          0x00002b5474610460 __libc_start_main + 245\n6    tmp9_tbq6cl                        0x00005649148071f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    var nums_set: Set<Int> = []\n    for num in nums {\n        if !nums_set.contains(num) {\n            nums_set.insert(num)\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp8jeyz_cy/tmp8jeyz_cy.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adb3bf42c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adb3bc39b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adb3bc39988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adb3bc387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8jeyz_cy                        0x000055b0eceae714 <unavailable> + 5908\n5    libc.so.6                          0x00002adb3c12e460 __libc_start_main + 245\n6    tmp8jeyz_cy                        0x000055b0eceae2f9 <unavailable> + 4857\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for i in 0..<nums.count {\n        if !unique_nums.contains(nums[i]) {\n            unique_nums.append(nums[i])\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp5qah4h7u/tmp5qah4h7u.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6c73afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6c70a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6c70a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6c70a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5qah4h7u                        0x00005626b4ec56e4 <unavailable> + 5860\n5    libc.so.6                          0x00002af6c759b460 __libc_start_main + 245\n6    tmp5qah4h7u                        0x00005626b4ec52c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmp4vtd2a83/tmp4vtd2a83.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add29d8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add29a85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add29a85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add29a847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtd2a83                        0x000055c35bf9b614 <unavailable> + 5652\n5    libc.so.6                          0x00002add29f7a460 __libc_start_main + 245\n6    tmp4vtd2a83                        0x000055c35bf9b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpvxlj8uw1/tmpvxlj8uw1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b322e4c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b322e1b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b322e1b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b322e1b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxlj8uw1                        0x000055652e70f614 <unavailable> + 5652\n5    libc.so.6                          0x00002b322e6ad460 __libc_start_main + 245\n6    tmpvxlj8uw1                        0x000055652e70f1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmp6nazi3j8/tmp6nazi3j8.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae66fed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae66fbcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae66fbcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae66fbcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6nazi3j8                        0x0000559ce5eec664 <unavailable> + 5732\n5    libc.so.6                          0x00002ae6700c2460 __libc_start_main + 245\n6    tmp6nazi3j8                        0x0000559ce5eec249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniques = [Int]()\n    for num in nums {\n        if !uniques.contains(num) {\n            uniques.append(num)\n        }\n    }\n    return uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpjj7aul1d/tmpjj7aul1d.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0bb1c36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0bb192db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0bb192d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0bb192c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjj7aul1d                        0x0000563f75096664 <unavailable> + 5732\n5    libc.so.6                          0x00002b0bb1e22460 __libc_start_main + 245\n6    tmpjj7aul1d                        0x0000563f75096249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpvxlj8uw1/tmpvxlj8uw1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b322e4c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b322e1b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b322e1b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b322e1b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxlj8uw1                        0x000055652e70f614 <unavailable> + 5652\n5    libc.so.6                          0x00002b322e6ad460 __libc_start_main + 245\n6    tmpvxlj8uw1                        0x000055652e70f1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    for num in nums {\n        nums_set.insert(num)\n    }\n    return Array(nums_set)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpkz61zigg/tmpkz61zigg.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdd5c0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdd5903b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdd5903988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdd59027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkz61zigg                        0x0000557cb90436f4 <unavailable> + 5876\n5    libc.so.6                          0x00002acdd5df8460 __libc_start_main + 245\n6    tmpkz61zigg                        0x0000557cb90432d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "tmpvxlj8uw1/tmpvxlj8uw1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b322e4c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b322e1b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b322e1b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b322e1b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxlj8uw1                        0x000055652e70f614 <unavailable> + 5652\n5    libc.so.6                          0x00002b322e6ad460 __libc_start_main + 245\n6    tmpvxlj8uw1                        0x000055652e70f1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var result = [Int]()\n    var count = 0\n    while count < nums.count {\n        if nums.count == 1 {\n            result.append(nums[0])\n            break\n        }\n        if nums[count] != nums[count + 1] {\n            result.append(nums[count])\n        }\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add76653c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add7634a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002add7634a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002add7634a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002add76349bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002add7614ae83 <unavailable> + 188035\n6    tmpzatuizor                        0x000055f1787c59d5 <unavailable> + 6613\n7    tmpzatuizor                        0x000055f1787c5464 <unavailable> + 5220\n8    libc.so.6                          0x00002add7683f460 __libc_start_main + 245\n9    tmpzatuizor                        0x000055f1787c5129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpjgxmc6a1/tmpjgxmc6a1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b508ce3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508cb35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508cb35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508cb347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgxmc6a1                        0x0000557601266664 <unavailable> + 5732\n5    libc.so.6                          0x00002b508d02a460 __libc_start_main + 245\n6    tmpjgxmc6a1                        0x0000557601266249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}