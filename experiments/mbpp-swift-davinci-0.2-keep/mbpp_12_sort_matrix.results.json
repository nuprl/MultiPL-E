{
  "name": "mbpp_12_sort_matrix",
  "language": "swift",
  "prompt": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    let sorted = M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    var sums = [Int]()\n    for row in M {\n        sums.append(row.reduce(0, +))\n    }\n    for i in 0..<sums.count {\n        for j in 0..<sums.count - 1 {\n            if sums[j] > sums[j + 1] {\n                sums.swapAt(j, j + 1)\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-i-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    var sums = [Int]()\n    for row in M {\n        sums.append(row.reduce(0, +))\n    }\n    for i in 0..<sums.count {\n        for j in i+1..<sums.count {\n            if sums[i] > sums[j] {\n                sums.swapAt(i, j)\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    let sorted = M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count {\n            for k in 0..<M.count {\n                if sum_of_elements(M[j]) < sum_of_elements(M[k]) {\n                    let aux = M[j]\n                    M[j] = M[k]\n                    M[k] = aux\n                }\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "/tmp/tmppesrymjc.swift:8:20: error: cannot find 'sum_of_elements' in scope\n                if sum_of_elements(M[j]) < sum_of_elements(M[k]) {\n                   ^~~~~~~~~~~~~~~\n/tmp/tmppesrymjc.swift:8:44: error: cannot find 'sum_of_elements' in scope\n                if sum_of_elements(M[j]) < sum_of_elements(M[k]) {\n                                           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (r1, r2) -> Bool in\n        r1.reduce(0, +) < r2.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    let sorted = M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count {\n            for k in 0..<M.count {\n                if M[i][j] > M[i][k] {\n                    let temp = M[i][j]\n                    M[i][j] = M[i][k]\n                    M[i][k] = temp\n                }\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "tmp21wdobyd/tmp21wdobyd.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b41b4ed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b41b4bcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b41b4bcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b41b4bcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp21wdobyd                        0x000055cae7084836 <unavailable> + 6198\n5    libc.so.6                          0x00002b41b50c2460 __libc_start_main + 245\n6    tmp21wdobyd                        0x000055cae70842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M[i].count {\n            for k in 0..<M.count {\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                    let temp = M[i]\n                    M[i] = M[k]\n                    M[k] = temp\n                }\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpuksiilpu.swift:8:20: error: cannot find 'sum_of_row' in scope\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                   ^~~~~~~~~~\n/tmp/tmpuksiilpu.swift:8:39: error: cannot find 'sum_of_row' in scope\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                                      ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if sum(M[j]) > sum(M[j+1]) {\n                swap(&M[j], &M[j+1])\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "/tmp/tmp2jen2n0a.swift:7:16: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n               ^~~\n/tmp/tmp2jen2n0a.swift:7:28: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M[i].count {\n            M[i][j] = M[i][j] * M[i][j]\n        }\n    }\n    M.sort { (a, b) -> Bool in\n        var sum_a = 0\n        var sum_b = 0\n        for i in 0..<a.count {\n            sum_a += a[i]\n            sum_b += b[i]\n        }\n        return sum_a < sum_b\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "tmpdr8x5voa/tmpdr8x5voa.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54de278c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54ddf6fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54ddf6f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54ddf6e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdr8x5voa                        0x000055f102d10986 <unavailable> + 6534\n5    libc.so.6                          0x00002b54de464460 __libc_start_main + 245\n6    tmpdr8x5voa                        0x000055f102d10429 <unavailable> + 5161\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (row1, row2) -> Bool in\n        return row1.reduce(0, +) < row2.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if sum(M[j]) > sum(M[j+1]) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "/tmp/tmpbjosfbb3.swift:7:16: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n               ^~~\n/tmp/tmpbjosfbb3.swift:7:28: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if sum(M[j]) > sum(M[j+1]) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "/tmp/tmp_vb3advl.swift:7:16: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n               ^~~\n/tmp/tmp_vb3advl.swift:7:28: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var result = M\n    for i in 0..<result.count {\n        for j in i+1..<result.count {\n            if result[i].reduce(0, +) > result[j].reduce(0, +) {\n                result.swapAt(i, j)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M[i].count {\n            for k in 0..<M.count {\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                    let temp = M[i]\n                    M[i] = M[k]\n                    M[k] = temp\n                }\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpuksiilpu.swift:8:20: error: cannot find 'sum_of_row' in scope\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                   ^~~~~~~~~~\n/tmp/tmpuksiilpu.swift:8:39: error: cannot find 'sum_of_row' in scope\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                                      ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    var sums = [Int]()\n    for i in 0..<M.count {\n        var sum = 0\n        for j in 0..<M[i].count {\n            sum += M[i][j]\n        }\n        sums.append(sum)\n    }\n    for i in 0..<sums.count {\n        for j in 0..<sums.count - i - 1 {\n            if sums[j] > sums[j + 1] {\n                sums.swapAt(j, j + 1)\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    var sums = [Int]()\n    for row in M {\n        sums.append(row.reduce(0, +))\n    }\n    for i in 0..<sums.count {\n        for j in i..<sums.count {\n            if sums[i] > sums[j] {\n                sums.swapAt(i, j)\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    let sorted = M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if sum(M[j]) > sum(M[j + 1]) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "/tmp/tmpns665ohl.swift:7:16: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j + 1]) {\n               ^~~\n/tmp/tmpns665ohl.swift:7:28: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j + 1]) {\n                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted {\n        $0.reduce(0, +) < $1.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-i-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { row1, row2 in\n        row1.reduce(0, +) < row2.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-i-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if sum_of_row(M: M, i: j) > sum_of_row(M: M, i: j + 1) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "/tmp/tmpz8y4bthz.swift:7:16: error: cannot find 'sum_of_row' in scope\n            if sum_of_row(M: M, i: j) > sum_of_row(M: M, i: j + 1) {\n               ^~~~~~~~~~\n/tmp/tmpz8y4bthz.swift:7:41: error: cannot find 'sum_of_row' in scope\n            if sum_of_row(M: M, i: j) > sum_of_row(M: M, i: j + 1) {\n                                        ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if sum_of_row(M[j]) > sum_of_row(M[j+1]) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "/tmp/tmpaz7ciggr.swift:7:16: error: cannot find 'sum_of_row' in scope\n            if sum_of_row(M[j]) > sum_of_row(M[j+1]) {\n               ^~~~~~~~~~\n/tmp/tmpaz7ciggr.swift:7:35: error: cannot find 'sum_of_row' in scope\n            if sum_of_row(M[j]) > sum_of_row(M[j+1]) {\n                                  ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var result = M\n    result.sort { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M[i].count {\n            for k in 0..<M.count {\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                    let temp = M[i]\n                    M[i] = M[k]\n                    M[k] = temp\n                }\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpuksiilpu.swift:8:20: error: cannot find 'sum_of_row' in scope\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                   ^~~~~~~~~~\n/tmp/tmpuksiilpu.swift:8:39: error: cannot find 'sum_of_row' in scope\n                if sum_of_row(M[i]) < sum_of_row(M[k]) {\n                                      ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if sum_of_row(M, i) > sum_of_row(M, j) {\n                let temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "/tmp/tmp4ie53roj.swift:7:16: error: cannot find 'sum_of_row' in scope\n            if sum_of_row(M, i) > sum_of_row(M, j) {\n               ^~~~~~~~~~\n/tmp/tmp4ie53roj.swift:7:35: error: cannot find 'sum_of_row' in scope\n            if sum_of_row(M, i) > sum_of_row(M, j) {\n                                  ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    var sums = [Int]()\n    for row in M {\n        sums.append(row.reduce(0, +))\n    }\n    for i in 0..<sums.count - 1 {\n        for j in i + 1..<sums.count {\n            if sums[i] > sums[j] {\n                sums.swapAt(i, j)\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    let sorted = M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if sum(M[j]) > sum(M[j+1]) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "/tmp/tmp_vb3advl.swift:7:16: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n               ^~~\n/tmp/tmp_vb3advl.swift:7:28: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { $0.reduce(0, +) < $1.reduce(0, +) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - i - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                M.swapAt(j, j + 1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, +) > M[j].reduce(0, +) {\n                M.swapAt(i, j)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count - 1 {\n            if M[j].reduce(0, +) > M[j + 1].reduce(0, +) {\n                let temp = M[j]\n                M[j] = M[j + 1]\n                M[j + 1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted(by: { $0.reduce(0, +) < $1.reduce(0, +) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    M.sort { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if M[j].reduce(0, +) > M[j+1].reduce(0, +) {\n                M.swapAt(j, j+1)\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in i+1..<M.count {\n            if M[i].reduce(0, combine: +) > M[j].reduce(0, combine: +) {\n                let tmp = M[i]\n                M[i] = M[j]\n                M[j] = tmp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1666123496,
      "stdout": "",
      "stderr": "/tmp/tmpqnwuokn9.swift:7:56: error: extraneous argument label 'combine:' in call\n            if M[i].reduce(0, combine: +) > M[j].reduce(0, combine: +) {\n                                                       ^   ~~~~~~~~~\n                                                           \n/tmp/tmpqnwuokn9.swift:7:27: error: extraneous argument label 'combine:' in call\n            if M[i].reduce(0, combine: +) > M[j].reduce(0, combine: +) {\n                          ^   ~~~~~~~~~\n                              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    var M = M\n    for i in 0..<M.count {\n        for j in 0..<M.count-1 {\n            if sum(M[j]) > sum(M[j+1]) {\n                let temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n            }\n        }\n    }\n    return M\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "/tmp/tmp_vb3advl.swift:7:16: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n               ^~~\n/tmp/tmp_vb3advl.swift:7:28: error: cannot find 'sum' in scope\n            if sum(M[j]) > sum(M[j+1]) {\n                           ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n    return M.sorted { (a, b) -> Bool in\n        return a.reduce(0, +) < b.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\nassert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\nassert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])",
      "timestamp": 1665510464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}