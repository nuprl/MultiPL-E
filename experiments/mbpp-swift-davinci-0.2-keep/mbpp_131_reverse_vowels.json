{
  "name": "mbpp_131_reverse_vowels",
  "language": "swift",
  "prompt": "\n/// Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nfunc reverse_vowels(str1: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_vowels(str1: \"Python\") == \"Python\")\nassert(reverse_vowels(str1: \"USA\") == \"ASU\")\nassert(reverse_vowels(str1: \"ab\") == \"ab\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var str = str1\n    var vowels = [Character]()\n    var index = [Int]()\n    for (i, c) in str.enumerated() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n            vowels.append(c)\n            index.append(i)\n        }\n    }\n    for i in 0..<vowels.count {\n        str.replaceSubrange(str.index(str.startIndex, offsetBy: index[i])...str.index(str.startIndex, offsetBy: index[i]), with: String(vowels[vowels.count - 1 - i]))\n    }\n    return str",
    "    var str1 = str1\n    var vowels = [Character]()\n    for char in str1.characters {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n        }\n    }\n    var index = 0\n    for i in 0..<str1.characters.count {\n        if str1[str1.startIndex.advancedBy(i)] == \"a\" || str1[str1.startIndex.advancedBy(i)] == \"e\" || str1[str1.startIndex.advancedBy(i)] == \"i\" || str1[str1.startIndex.advancedBy(i)] == \"o\" || str1[str1.startIndex.advancedBy(i)] == \"u\" {\n            str1.replaceRange(str1.startIndex.advancedBy(i)..<str1.startIndex.advancedBy(i+1), with: String(vowels[vowels.count-1-index]))\n            index += 1\n        }\n    }\n    return str1",
    "    var str = str1\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        while !is_vowel(str[str.index(str.startIndex, offsetBy: i)]) && i < j {\n            i += 1\n        }\n        while !is_vowel(str[str.index(str.startIndex, offsetBy: j)]) && i < j {\n            j -= 1\n        }\n        if i < j {\n            str.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    for char in str {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n        }\n    }\n    var i = 0\n    for char in str {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            str.replaceSubrange(str.range(of: String(char))!, with: String(vowels.popLast()!))\n        }\n        i += 1\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    var vowel_indices = [Int]()\n    for (i, c) in str.enumerated() {\n        if is_vowel(c) {\n            vowels.append(c)\n            vowel_indices.append(i)\n        }\n    }\n    for i in 0..<vowel_indices.count {\n        let index = vowel_indices[i]\n        let vowel = vowels[vowels.count - i - 1]\n        str.replaceSubrange(index...index, with: String(vowel))\n    }\n    return str",
    "    var str = str1\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        while i < j && !is_vowel(str[i]) {\n            i += 1\n        }\n        while i < j && !is_vowel(str[j]) {\n            j -= 1\n        }\n        if i < j {\n            str.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    var index = [Int]()\n    for (i, c) in str.enumerated() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n            vowels.append(c)\n            index.append(i)\n        }\n    }\n    var j = vowels.count - 1\n    for i in index {\n        str.replaceSubrange(str.index(str.startIndex, offsetBy: i)..<str.index(str.startIndex, offsetBy: i+1), with: String(vowels[j]))\n        j -= 1\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    let vowels_set = Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"])\n    for char in str {\n        if vowels_set.contains(char) {\n            vowels.append(char)\n        }\n    }\n    vowels.reverse()\n    var i = 0\n    for (index, char) in str.enumerated() {\n        if vowels_set.contains(char) {\n            str.replaceSubrange(index...index, with: String(vowels[i]))\n            i += 1\n        }\n    }\n    return str",
    "    var str = str1\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        if !is_vowel(str[i]) {\n            i += 1\n            continue\n        }\n        if !is_vowel(str[j]) {\n            j -= 1\n            continue\n        }\n        str.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return str",
    "    var str2 = str1\n    var i = 0\n    var j = str1.count - 1\n    while i < j {\n        while i < str1.count && !is_vowel(str1[i]) {\n            i += 1\n        }\n        while j >= 0 && !is_vowel(str1[j]) {\n            j -= 1\n        }\n        if i < j {\n            str2[i] = str1[j]\n            str2[j] = str1[i]\n            i += 1\n            j -= 1\n        }\n    }\n    return str2",
    "    var str = str1\n    var vowels = [Character]()\n    var index = [Int]()\n    for (i, c) in str.enumerated() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n            vowels.append(c)\n            index.append(i)\n        }\n    }\n    for i in 0..<vowels.count {\n        str.replaceSubrange(index[i]...index[i], with: String(vowels[vowels.count - i - 1]))\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    var index = [Int]()\n    for (i, char) in str.enumerated() {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n            index.append(i)\n        }\n    }\n    var j = vowels.count - 1\n    for i in index {\n        str.replaceSubrange(str.index(str.startIndex, offsetBy: i)..<str.index(str.startIndex, offsetBy: i+1), with: String(vowels[j]))\n        j -= 1\n    }\n    return str",
    "    var str = str1\n    var vowels: [Character] = []\n    var index: [Int] = []\n    for (i, c) in str.enumerated() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n            vowels.append(c)\n            index.append(i)\n        }\n    }\n    for i in 0..<vowels.count {\n        str.replaceSubrange(str.index(str.startIndex, offsetBy: index[i])...str.index(str.startIndex, offsetBy: index[i]), with: String(vowels[vowels.count - 1 - i]))\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    var vowels_index = [Int]()\n    for (index, char) in str.enumerated() {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n            vowels_index.append(index)\n        }\n    }\n    var i = 0\n    for index in vowels_index {\n        str.replaceSubrange(str.index(str.startIndex, offsetBy: index)..<str.index(str.startIndex, offsetBy: index+1), with: String(vowels[vowels.count-1-i]))\n        i += 1\n    }\n    return str",
    "    var str = str1\n    let vowels = \"aeiou\"\n    var i = 0\n    var j = str.count - 1\n    while i < j {\n        while i < j && !vowels.contains(str[i]) {\n            i += 1\n        }\n        while i < j && !vowels.contains(str[j]) {\n            j -= 1\n        }\n        if i < j {\n            str.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return str",
    "    var new_str = \"\"\n    var vowels = \"\"\n    for char in str1 {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n        }\n    }\n    vowels = String(vowels.reversed())\n    var i = 0\n    for char in str1 {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            new_str.append(vowels[vowels.index(vowels.startIndex, offsetBy: i)])\n            i += 1\n        } else {\n            new_str.append(char)\n        }\n    }\n    return new_str",
    "    var str = str1\n    var vowels = [Character]()\n    var index = [Int]()\n    for (i, c) in str.enumerated() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n            vowels.append(c)\n            index.append(i)\n        }\n    }\n    for i in 0..<vowels.count {\n        str.replaceSubrange(index[i]...index[i], with: String(vowels[vowels.count - i - 1]))\n    }\n    return str",
    "    var str = str1\n    var vowels = [Character]()\n    var index = [Int]()\n    for (i, c) in str.enumerated() {\n        if c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n            vowels.append(c)\n            index.append(i)\n        }\n    }\n    var j = vowels.count - 1\n    for i in index {\n        str.replaceSubrange(str.index(str.startIndex, offsetBy: i)..<str.index(str.startIndex, offsetBy: i+1), with: String(vowels[j]))\n        j -= 1\n    }\n    return str",
    "    var str2 = str1\n    var vowels = [Character]()\n    for char in str1 {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n        }\n    }\n    var i = 0\n    for char in str1 {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            str2.replaceSubrange(str2.range(of: String(char))!, with: String(vowels.popLast()!))\n        }\n    }\n    return str2",
    "    var str = str1\n    var vowels = [Character]()\n    for char in str {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            vowels.append(char)\n        }\n    }\n    var i = 0\n    for char in str {\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            str.replaceSubrange(str.range(of: String(char))!, with: String(vowels.popLast()!))\n        }\n    }\n    return str"
  ]
}