{
  "name": "mbpp_434_text_match_one",
  "language": "swift",
  "prompt": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp5o1sjr2p.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5o1sjr2p.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.match(\"a+b+\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmptqsjabhy.swift:4:17: error: value of type 'String' has no member 'match'\n    return text.match(\"a+b+\")\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp5o1sjr2p.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5o1sjr2p.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmp2ejmijdk.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp2ejmijdk.swift:4:47: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n                                             ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmpkmh2kr1k.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkmh2kr1k.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"a+b\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpp3e0m3do.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"a+b\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpp3e0m3do.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"a+b\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "/tmp/tmpuliilo9x.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpuliilo9x.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "tmpx1x_y2x9/tmpx1x_y2x9.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b73c075bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b73c0452b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b73c0452988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b73c04517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx1x_y2x9                        0x00005609b8f1f3a6 <unavailable> + 5030\n5    libc.so.6                          0x00002b73c0947460 __libc_start_main + 245\n6    tmpx1x_y2x9                        0x00005609b8f1eee9 <unavailable> + 3817\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    if let _ = text.range(of: \"ab+\", options: .regularExpression) {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "/tmp/tmp7nb5g39_.swift:4:21: error: value of type 'String' has no member 'range'\n    if let _ = text.range(of: \"ab+\", options: .regularExpression) {\n               ~~~~ ^~~~~\n/tmp/tmp7nb5g39_.swift:4:48: error: cannot infer contextual base in reference to member 'regularExpression'\n    if let _ = text.range(of: \"ab+\", options: .regularExpression) {\n                                              ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp5o1sjr2p.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5o1sjr2p.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp5o1sjr2p.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5o1sjr2p.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp5o1sjr2p.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5o1sjr2p.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmp2ejmijdk.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp2ejmijdk.swift:4:47: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n                                             ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.rangeOfString(\"a[b]+\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmpuc8dujcn.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"a[b]+\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpuc8dujcn.swift:4:50: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"a[b]+\", options: .RegularExpressionSearch) != nil\n                                                ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.hasPrefix(\"a\") && text.hasSuffix(\"b\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "tmpm4rb_0zz/tmpm4rb_0zz.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeffca0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeffc703b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeffc703988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeffc7027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm4rb_0zz                        0x000055e1cec38456 <unavailable> + 5206\n5    libc.so.6                          0x00002aeffcbf8460 __libc_start_main + 245\n6    tmpm4rb_0zz                        0x000055e1cec37f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmpkmh2kr1k.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkmh2kr1k.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpcyxjmf6y.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcyxjmf6y.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.match(\"a+b+\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmptqsjabhy.swift:4:17: error: value of type 'String' has no member 'match'\n    return text.match(\"a+b+\")\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmpkp76rmg3.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkp76rmg3.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text =~ \"a+b+\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmpp6ptd4ad.swift:4:17: error: cannot find operator '=~' in scope\n    return text =~ \"a+b+\"\n                ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123974,
      "stdout": "",
      "stderr": "/tmp/tmp2ejmijdk.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp2ejmijdk.swift:4:47: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"^a+b+$\", options: .regularExpression) != nil\n                                             ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.match(pattern: \"ab+\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "/tmp/tmp5lz7za1b.swift:4:17: error: value of type 'String' has no member 'match'\n    return text.match(pattern: \"ab+\")\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmprw_lqgab.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprw_lqgab.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a(b+)$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "/tmp/tmpj0tmxnq_.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a(b+)$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0tmxnq_.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp5o1sjr2p.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^a+b+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5o1sjr2p.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmpsy2n4to3.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpsy2n4to3.swift:4:44: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"ab+\", options: .regularExpression) != nil\n                                          ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp59hf4vbx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59hf4vbx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_one(text: \"ac\") == false)\nassert(text_match_one(text: \"dc\") == false)\nassert(text_match_one(text: \"abba\") == true)",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "/tmp/tmp_9zdnotq.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"ab+\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_9zdnotq.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}