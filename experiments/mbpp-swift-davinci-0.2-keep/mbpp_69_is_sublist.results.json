{
  "name": "mbpp_69_is_sublist",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            var k = i\n            while j < s.count && k < l.count && l[k] == s[j] {\n                j += 1\n                k += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    if j == s.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count { return false }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count { return true }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    let l_len = l.count\n    let s_len = s.count\n    if l_len < s_len {\n        return false\n    }\n    for i in 0..<l_len {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s_len && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s_len {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l.count < s.count {\n        return false\n    }\n    if l.first! == s.first! {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    }\n    return is_sublist(l: Array(l[1..<l.count]), s: s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpeb_3rygr/tmpeb_3rygr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaba4f04c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaba4bfbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaba4bfb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaba4bfa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_3rygr                        0x000055ac95321686 <unavailable> + 5766\n5    libc.so.6                          0x00002aaba50f0460 __libc_start_main + 245\n6    tmpeb_3rygr                        0x000055ac953212a9 <unavailable> + 4777\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count == 0 {\n        return true\n    }\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if i + j >= l.count {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    if l.count == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    } else {\n        return is_sublist(l: Array(l[1..<l.count]), s: s)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpxxlyme_4/tmpxxlyme_4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b290b9b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b290b6aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b290b6aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b290b6a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxxlyme_4                        0x00005614cc96a5e6 <unavailable> + 5606\n5    libc.so.6                          0x00002b290bb9f460 __libc_start_main + 245\n6    tmpxxlyme_4                        0x00005614cc96a209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        if j == s.count {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<l.count-s.count+1 {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var l_index = 0\n    var s_index = 0\n    while l_index < l.count && s_index < s.count {\n        if l[l_index] == s[s_index] {\n            s_index += 1\n        }\n        l_index += 1\n    }\n    return s_index == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpllxgjpst/tmpllxgjpst.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9eb8045c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9eb7d3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9eb7d3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9eb7d3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpllxgjpst                        0x00005644e9d0e3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b9eb8231460 __libc_start_main + 245\n6    tmpllxgjpst                        0x00005644e9d0e019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if i + j >= l.count || l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    guard l.count >= s.count else { return false }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var found = true\n            for j in 0..<s.count {\n                if i + j >= l.count || l[i + j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpe2a5nb00/tmpe2a5nb00.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71abeb1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71abba8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71abba8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71abba77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe2a5nb00                        0x0000560ef3d413f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b71ac09d460 __libc_start_main + 245\n6    tmpe2a5nb00                        0x0000560ef3d41019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmp44qf2g2y/tmp44qf2g2y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae59eacac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae59e7c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae59e7c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae59e7c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44qf2g2y                        0x0000561aefa963f6 <unavailable> + 5110\n5    libc.so.6                          0x00002ae59ecb6460 __libc_start_main + 245\n6    tmp44qf2g2y                        0x0000561aefa96019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    let l_len = l.count\n    let s_len = s.count\n    if l_len < s_len {\n        return false\n    }\n    for i in 0...(l_len - s_len) {\n        var j = 0\n        while j < s_len && l[i + j] == s[j] {\n            j += 1\n        }\n        if j == s_len {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if i + j >= l.count || l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if i + j >= l.count {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        var j = 0\n        while j < s.count && l[i + j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpnyis4kdk/tmpnyis4kdk.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7320808c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b73204ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b73204ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b73204fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnyis4kdk                        0x000055ff696273f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b73209f4460 __libc_start_main + 245\n6    tmpnyis4kdk                        0x000055ff69627019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i...i+s.count-1] == s {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "/tmp/tmp5n6nysg1.swift:8:34: error: cannot convert value of type '[Int]' to expected argument type 'ArraySlice<Int>'\n        if l[i...i+s.count-1] == s {\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    \n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count == 0 {\n        return true\n    }\n    if l.count == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    }\n    return is_sublist(l: Array(l[1..<l.count]), s: s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpdvjgmv0t/tmpdvjgmv0t.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b78f4b33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78f482ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78f482a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78f48297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdvjgmv0t                        0x00005569109195e6 <unavailable> + 5606\n5    libc.so.6                          0x00002b78f4d1f460 __libc_start_main + 245\n6    tmpdvjgmv0t                        0x0000556910919209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        var j = 0\n        while j < s.count && l[i+j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    return l.contains(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    return l.contains(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l.count < s.count {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    } else {\n        return is_sublist(l: Array(l[1..<l.count]), s: s)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpurrqvsk2/tmpurrqvsk2.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14753acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14750a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14750a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14750a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurrqvsk2                        0x000055c965e8a676 <unavailable> + 5750\n5    libc.so.6                          0x00002b1475598460 __libc_start_main + 245\n6    tmpurrqvsk2                        0x000055c965e8a299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    \n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            if Array(l[i..<i+s.count]) == s {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpe2a5nb00/tmpe2a5nb00.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71abeb1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71abba8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71abba8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71abba77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe2a5nb00                        0x0000560ef3d413f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b71ac09d460 __libc_start_main + 245\n6    tmpe2a5nb00                        0x0000560ef3d41019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    if s.count == 1 {\n        return l.contains(s[0])\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if i + j >= l.count {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            if l[i..<i+s.count] == s {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "/tmp/tmptedddx_c.swift:12:36: error: cannot convert value of type '[Int]' to expected argument type 'ArraySlice<Int>'\n            if l[i..<i+s.count] == s {\n                                   ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        var j = 0\n        while j < s.count && l[i + j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    return l.contains(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    }\n    return is_sublist(l: Array(l[1..<l.count]), s: s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpr67k8a55/tmpr67k8a55.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2acacdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2ac7c4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2ac7c4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2ac7c37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr67k8a55                        0x0000563d4e377676 <unavailable> + 5750\n5    libc.so.6                          0x00002af2accb9460 __libc_start_main + 245\n6    tmpr67k8a55                        0x0000563d4e377299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var found = true\n            for j in 0..<s.count {\n                if l[i + j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var found = true\n            for j in 0..<s.count {\n                if l[i+j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == s.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpjaa90ar2/tmpjaa90ar2.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7df0b4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7df0845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7df0845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7df08447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjaa90ar2                        0x000055a83a7873f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7df0d3a460 __libc_start_main + 245\n6    tmpjaa90ar2                        0x000055a83a787019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count - s.count + 1 {\n        if s == Array(l[i..<i+s.count]) {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if i + j >= l.count {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "tmpxu7mj0o_/tmpxu7mj0o_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b266911bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2668e12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2668e12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2668e117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxu7mj0o_                        0x000055e4627483f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2669307460 __libc_start_main + 245\n6    tmpxu7mj0o_                        0x000055e462748019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    if s.isEmpty {\n        return true\n    }\n    if l.isEmpty {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    } else {\n        return is_sublist(l: Array(l[1..<l.count]), s: s)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "tmpgfx9nct5/tmpgfx9nct5.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81f2b6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81f2862b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81f2862988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81f28617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgfx9nct5                        0x0000557126169676 <unavailable> + 5750\n5    libc.so.6                          0x00002b81f2d57460 __libc_start_main + 245\n6    tmpgfx9nct5                        0x0000557126169299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}